<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Crushing C.O.D.E</title>
    <link>http://crushingcode.github.io/post/index.xml</link>
    <description>Recent content in Posts on Crushing C.O.D.E</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2017</copyright>
    <lastBuildDate>Sun, 05 Mar 2017 10:54:24 +0200</lastBuildDate>
    <atom:link href="http://crushingcode.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Things I wish I knew when I started building Android SDK/Libraries</title>
      <link>http://crushingcode.github.io/things-i-wish-i-knew-when-i-started-building-android-sdk-libraries/</link>
      <pubDate>Sun, 05 Mar 2017 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/things-i-wish-i-knew-when-i-started-building-android-sdk-libraries/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/things-i-wish-i-knew-when-i-started-building-android-sdk-libraries/header.png&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It all starts when some android developer tries to figure out a solution to a problem he/she is having while building their &lt;strong&gt;&amp;ldquo;Awesome Android App&amp;rdquo;&lt;/strong&gt;. During the process, most developers would encounter a couple of issues and in tandem, to those, they would come up with possible solutions.&lt;/p&gt;

&lt;p&gt;Now here is a thing, if you are like me, who believes that if the problem was big enough for me to spend some time on it and there wasn’t an existing solution out there, I would abstract the whole solution in a modular manner, which eventually turns out to be an android library. Just so that whenever in future I encounter this problem again, I can reuse this solution easily.&lt;/p&gt;

&lt;p&gt;So far, so good. So you have built the library and probably started using it completely privately or if you think someone else could make use of the same solution you release the code as an android library i.e.you open source the code. I believe (..or rather that is what it looks like..) at this point everyone thinks they are done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WRONG!&lt;/strong&gt; This very point is where most people usually miss out that this android library code is going to be used by other developers that do not sit next to you and that to them this is just some android library they wish to use to solve a similar problem. The better your approach of designing the API the better the chances of making sure that the library will be used as it is intended to be and whoever is using it isn’t confused. It should be clear from the very start what needs to be done to start using the library.&lt;/p&gt;

&lt;h5 id=&#34;why-does-this-happen&#34;&gt;&lt;em&gt;Why does this happen?&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;The devs that write these android libraries are usually the ones who don’t care about the API design when building one. At least the majority of them don’t. Not because they are indifferent but I think most of them are just beginners and there is no set rules that they can look up to be better at designing the API. I was in the same boat sometime back, so I can understand the frustration of not having a lot of information in this field.&lt;/p&gt;

&lt;p&gt;So I have had my experiences and I happen to release some of the code as android libraries (&lt;a href=&#34;https://github.com/nisrulz/android-tips-tricks#extra--android-libraries-built-by-me&#34;&gt;which you can check out here&lt;/a&gt;). I have come up with a quick list of points which each and every developer who designs an API in the form of Android Library should keep in mind (some of them may apply to designing API in general too).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Point to note here, my list isn’t exhaustive and I may not be covering everything. It covers things I have encountered and wished I knew it when I started and thus I will keep on updating this post as and when I learn with more experience in the future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before we dive into anything let’s first answer the most basic questions that everyone would have regarding building Android SDK/Library. So here goes&lt;/p&gt;

&lt;h3 id=&#34;why-would-you-create-an-android-sdk-library&#34;&gt;Why would you create an android SDK/Library?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/things-i-wish-i-knew-when-i-started-building-android-sdk-libraries/question.gif&#34; alt=&#34;question&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Sure it is&amp;hellip;well, you do not have to create an SDK/library in all cases. It makes more sense to decide on building one based on the understanding of what value you bring to the table. Ask yourself the below&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Is there some existing solution that would solve the problem?&lt;/em&gt;&lt;/strong&gt;
If your answer is Yes, then possible try and use that existing solution.
Say that does not solve your specific problem, even in that scenario it is better to start by forking the code, modifying it to solve the problem and then using it versus starting from scratch.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bonus Points&lt;/strong&gt; to you if you go ahead and submit a Pull Request to get the fix you made pushed into the existing library code so that the community can benefit from it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If your answer is No, then go ahead and build the android sdk/library. Share it with the world later on so that others can make use of it in their projects.&lt;/p&gt;

&lt;h3 id=&#34;what-are-the-packaging-options-for-your-artifacts&#34;&gt;What are the packaging options for your artifacts?&lt;/h3&gt;

&lt;p&gt;Even before you start building your library you need to decide on how do you want to deliver your artifacts to developers.
Let me start here by describing some terms which we might use in the post here. To begin with let me describe what is an artifact first,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In general software terms, an &lt;strong&gt;&amp;ldquo;artifact&amp;rdquo;&lt;/strong&gt; is something produced by the software development process, whether it be software related documentation or an executable file.
In Maven terminology, the artifact is the resulting output of the maven build, generally a &lt;code&gt;jar&lt;/code&gt; , &lt;code&gt;war&lt;/code&gt; , &lt;code&gt;aar&lt;/code&gt; or other executable files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s look at the options you have&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Library Project&lt;/strong&gt;: Code that you have to checkout and link into your project. It is the most flexible one as you can modify the code once you have it in your code, but also introduces issues such as being in sync with upstream changes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JAR&lt;/strong&gt;: &lt;strong&gt;J&lt;/strong&gt;ava &lt;strong&gt;AR&lt;/strong&gt;chive is a package file format typically used to aggregate many Java class files and associated metadata into one file for distribution.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AAR&lt;/strong&gt;: &lt;strong&gt;A&lt;/strong&gt;ndroid &lt;strong&gt;AR&lt;/strong&gt;chive is similar to JAR with added functionality. Unlike JAR files, AAR files can contain Android resources and a manifest file, which allows you to bundle in shared resources like layouts and drawable in addition to Java classes and methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;we-have-the-artifact-now-what-where-does-one-host-these-artifacts&#34;&gt;We have the artifact, Now what? Where does one host these artifacts?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/things-i-wish-i-knew-when-i-started-building-android-sdk-libraries/trickquestion.gif&#34; alt=&#34;question&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Not really&amp;hellip;
Turns out you have a couple of options here too, each having its own pros and cons. Let’s take a look at each&lt;/p&gt;

&lt;h5 id=&#34;local-aar&#34;&gt;Local AAR&lt;/h5&gt;

&lt;p&gt;If you happen to be very specific about not wanting to put your android library artifact into any repository, you can generate your local aar file and use that directly. Read &lt;a href=&#34;http://stackoverflow.com/a/28816265/2745762&#34;&gt;this stackoverflow answer&lt;/a&gt; to understand how to do that.&lt;/p&gt;

&lt;p&gt;In a gist is you need to put the &lt;code&gt;aar&lt;/code&gt; file in the &lt;code&gt;libs&lt;/code&gt; directory (create it if needed), then, add the following code in your &lt;code&gt;build.gradle&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
   compile(name:&#39;nameOfYourAARFileWithoutExtension&#39;, ext:&#39;aar&#39;)
 }
repositories{
      flatDir{
              dirs &#39;libs&#39;
       }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..what comes with this is that now whenever you want to share your android library you are passing around your &lt;code&gt;aar&lt;/code&gt; file(…which is not the best way to share your android library).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Avoid doing this as much as you can&lt;/strong&gt;, since it is prone to a lot of problems the biggest one being manageability and maintainability of the code base.
Another issue with this approach is you cannot make sure that the users of this artifact are in sync with the latest code.
Not to mention the whole process is lengthy and prone to human error, just to integrate the library in an android project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;local-remote-maven-repositories&#34;&gt;Local/Remote Maven Repositories&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;What if you wanted to use the android library privately?&lt;/em&gt;
The solution for that is to deploy your own instance of artifactory (read about how to do that &lt;a href=&#34;http://jeroenmols.com/blog/2015/08/06/artifactory/&#34;&gt;here&lt;/a&gt;) or using Github or Bitbucket repository as your own maven repository (read about how to do that &lt;a href=&#34;http://crushingcode.nisrulz.com/own-a-maven-repository-like-a-bosspart-1/&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Again &lt;strong&gt;this is specific to you using your android library privately. If you want to share this with others its not the approach you wanna stick to.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First issue that this approach has is that your artifact is in an private repository, to give access to this library you have to give access to the private repository which could be a security issue.
Second issue is that to use your android library one would need to include an extra line in their root &lt;code&gt;build.gradle&lt;/code&gt; file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;allprojects {
	repositories {
		...
		maven { url &#39;http://url.to_your_hosted_artifactory_instance.maven_repository&#39; }
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..which to be fair is an extra step and we are all here to make the process simpler. It is easier on the creator part to push the android library out quickly but adds an extra step for the users to use the library code.&lt;/p&gt;

&lt;h5 id=&#34;maven-central-jcenter-or-jitpack&#34;&gt;Maven Central, Jcenter or JitPack&lt;/h5&gt;

&lt;p&gt;Now the easiest way to push it out immediately is via &lt;strong&gt;JitPack&lt;/strong&gt;. So you would want to do that. JitPack takes your code from a public git repository, checks out the latest release code, builds it to generate the artifacts and later publishes to their self hosted maven repository.
However the issue at hand is same as the one for local/remote maven repositories that users of your android library would need to include an extra line in their root &lt;code&gt;build.gradle&lt;/code&gt; file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;allprojects {
	repositories {
		...
		maven { url &#39;https://www.jitpack.io&#39; }
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can read about how to publish your android library to JitPack &lt;a href=&#34;http://crushingcode.co/publish-your-android-library-via-jitpack/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The other option you have is of Maven Central or Jcenter.&lt;/p&gt;

&lt;p&gt;Personally &lt;strong&gt;&lt;em&gt;I would suggest you to stick to Jcenter&lt;/em&gt;&lt;/strong&gt; as it well documented and better managed. It is also the default repository that is looked up for dependencies in Android projects (…unless someone changed it).&lt;/p&gt;

&lt;p&gt;If you publish to Jcenter, bintray the company behind it gives you the option to sync with Maven Central from within their publishing platform. Once published its as simple as adding the below line to your build.gradle file to use the library in any android project&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
      compile &#39;com.github.nisrulz:awesomelib:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can read about how to publish your android library to Jcenter &lt;a href=&#34;http://crushingcode.co/publish-your-android-library-via-jcenter/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With all those basic questions out of the way, let us look at things one should take care of while building an Android SDK/Library&lt;/p&gt;

&lt;h3 id=&#34;avoid-multiple-arguments&#34;&gt;Avoid multiple arguments&lt;/h3&gt;

&lt;p&gt;Every android library has to be usually initialized with some arguments and to do that you would usually be passing a set of arguments to either a constructor or have an init function to setup your library. Whenever doing that consider the below&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Passing more than 2–3 arguments to your init() function is bound to cause more headaches than provide ease of use.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just because its hard to remember the exact mapping of these arguments and the order in which they are declared in the library code.It also is prone to more mistakes as anyone can make a mistake of passing &lt;code&gt;int&lt;/code&gt; value in a &lt;code&gt;String&lt;/code&gt; field or vice versa.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// DONOT DO THIS
void init(String apikey, int refresh, long interval, String type);
// DO this
void init(ApiSecret apisecret);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where ApiSecret is an Entity Class, declared as below&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class ApiSecret{
    String apikey;
    int refresh;
    long interval;
    String type;
    // constructor
    /* you can define proper checks(such as type safety) and
     * conditions to validate data before it gets set
     */
   
    // setter and getters
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you can also use &lt;code&gt;Builder Pattern&lt;/code&gt; as an alternative approach to the above.&lt;/p&gt;

&lt;p&gt;You can read more about Builder Pattern &lt;a href=&#34;https://sourcemaking.com/design_patterns/builder&#34;&gt;here&lt;/a&gt;. &lt;a href=&#34;https://jlordiales.me/about/&#34;&gt;JOSE LUIS ORDIALES&lt;/a&gt; talks in depth about how to implement it in your code, take a look &lt;a href=&#34;https://jlordiales.me/2012/12/13/the-builder-pattern-in-practice/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;ease-of-use&#34;&gt;Ease of use&lt;/h3&gt;

&lt;p&gt;When building your android library, keep in mind the usability of the library and the methods you expose. It should be&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Intuitive&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For everything thats happening in the android library code , there should be some feedback either in the logs or in the view. Depends on what kind of an android library is being built. If it does something that cannot be comprehended easily, the android library basically “does not work” in the language of devs. It should do what the user of android library expects it to do without having to look up the documentation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Consistent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The code for the android library should be well thought and should not change drastically between versions. Follow &lt;a href=&#34;http://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Easy to use, Hard to misuse&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It should be easily understandable in terms of implementation and its usage in the first sight itself. The exposed public methods should have enough validation checks to make sure people cannot misuse its functionality other than what it was coded and intended for.Provide sane defaults and handle scenarios when dependencies are not present.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short…&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/things-i-wish-i-knew-when-i-started-building-android-sdk-libraries/easy.gif&#34; alt=&#34;easy&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;minimize-permissions&#34;&gt;Minimize Permissions&lt;/h3&gt;

&lt;p&gt;In the current times, when everyone just wants to jump the road and ask as many permissions, you should pause and think about do you really need that extra permission. Take care of these points especially&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Minimize your permissions as much as you can.&lt;/li&gt;
&lt;li&gt;Use Intents to let dedicated apps do the work for you and return the processed result.&lt;/li&gt;
&lt;li&gt;Enable and disable your features based off if you have the permission for it. Do not let your code crash just because you do not have the said permission. If at all , you must educate the user well before requesting the permission and that why its required. If possible have a fallback functionality if the permission isn’t approved.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is how you check if you have a said permission granted or not:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public boolean hasPermission(Context context, String permission) {
  int result = context.checkCallingOrSelfPermission(permission);
  return result == PackageManager.PERMISSION_GRANTED;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some of the devs would say that they really need that specific permission, what to do in that case. Well, your library code should be generic for all types of apps that need the specific functionality. If you can provide hooks such as functions to let users of your android library pass the data you need the dangerous permission for. In that way, you do not force the devs to require a permission they do not want to. In absence of the permission provide a fallback implementation. Simple.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/* Requiring GET_ACCOUNTS permission (as a requisite to use the 
 * library) is avoided here by providing a function which lets the 
 * devs to get it on their own and feed it to a function in the 
 * library.
 */
MyAwesomeLibrary.getEmail(&amp;quot;username@emailprovider.com&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;minimize-requisites&#34;&gt;Minimize Requisites&lt;/h3&gt;

&lt;p&gt;We have all been there. We have a specific functionality that requires that the device has a certain feature. The usual way you would approach this is by defining the below in your manifest file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;uses-feature android:name=&amp;quot;android.hardware.bluetooth&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..the problem with this is that when this is defined in the android library code, this would get merged into the app manifest file during the manifest-merger phase of &lt;code&gt;build&lt;/code&gt; and thus hide the app in Play Store for devices that do not have the bluetooth unit (this is something the Play Store does as filtering). So basically an app that was earlier visible to a larger audience would now be visible to a smaller audience, just cause you added that to your library code.&lt;/p&gt;

&lt;p&gt;Well, that’s not we want, do we? Nope. So how do we solve this.
&lt;em&gt;Well what you need to do is not include that &lt;code&gt;uses-feature&lt;/code&gt; in your manifest file for the android library but rather check for the feature during runtime in your code as below&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String feature = PackageManager.FEATURE_BLUETOOTH;
public boolean isFeatureAvailable(Context context, String feature) {
 return context.getPackageManager().hasSystemFeature(feature);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. this way there is no entry in the manifest and once it merges into the app, it won’t let the app get filtered in the Play Store.&lt;/p&gt;

&lt;p&gt;As an added feature though if the feature is not available you can just disable the functionality in your library code and have some fallback functionality in place. It is a Win- Win for both the android dev who built the library and the dev who integrates the lib in their app.&lt;/p&gt;

&lt;h3 id=&#34;support-different-versions&#34;&gt;Support different versions&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/things-i-wish-i-knew-when-i-started-building-android-sdk-libraries/howmany.gif&#34; alt=&#34;question&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;em&gt;How many are out there exactly?&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;If you have a feature that’s available in a certain version of android, you should do the check for that in code and disable the feature if the version is lower than supported.
As a rule of thumb support the full spectrum of versions via defining in &lt;code&gt;minSdkVersion&lt;/code&gt; and &lt;code&gt;targetSdkVersion&lt;/code&gt;. What you should do internally to your library code is check for the android version at runtime and enable/disable the feature or use a fallback.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Method to check if the Android Version on device is greater than or equal to Marshmallow.
public boolean isMarshmallow(){
    return Build.VERSION.SDK_INT&amp;gt;= Build.VERSION_CODES.M;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;do-not-log-in-production&#34;&gt;Do not log in production&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/things-i-wish-i-knew-when-i-started-building-android-sdk-libraries/no.gif&#34; alt=&#34;question&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Just DO NOT.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Almost every time I am asked to test an app or an android library project the first thing that I have seen is that they log everything up in the open, in their release code.
As a rule of thumb, never log in production. You should use &lt;a href=&#34;https://developer.android.com/studio/build/build-variants.html&#34;&gt;build-variants&lt;/a&gt; with &lt;a href=&#34;https://github.com/JakeWharton/timber&#34;&gt;timber&lt;/a&gt; to help you in the process to separate logging info in production vs debug builds. A simple solution can be to provide a &lt;code&gt;debuggable&lt;/code&gt; flag that the devs can flip to enable/disable logging from your android library&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// In code     
boolean debuggable = false;
MyAwesomeLibrary.init(apisecret,debuggable);
// In build.gradle     
debuggable = true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;do-not-crash-silently-and-fail-fast&#34;&gt;Do not crash silently and fail fast&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/things-i-wish-i-knew-when-i-started-building-android-sdk-libraries/crash.png&#34; alt=&#34;crash&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I have seen this a lot of times now. Some of the devs would not log their errors and exception in logcat! Which basically adds a headache to the users of the android library when they are trying to debug the code. In tandem to the last tip about not logging in production, you must understand that exceptions and errors need to be logged irrespective of being in debug or production. If you do not want to log in production, at least provide a functionality of enabling logs via passing some flag when you initialize your library. i.e&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;void init(ApiSecret apisecret,boolean debuggable){
      ...
      try{
        ...
      }catch(Exception ex){
        if(debuggable){
          // This is printed only when debuggable is true
          ex.printStackTrace();
        }
      }
      ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is important that your android library fails immediately and shows an exception to the user of your android library instead of being hung up on doing something. Avoid writing code which would block the Main Thread.&lt;/p&gt;

&lt;h3 id=&#34;degrade-gracefully-in-an-event-of-error&#34;&gt;Degrade gracefully in an event of error&lt;/h3&gt;

&lt;p&gt;What I mean by this is that when say your android library code fails, try to have a check so that the code would not crash the app instead only the functionality provided by your library code is disabled.&lt;/p&gt;

&lt;h3 id=&#34;catch-specific-exceptions&#34;&gt;Catch specific exceptions&lt;/h3&gt;

&lt;p&gt;Continuing with the last tip, you might notice that in my last code snippet I am using a &lt;code&gt;try-catch&lt;/code&gt; statement. Catch statement specifically catches all &lt;code&gt;Exception&lt;/code&gt; as its a base class. There is no specific distinction between one exception vs the other one. So what one must do is define specific types of &lt;code&gt;Exception&lt;/code&gt; as per the requirement at hand. i.e &lt;code&gt;NUllPointerException&lt;/code&gt;, &lt;code&gt;SocketTimeoutException&lt;/code&gt;, &lt;code&gt;IOException&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h3 id=&#34;handle-poor-network-conditions&#34;&gt;Handle poor network conditions&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/things-i-wish-i-knew-when-i-started-building-android-sdk-libraries/loading.gif&#34; alt=&#34;question&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;…this gets on my nerves, seriously!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If the android library you wrote deals with making network calls, a very simple thing that usually goes unnoticed is that you should always consider a case of what happens if the network is slow or non-responsive.&lt;/p&gt;

&lt;p&gt;What I have observed is that library code developers assume that the network calls being made will always go through. A good example will be if your android library fetches some config file from the server to initialize itself. Now when developing the library the devs assume that the config file will always get downloaded. What they forget is that on a flaky network, the library code will not be able to download the config file and hence would crash the whole codebase. If simple checks and a strategy to handle such situations are built right into the android library code, it saves quite a number of people the headaches they would have otherwise.&lt;/p&gt;

&lt;p&gt;Whenever possible batch your network calls and avoid multiple calls. This also &lt;a href=&#34;https://developer.android.com/training/monitoring-device-state/index.html&#34;&gt;saves a lot of battery&lt;/a&gt;, &lt;a href=&#34;https://developer.android.com/training/efficient-downloads/efficient-network-access.html&#34;&gt;read here&lt;/a&gt;
Reduce the amount of data you transfer over the network by moving away from JSON and XML to &lt;a href=&#34;https://google.github.io/flatbuffers/&#34;&gt;Flatbuffers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.android.com/topic/performance/power/network/index.html&#34;&gt;Read more about managing network here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;reluctance-to-include-large-libraries-as-dependencies&#34;&gt;Reluctance to include large libraries as dependencies&lt;/h3&gt;

&lt;p&gt;This one goes without much explanation. As most of fellow Android Devs would be knowing, there is a method count limit of 65K methods for android app code. Now say if you have a transitive dependency on a large library, you would introduce two undesirable effects to the android app your library is being included&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You will considerably increase the method count of the android app, even though your own library codebase has a low method count footprint since you would transitively download the larger library and thus it will contribute to the method count too.&lt;/li&gt;
&lt;li&gt;If the method count hits the 65K limit, just because of your library code that transitively downloaded the larger library, the app developer will be forced to get into the lands of multi-dexing. Trust me on this, no one wants to get into the multi-dexing world.
In such a scenario, your library has introduced a bigger problem than solving the initial problem. So most probably your library will be replaced by some other library that does not add to the method count or basically that takes care everything in a better way.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;do-not-require-dependencies-unless-you-very-much-have-to&#34;&gt;Do not require dependencies unless you very much have to&lt;/h3&gt;

&lt;p&gt;Now this rule is something that I think everyone knows, right? Do not bloat your android libraries with dependencies you do not need. But the point to note here is that even if you need dependencies you do not have to make the users of the library download it transitively. i.e the dependency does not not need to be bundled with your android library.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well, then the question arises as to how do we use it if it is not bundled with our library?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well the simple answer is you ask your users to provide that dependency to you during compile time. What this means is that not every user might need the functionality which requires the dependency. And for those users, if you cannot find the dependency as provided to you, you just disable the functionality in your code. But for those who need it, they will provide you the dependency, by including it in their build.gradle .
How to achieve this ? Check in classpath&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private boolean hasOKHttpOnClasspath() {
   try {
       Class.forName(&amp;quot;com.squareup.okhttp3.OkHttpClient&amp;quot;);
       return true;
   } catch (ClassNotFoundException ex) {
       ex.printStackTrace();
   }
   return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, you can use &lt;code&gt;provided&lt;/code&gt;(Gradle v2.12 and below) or &lt;code&gt;compileOnly&lt;/code&gt;(Gradle v2.12+)(&lt;a href=&#34;https://blog.gradle.org/introducing-compile-only-dependencies&#34;&gt;Read here for complete information&lt;/a&gt;), so as to be able to get hold of the classes defined by the dependency during compile time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
   // for gradle version 2.12 and below
   provided &#39;com.squareup.okhttp3:okhttp:3.6.0&#39;
   // or for gradle version 2.12+
   compileOnly &#39;com.squareup.okhttp3:okhttp:3.6.0&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;A word of caution here, you can only use this functionality of requiring a dependency if its a complete java dependency. i.e if its an android library you want to include at compile time, you can not reference its transitive libs as well as resources which need to be present before compilation. A pure java dependency, on the other hand, has only java classes and they are the only ones that would be added to classpath during the compilation process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;try-not-to-hog-the-startup&#34;&gt;Try not to hog the startup&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/things-i-wish-i-knew-when-i-started-building-android-sdk-libraries/worst.gif&#34; alt=&#34;question&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;no kidding…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What I mean by this is that, as soon as the app starts up try not to initialize your android library greedily. What that would tend to do is that it will increase the startup time for the App itself, even though the app does simply nothing at startup except off course initialize your android library.&lt;/p&gt;

&lt;p&gt;The solution to such a problem is to do all work of initializing off the main thread i.e in a new thread, async. Better if you use &lt;code&gt;Executors.newSingleThreadExecutor()&lt;/code&gt; and keep the number of thread to just one.&lt;/p&gt;

&lt;p&gt;Another solution would be to initialize components of your android library &lt;strong&gt;on demand&lt;/strong&gt; i.e &lt;em&gt;Load them up/initialize them only when they are needed.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;remove-functionality-and-features-gracefully&#34;&gt;Remove functionality and features gracefully&lt;/h3&gt;

&lt;p&gt;Do not remove your public functions between versions as that would lead the builds of many users of your android library break and they would be clueless as to why did that even happen.&lt;/p&gt;

&lt;p&gt;Solution: Deprecate the functions by marking them @Deprecated and then define a roadmap of their removal in future versions.&lt;/p&gt;

&lt;h3 id=&#34;make-your-code-testable&#34;&gt;Make your code Testable&lt;/h3&gt;

&lt;p&gt;Making sure you have tests in your code isn’t actually a rule to follow. You should be doing this everywhere and for every project app or library without saying.&lt;/p&gt;

&lt;p&gt;Test your library code by making use of Mocks, avoiding final classes, not having static methods, etc.&lt;/p&gt;

&lt;p&gt;Writing code with interfaces around your public API also makes your android library capable of swapping implementations easily and in turn makes the code more testable.i.e you can provide mock implementations easily when testing.&lt;/p&gt;

&lt;h3 id=&#34;document-everything&#34;&gt;Document Everything!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/things-i-wish-i-knew-when-i-started-building-android-sdk-libraries/davinci.gif&#34; alt=&#34;document&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Being the creator of the android library you would know about your code, but the people who are going to use it won’t know about it unless you expect them to figure out by reading your source code (you should never need that).&lt;/p&gt;

&lt;p&gt;Document your library well including every detail about how to use it and detailing every feature you have implemented.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a Readme.md file and place it at the root of your repository.&lt;/li&gt;
&lt;li&gt;Have javadoc comments in your code, covering all public functions.
They should cover and explain

&lt;ul&gt;
&lt;li&gt;Purpose of the public method&lt;/li&gt;
&lt;li&gt;The arguments passed&lt;/li&gt;
&lt;li&gt;Return type&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bundle a sample app which demonstrates a working example of how the library and its features are used.&lt;/li&gt;
&lt;li&gt;Make sure you keep a detailed change log for your changes. A good place to do that would be to add the information right in your release section for the specific version tag.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/things-i-wish-i-knew-when-i-started-building-android-sdk-libraries/changelog.jpeg&#34; alt=&#34;changelog&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;em&gt;Screenshot of Github Releases section for Sensey android library&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;…and &lt;a href=&#34;https://github.com/nisrulz/sensey/releases&#34;&gt;here is the link to releases section&lt;/a&gt; for &lt;a href=&#34;https://github.com/nisrulz/sensey&#34;&gt;Sensey&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;provide-a-most-minimalistic-sample-app&#34;&gt;Provide a most minimalistic Sample App&lt;/h3&gt;

&lt;p&gt;This goes without saying. Always provide the most minimalistic Sample app with your library code, as that is the first thing other devs will checkout to understand a working example of using your android library.&lt;/p&gt;

&lt;p&gt;The simpler it is the easier it is to understand. Making the sample app look fancy and code complex would only undermine the actual goal of the sample app, that is to provide a working example of using your android library.&lt;/p&gt;

&lt;h3 id=&#34;consider-putting-up-a-license&#34;&gt;Consider putting up a License&lt;/h3&gt;

&lt;p&gt;Most of the time developers forget about the Licensing piece. This is one factor that decides the adoption of your android library.&lt;/p&gt;

&lt;p&gt;Say you decided to license your android library in a restrictive manner i.e Using &lt;strong&gt;GPL&lt;/strong&gt; license, would mean that whoever uses your library and makes modification will have to contribute back to your codebase in order to keep using the android library. Putting such restrictions hampers the adoption of android libraries and developers tend to avoid such codebases.
The solution to this is that you stick to more open licenses such as &lt;strong&gt;MIT&lt;/strong&gt; or &lt;strong&gt;Apache 2&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Read about licensing at this &lt;a href=&#34;https://choosealicense.com/&#34;&gt;simple site&lt;/a&gt; and about need of &lt;a href=&#34;http://jeroenmols.com/blog/2016/08/03/copyright/&#34;&gt;copyright in your code here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;last-but-not-the-least-get-feedback&#34;&gt;Last but not the least, get feedback&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/things-i-wish-i-knew-when-i-started-building-android-sdk-libraries/feedback.gif&#34; alt=&#34;feedback&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Yeah, you heard that right! Your android library was built to cater to your needs initially. Once you put it out for others to use, you will come to know a lot of issues in it. Hear out your fellow devs and gather feedback. Act on it considering and weighing on the functionality to introduce or fix while maintaining the goals of the android library intact.&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In short, you need to take care of the below points while building&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avoid multiple arguments&lt;/li&gt;
&lt;li&gt;Ease of use&lt;/li&gt;
&lt;li&gt;Minimize permissions&lt;/li&gt;
&lt;li&gt;Minimize requisites&lt;/li&gt;
&lt;li&gt;Support different versions&lt;/li&gt;
&lt;li&gt;Do not log in production&lt;/li&gt;
&lt;li&gt;Do not crash silently and fail fast&lt;/li&gt;
&lt;li&gt;Degrade gracefully in an event of error&lt;/li&gt;
&lt;li&gt;Catch specific exceptions&lt;/li&gt;
&lt;li&gt;Handle poor network conditions&lt;/li&gt;
&lt;li&gt;Reluctance to include large libraries as dependencies&lt;/li&gt;
&lt;li&gt;Do not require dependencies unless you very much have to&lt;/li&gt;
&lt;li&gt;Try not to hog the startup&lt;/li&gt;
&lt;li&gt;Remove features and functionalities gracefully&lt;/li&gt;
&lt;li&gt;Make your code testable&lt;/li&gt;
&lt;li&gt;Document everything&lt;/li&gt;
&lt;li&gt;Provide a most minimalistic sample app&lt;/li&gt;
&lt;li&gt;Consider putting up a license&lt;/li&gt;
&lt;li&gt;Get feedback, lots of them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a rule of thumb follow the rule of SPOIL-ing your Library&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple — Briefly and Clearly expressed&lt;/li&gt;
&lt;li&gt;Purposeful — Having or showing resolve&lt;/li&gt;
&lt;li&gt;OpenSource — Universal Access, Free license&lt;/li&gt;
&lt;li&gt;Idiomatic — Natural to the native environment&lt;/li&gt;
&lt;li&gt;Logical — Clear, Sound Reasoning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I read this sometime back in a presentation by some author I cannot recall. I took note of it as it makes a lot of sense and provides a clear picture in a very concise manner. If you know who the author is, please comment it and I will add his link and give due credit.&lt;/p&gt;

&lt;h3 id=&#34;ending-thoughts&#34;&gt;Ending Thoughts&lt;/h3&gt;

&lt;p&gt;I hope this post helps fellow android devs in building better android libraries. Android Community benefits extensively from using android libraries published daily by fellow android devs and if everyone starts to take care of their API design process keeping in mind the end user (other android developers) we would all be a step closer to an even better ecosystem as a whole.&lt;/p&gt;

&lt;p&gt;These guidelines are compiled on my experience of developing android libraries. I would love to know your views on the pointers mentioned above. Please leave a comment, and let me know!&lt;/p&gt;

&lt;p&gt;If you have suggestions or maybe would like me to add something to the content here, please let me know.&lt;/p&gt;

&lt;p&gt;Checkout my &lt;a href=&#34;https://github.com/nisrulz&#34;&gt;Github&lt;/a&gt; or simply follow me on &lt;a href=&#34;https://twitter.com/nisrulz&#34;&gt;Twitter&lt;/a&gt; and keep on crushing code!🤓 😁&lt;/p&gt;

&lt;p&gt;P.S. : This post is also published on &lt;a href=&#34;https://android.jlelse.eu/i-could-not-find-a-simple-gesture-detection-android-library-so-i-built-one-334c0a307c16&#34;&gt;medium.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I could not find a simple Gesture Detection android library, so I built one</title>
      <link>http://crushingcode.github.io/i-could-not-find-a-simple-gesture-detection-android-library-so-i-built-one/</link>
      <pubDate>Sun, 12 Feb 2017 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/i-could-not-find-a-simple-gesture-detection-android-library-so-i-built-one/</guid>
      <description>

&lt;p&gt;While working on various projects, there have been times when I have had to implement various gesture-based events. Every time I have had to do that I had to write the whole code for getting the &lt;code&gt;SensorManager&lt;/code&gt; and getting access to the &lt;code&gt;SensorEvent&lt;/code&gt;, plus the extra logic to detect the gesture. At first, it was just fine to do that since I was a beginner around that time. Then soon I got weary of the whole boilerplate. Around this time I started looking for a solution like an android library which would help me avoid all that boilerplate as well as enable me to maintain my code properly.&lt;/p&gt;

&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;Well, the problem at hand is basically the boilerplate code and the need to maintain your code. Duplicating code across projects and remembering the logic for each gesture was bound to end up in one of the projects in some form of error. It was no doubt inefficient and very repetitive. I was looking for a solution to all this because as Software Engineers we all strive to automate tasks or remove the need for duplicating code. As Douglas Crockford has said&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Code reuse is the Holy Grail of Software Engineering.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What was disappointing was that everything available was either too complex in terms of implementation or was very limiting.
&lt;strong&gt;..and that’s when I decided to write my own Android Library, Sensey.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/i-could-not-find-a-simple-gesture-detection-android-library-so-i-built-one/header.png&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sensey&lt;/strong&gt; was born out of a need to be able to make Gesture Detection in android as simple as it can get. Not everyone needs to look up &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; values of &lt;strong&gt;&lt;em&gt;Accelerometer&lt;/em&gt;&lt;/strong&gt; or &lt;code&gt;Azimuth&lt;/code&gt;, &lt;code&gt;Pitch&lt;/code&gt; and &lt;code&gt;Roll&lt;/code&gt; values of &lt;strong&gt;&lt;em&gt;Orientation Sensor&lt;/em&gt;&lt;/strong&gt;*. There are other devs who only wish to detect if a certain Gesture was detected or not (period).&lt;/p&gt;

&lt;p&gt;So when I set out to build &lt;strong&gt;Sensey&lt;/strong&gt;, I had a very clear mindset that I want it to be exactly that — simple and clean.
When I first wrote Sensey, it wasn’t perfect. But it did the job well for me. Since I couldn’t find the solution for myself in the first place, I guessed (or assumed) that at least a few devs in the community would be in the same boat as me and thus from the start I was sure to make it open sourced (&lt;a href=&#34;https://github.com/nisrulz/sensey&#34;&gt;You can check it out on Github&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/i-could-not-find-a-simple-gesture-detection-android-library-so-i-built-one/sampleapp.png&#34; alt=&#34;sample app&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I recently released the version &lt;code&gt;1.6.0&lt;/code&gt; of &lt;strong&gt;Sensey&lt;/strong&gt; and you can tell that it has come a long way from what it was in version &lt;code&gt;1.0&lt;/code&gt;. Let’s walk through the process of integrating Sensey.It is super simple to integrate Sensey in your current android project.&lt;/p&gt;

&lt;p&gt;Simply add the below to your build.gradle file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;compile &#39;com.github.nisrulz:sensey:1.6.0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..sync your gradle and then initialize Sensey in your activity&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Sensey.getInstance().init(context);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! Sensey at this point is integrated into your app. Now based on what kind of Gesture you want to detect, you will need to start and stop detectors provided by Sensey.&lt;/p&gt;

&lt;p&gt;Say for the sake of a simple example, if we wanted to detect a Shake Gesture. All you need to do is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create an instance of ShakeListener&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ShakeDetector.ShakeListener shakeListener=new ShakeDetector.ShakeListener() {
    @Override public void onShakeDetected() {
       // Shake detected, do something
   }
   @Override public void onShakeStopped() {
       // Shake stopped, do something
   }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now to start listening for Shake gesture, pass the instance &lt;code&gt;shakeListener&lt;/code&gt; to &lt;code&gt;startShakeDetection()&lt;/code&gt; function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Sensey.getInstance().startShakeDetection(shakeListener);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To stop listening for Shake gesture, pass the instance &lt;code&gt;shakeListener&lt;/code&gt; to &lt;code&gt;stopShakeDetection()&lt;/code&gt; function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Sensey.getInstance().stopShakeDetection(shakeListener);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yup, that’s about all it takes to know if a shake gesture was performed and when it stopped.&lt;/p&gt;

&lt;p&gt;Let’s check out the complete list of gesture detectors Sensey provides&lt;/p&gt;

&lt;h4 id=&#34;flip-detector&#34;&gt;Flip Detector&lt;/h4&gt;

&lt;p&gt;Sensey can detect if your device facing up or facing down. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#flip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;light-detector&#34;&gt;Light Detector&lt;/h4&gt;

&lt;p&gt;Sensey can detect if your device in a position where it is receiving any light or not. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#light&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;orientation-detector&#34;&gt;Orientation Detector&lt;/h4&gt;

&lt;p&gt;Sensey can detect if your device’s top side is up or bottom side is up. It can tell if your device’s left side is up vs right side being up. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#orientation&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;proximity-detector&#34;&gt;Proximity Detector&lt;/h4&gt;

&lt;p&gt;Sensey can detect if there is an object in the proximity of the device i.e either it is far or near to the device. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#proximity&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;shake-detector&#34;&gt;Shake Detector&lt;/h4&gt;

&lt;p&gt;Detects a Shake gesture performed on the device and also when the gesture stops.Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#shake&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;wave-detector&#34;&gt;Wave Detector&lt;/h4&gt;

&lt;p&gt;This one is a simple implementation. It uses proximity sensor with timing to detect if a hand wave gesture is performed in front of the device screen. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#wave&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;chop-detector&#34;&gt;Chop Detector&lt;/h4&gt;

&lt;p&gt;Added in release 1.6.0 this one is brand new. It allows you to detect if a Chop gesture is performed with the device. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#chop&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;wrist-twist-detector&#34;&gt;Wrist Twist Detector&lt;/h4&gt;

&lt;p&gt;Added in release 1.6.0 this one is another brand new detector. This one allows you to detect if the wrist was twisted in a circular manner while holding the device. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#wristtwist&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;movement-detector&#34;&gt;Movement Detector&lt;/h4&gt;

&lt;p&gt;Another brand new detector added in release 1.6.0, it allows you to know if the device was moved or not. Once moved, it will also detect when the device becomes stationary. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#movement&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;sound-level-detector&#34;&gt;Sound Level Detector&lt;/h4&gt;

&lt;p&gt;Another brand new detector added in release 1.6.0, it allows you to measure the loudness of sound in the environment around the device (calculated on a scale of dB i.e decibel).Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#soundlevel&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;pinch-scale-detector&#34;&gt;Pinch Scale Detector&lt;/h4&gt;

&lt;p&gt;Sensey can use this detector to know if the user is executing a pinch scale in or out gesture on the touch screen. It will also be able to detect when the scale gesture was stopped. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#pinchscale&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;touch-type-detector&#34;&gt;Touch Type Detector&lt;/h4&gt;

&lt;p&gt;This one can do a lot of things, you can choose which one to use or not to use. It can detect when someone on the device screen does the following:
- Single Tap
- Double Tap
- Two Finger Tap
- Three Finger Tap
- Scroll Up, Down, Left or Right
- Swipe Left or Right
- Long Press&lt;/p&gt;

&lt;p&gt;Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#touchtype&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Phew! That’s a lot of gesture detectors packed inside one android library. Well, the list will keep on growing when more gestures get implemented in future releases. The core focus though would always remain the same,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;simplicity over complexity and ease of use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;who-is-it-for&#34;&gt;Who is it for&lt;/h3&gt;

&lt;p&gt;For people who simply want to detect gesture as an event.&lt;/p&gt;

&lt;h3 id=&#34;who-is-it-not-for&#34;&gt;Who is it not for&lt;/h3&gt;

&lt;p&gt;For anyone who wishes to get more advance and wants to tap into the raw SensorEvent values.&lt;/p&gt;

&lt;p&gt;That said, the android library isn’t perfect and I would love it if you can try it out and file &lt;a href=&#34;https://github.com/nisrulz/sensey/issues&#34;&gt;issues&lt;/a&gt; on Github to make it better.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nisrulz/sensey&#34;&gt;Check out Sensey on Github (Star the repo if you find it useful)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have suggestions, please let me know in the comment section.&lt;/p&gt;

&lt;p&gt;Checkout my &lt;a href=&#34;https://github.com/nisrulz&#34;&gt;Github&lt;/a&gt; or simply follow me on &lt;a href=&#34;https://twitter.com/nisrulz&#34;&gt;Twitter&lt;/a&gt; and keep on crushing code!🤓 😁&lt;/p&gt;

&lt;p&gt;P.S. : This post is also published on &lt;a href=&#34;https://android.jlelse.eu/i-could-not-find-a-simple-gesture-detection-android-library-so-i-built-one-334c0a307c16&#34;&gt;medium.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rewriting The History</title>
      <link>http://crushingcode.github.io/rewriting-the-history/</link>
      <pubDate>Fri, 18 Nov 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/rewriting-the-history/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/rewritingthehistory/header.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Most of us are engineers and at the end of the day humans. So basically we all are bound to make mistakes. As an Engineer we make such mistakes in code quite often and even if we do not admit it , they do exist. How many times have you published your code to a public VCS such as Github/Bitbucket with the credentials and then pulled down the repository only to reset the whole history and re-publish the new repository with the credentials cleaned out.&lt;/p&gt;

&lt;p&gt;Pretty common, eh ? From what I have experienced it turns out, thats what most of the devs do. However if I told you that you can clean the credentials out and still keep the git history ! Sounds awesome right ? Thats coz it is !&lt;/p&gt;

&lt;p&gt;So how does one do it ? I will be demonstrating a very simple example of a scenario I recently came across and how I solved it.
It can however be applied to various other use cases. You can extend it to remove complete files even 🙄&lt;/p&gt;

&lt;h3 id=&#34;the-problem&#34;&gt;The Problem&lt;/h3&gt;

&lt;p&gt;We all have the license block in our code when pushing code to Github (If you don’t have one , then make sure you do have one from now onwards). It looks like below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
 * Copyright (C) 2016 Nishant Srivastava
 *
 * Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use a single machine to code for my full time job and my own open source work (..almost like everyone) and I have preset my Android Studio to include the license block everywhere, but here is the catch, it is setup to add the license block of the company I work for (..thats coz its my full time job). It looks like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
 * Copyright (c) 2015 - 2016 CompanyName, Inc.
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I tend to add my own license when working with my own open source work after work hours and I have never got it messed up , up until recently. I recently pushed one of the .java class of one my android libraries to Github 😱 😱 😱 😱&lt;/p&gt;

&lt;p&gt;Now thats a bummer 😩 to see your git history messed up as it was something that was not intended and I did not want to reset my repository. (..which would mean that I would lose all stars and issue).&lt;/p&gt;

&lt;h3 id=&#34;the-solution&#34;&gt;The Solution 🤓&lt;/h3&gt;

&lt;p&gt;One tool : &lt;a href=&#34;https://rtyley.github.io/bfg-repo-cleaner/&#34;&gt;BFG Repo-Cleaner&lt;/a&gt;, from the tool’s homepage itself&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Removes large or troublesome blobs like git-filter-branch does, but faster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah, thats all you need to cleanup your repo. What this tool does is that it searches for text inside your git history and replaces it with another version and creates a new commit and removes the old commits. But the order and history is still maintained. Pretty neat , eh ? I know :)&lt;/p&gt;

&lt;p&gt;So here is how we clean our git history of unwanted data.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download the latest release of &lt;a href=&#34;https://github.com/rtyley/bfg-repo-cleaner/releases&#34;&gt;bfg tool&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once its downloaded, navigate to the folder you have downloaded it and create a text file named replace.txt (as a matter of fact you can name it whatever you want. I like to name it as replace.txt)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Edit the content of the replace.txt file created as below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Copyright (c) 2015 - 2016 CompanyName, Inc.==&amp;gt;Copyright (C) 2016 Nishant Srivastava
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where the syntax followed is text to replace==&amp;gt;text to replace with
Notice that there are no spaces right before and after the operator ==&amp;gt;
More ways of defining how to replace text in this &lt;a href=&#34;http://stackoverflow.com/questions/4110652/how-to-substitute-text-from-files-in-git-history/15730571#15730571&#34;&gt;stackoverflow ans.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now go ahead clone a mirror of your project repo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone — mirror https://github.com/username/your-project.git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once mirrored, now you need to run the command as below to clean your git history&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -jar bfg-&amp;lt;latest_version&amp;gt;.jar  --replace-text replace.txt -fi *.java  your-project.git/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next clean the reference logs and optimize the project again&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd your-project.git/ git reflog expire --expire=now --all &amp;amp;&amp;amp; git gc --prune=now --aggressive
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next when done, push your changes to Github&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;DONE. That is all there is.&lt;/p&gt;

&lt;p&gt;Ok, not really. Here is what you might encounter after you do a git push. Depending on your project size, you can get a lot of output.&lt;/p&gt;

&lt;p&gt;Here is what a successful overwrite of a branch would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ 1289ad8…bee1ea4 master -&amp;gt; master (forced update)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately, you might also see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;! [remote rejected] refs/pull/53/head -&amp;gt; refs/pull/53/head (deny updating a hidden ref)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;As mentioned in this &lt;a href=&#34;https://github.com/rtyley/bfg-repo-cleaner/issues/36#issuecomment-37877829&#34;&gt;issue&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;The refs beginning ‘refs/pull&amp;rsquo; are synthetic read-only refs created by GitHub - you can&amp;rsquo;t update (and therefore &amp;lsquo;clean&amp;rsquo;) them, because they reflect branches that may well actually come from other repositories - ones that submitted pull-requests to you.
So, while you’ve pushed all your real refs, the pull requests don’t get updated
In simple words Github also saves branches after you merged, closed and deleted them. You have no way to modify those branches that are owned by Github. The only way you can really remove them is by deleting the repository. And keep in mind that you also lose all stars, issues and so on when deleting a project. Which will be a bummer, you don’t want to do that, do you ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So how do you solve this , well you need to &lt;a href=&#34;http://christoph.ruegg.name/blog/git-howto-mirror-a-github-repository-without-pull-refs.html&#34;&gt;mirror your repo without the Github Pull Request&lt;/a&gt; in Step 4.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In short, simply replace the catch-all refspec above with two more specific specs to just include all heads and tags, but not the pulls, and all the remote pull refs will no longer make it into your bare mirror&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Goto &lt;code&gt;your-project.git&lt;/code&gt; folder and run &lt;code&gt;git config -e&lt;/code&gt; . Next replace&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fetch = +refs/*:refs/*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fetch = +refs/heads/*:refs/heads/*
fetch = +refs/tags/*:refs/tags/*
fetch = +refs/change/*:refs/change/*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should solve your issue.
Also be careful because everyone who cloned or forked your project still has access to the original data. So thats that 🤔&lt;/p&gt;

&lt;p&gt;If you want to find more about bfg , go ahead and &lt;a href=&#34;https://rtyley.github.io/bfg-repo-cleaner/#usage&#34;&gt;read their awesome doc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Checkout my &lt;a href=&#34;https://github.com/nisrulz&#34;&gt;Github&lt;/a&gt; or simply follow me on &lt;a href=&#34;https://twitter.com/nisrulz&#34;&gt;Twitter&lt;/a&gt; and keep on crushing code!🤓 😁&lt;/p&gt;

&lt;p&gt;P.S. : This post is also published on &lt;a href=&#34;https://medium.com/@nisrulz/rewriting-the-history-c0e16c4942d3#.ljqy0pvoz&#34;&gt;medium.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do you like to ADB?</title>
      <link>http://crushingcode.github.io/do-you-like-to-adb/</link>
      <pubDate>Fri, 14 Oct 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/do-you-like-to-adb/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/doyouliketoadb/header.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Lets face it we all have been there , trying to fiddle with managing our emulators and dev devices. And at max we would do is try to manually manage it. Let me make this clear I am not talking about tests here as that&amp;rsquo;s all related to the code. My focus here is on managing the device/emulator that&amp;rsquo;s paired with your dev environment/system (..and to your IDE - Android Studio , if you still use Eclipse you are simply oblivious to the joys of coding in Android &lt;em&gt;[here is a long blank stare from me to you]&lt;/em&gt; ).&lt;/p&gt;

&lt;p&gt;Technically there is a tool called ADB (Android Debug Bridge) which maintains your connection with your device/emulator and the dev environment/system.&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&#34;https://en.wikipedia.org/wiki/Android_software_development#ADB&#34;&gt;wikipedia&lt;/a&gt;, it&amp;rsquo;s described as&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;adb&lt;/strong&gt; is the command line tool provided in the Android SDK package. &lt;strong&gt;adb&lt;/strong&gt; stands for Android Debug Bridge which allows you to communicate with an emulator instance or connected Android-powered device to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manage the state of an emulator or device.&lt;/li&gt;
&lt;li&gt;Run shell commands on a device.&lt;/li&gt;
&lt;li&gt;Manage port forwarding on an emulator or device.&lt;/li&gt;
&lt;li&gt;Copy files to/from an emulator or device.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ohhk&amp;hellip; that sounds something of use but not convincing enough for you to try and play with it yet. Let me try and put forward some of the problem as a dev you are facing everyday (..and yet no one admits to them whenever it comes up in a conversation 🙄..) and how can we solve this.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;uninstalling-an-app&#34;&gt;Uninstalling an app&lt;/h3&gt;

&lt;p&gt;Oh yeah ..you are used to hitting &lt;strong&gt;Run&lt;/strong&gt; in the IDE (or the keyboard shortcut for the same) and BOOM the apk installs in the device. But what do you do to uninstall the apk ? &lt;strong&gt;[Rolling eyes]&lt;/strong&gt; ohh yeah I know ..you will open up your device/emulator and manually uninstall the app by dragging it to the trash bin in the home screen and hit yes when prompted to uninstall it. Hard ain&amp;rsquo;t it ? Yeah it is.&lt;/p&gt;

&lt;p&gt;ADB can make it as simple as executing just a command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb uninstall &amp;lt;package_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if you wish to keep the data and cache directory intact but uninstall the app just add &lt;code&gt;-k&lt;/code&gt; as an option to the command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb uninstall [-k] &amp;lt;package_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;[ ]&lt;/code&gt; means its an optional parameter&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of Course you can install an app too via&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb install [-r] [-s] &amp;lt;package_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the options available to the command are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt; : reinstall the app, keeping its data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt; : install on SD card instead of internal storage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That looks neat.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;direct-adb-commands-to-specific-devices-when-you-have-multiple-of-those-connected&#34;&gt;Direct ADB commands to specific devices when you have multiple of those connected&lt;/h3&gt;

&lt;p&gt;Ok this one is my favorite 🙃&lt;/p&gt;

&lt;p&gt;So here is the thing. You have like 5-6 devices connected to your dev environment and now you want to do some work with a specific device at a time. Piece of 🍰&lt;/p&gt;

&lt;p&gt;Easy you say, right ? Like you can just fire up your Android Studio and execute the app in some specific device.&lt;/p&gt;

&lt;p&gt;Not so early 😅. Let me complete. You want to execute commands in a certain order 🙄 ..yeah it isn&amp;rsquo;t easy ar you thought before , eh 🤔&lt;/p&gt;

&lt;p&gt;For our example here let&amp;rsquo;s assume we have like 3 devices and 2 emulators running, named as &lt;code&gt;device_1&lt;/code&gt;, &lt;code&gt;device_2&lt;/code&gt;, &lt;code&gt;device_3&lt;/code&gt;, &lt;code&gt;emu_1&lt;/code&gt;, &lt;code&gt;emu_2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our end goal is to be able to execute some adb command on the these devices/emulator in order such as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;emu_1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;device_3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;device_1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;device_2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emu_2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cool ? Now first of all let me give you the magic commands to handle this situation. Lets look at what&amp;rsquo;s available to us&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb -d &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this will do is it will directs command to the only connected USB device. Naice 🙂&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can also use &lt;code&gt;adb -e &amp;lt;command&amp;gt;&lt;/code&gt; to directs command to the only connected Emulator&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But we wanna go a step ahead and orchestrate commands in a pattern (..by writing a bash script, obviously). But to do that I need to specifically direct commands to the device I want to control.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb -s &amp;lt;device_id&amp;gt; &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Get the device id by using &lt;code&gt;adb devices&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we are talking 😎. Now the only thing I gotta do is create a bash script something like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

adb -s &amp;lt;emu_1_id&amp;gt; &amp;lt;some_command&amp;gt;
adb -s &amp;lt;device_3_id&amp;gt; &amp;lt;some_command&amp;gt;
adb -s &amp;lt;device_1_id&amp;gt; &amp;lt;some_command&amp;gt;
adb -s &amp;lt;device_2_id&amp;gt; &amp;lt;some_command&amp;gt;
adb -s &amp;lt;emu_2_id&amp;gt; &amp;lt;some_command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;where &lt;code&gt;&amp;lt;some_command&amp;gt;&lt;/code&gt; does not have to be the same.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;..and&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;save it as &lt;code&gt;execute_cmds_as_symphony.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;make it executable by running &lt;code&gt;chmod +x execute_cmds_as_symphony.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;execute it by running &lt;code&gt;./execute_cmds_as_symphony.sh&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s all there is. Everytime you wanna run it like this just run the bash script 🤓 😎&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s like creating a symphony with your devices , except for the fact it&amp;rsquo;s not ..gonna be a symphony in the first place. And its just code executing🤔 But you get my point , right😅&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;connect-wirelessly-with-your-device&#34;&gt;Connect wirelessly with your device&lt;/h3&gt;

&lt;p&gt;Read my post &lt;a href=&#34;http://crushingcode.github.io/life-without-wires-adb-over-wifi/&#34;&gt;&amp;ldquo;Life without wires : ADB over WiFi&amp;rdquo;&lt;/a&gt; to learn how to set it up.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;device-does-not-show-up-in-the-android-studio-deploy-list&#34;&gt;Device does not show up in the Android Studio deploy list&lt;/h3&gt;

&lt;p&gt;There are times when the device would not show up in your IDE. Possible issue could be that adb is not responding.&lt;/p&gt;

&lt;p&gt;To fix that simply kill the server and start it again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Kill the server if it is running
adb kill-server 

# Start the server
adb start-server
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;I have seen that you also need to uncheck and then check &lt;strong&gt;ADB Integration&lt;/strong&gt; inside Android Studio as an extra step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/doyouliketoadb/adbintegration.jpg&#34; alt=&#34;adbintegration&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;to-get-device-information&#34;&gt;To get Device Information&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Prints about the current state of the device : offline | bootloader | device
adb get-state

# Prints the serial number of the device
adb get-serialno

# Prints the device path
adb get-devpath 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;copy-file-to-from-device-emulator&#34;&gt;Copy file to/from device/emulator&lt;/h3&gt;

&lt;p&gt;You can advocate about trying to copy files from your device by opening up some software and then dragging and dropping things onto your desktop. But I am fan of automating things and the above mentioned method is completely fine if you are doing that for one file and only once or twice.&lt;/p&gt;

&lt;p&gt;It changes when you wanted to do the same task again and again. When you want to automate things &lt;code&gt;adb&lt;/code&gt; commands come in handy. You can even add them to a script and run it every time one of the task completes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To push a file/dir to device&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb push &amp;lt;local&amp;gt; &amp;lt;remote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;&amp;lt;local&amp;gt;&lt;/code&gt; is file in your local system i.e &lt;code&gt;my_image.png&lt;/code&gt; and &lt;code&gt;&amp;lt;remote&amp;gt;&lt;/code&gt; is file location in device/emulator i.e &lt;code&gt;/sdcard/Downloads/my_image.png&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb push ~/Downloads/my_image.png /sdcard/Downloads/my_image.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;To pull a file/dir from device&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb pull &amp;lt;remote&amp;gt; [&amp;lt;local&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;&amp;lt;local&amp;gt;&lt;/code&gt; is file in your local system i.e &lt;code&gt;my_image.png&lt;/code&gt; and &lt;code&gt;&amp;lt;remote&amp;gt;&lt;/code&gt; is file location in device/emulator i.e &lt;code&gt;/sdcard/Downloads/my_image.png&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb pull /sdcard/Downloads/my_image.png my_image.png
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;acting-as-a-developer-utility-belt&#34;&gt;Acting as a Developer utility-belt&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Generate Public/Private Key&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb keygen &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The private key is stored in &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;, and the public key is stored in &lt;file&gt;.pub.
Any existing files are overwritten.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Get a bug report&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Prints to the standard output
adb bugreport

# Writes to a file named bugreport.txt
adb bugreport &amp;gt; bugreport.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Get list of all connected devices&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb devices
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;logging&#34;&gt;Logging&lt;/h3&gt;

&lt;p&gt;Of Course this is inbuilt into the IDE , but its worth knowing that it&amp;rsquo;s not just a window which you use in Android Studio, but so much more.&lt;/p&gt;

&lt;p&gt;Lets check out its power when used from terminal&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Dumps log entries from 3 log buffers: main, events and radio
adb logcat

# Dumps log entries in long format
adb logcat -v long

# Dumps log entries into rotated log files on the device
adb logcat -f /sdcard/Download/Android.log -r 1024 -n 8

# Dumps only error log entries generated from the &amp;quot;AndroidRuntime&amp;quot; process, including Java exceptions
adb logcat AndroidRuntime:E *:S

# Clears (flushes) the entire log and exits
adb logcat -c

# Dumps the log to the screen and exits
adb logcat -d

# Writes log message output to a file. The default is the &amp;quot;stdout - Standard Output&amp;quot;
adb logcat -f &amp;lt;filename&amp;gt;

# Prints the size of the specified log buffer and exits
adb logcat -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Logcat Format&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To define the format of each log entry that is dumped , you need to set the output format for log messages&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# The default is brief format
adb logcat -v &amp;lt;format&amp;gt;

# Display priority/tag and the PID of process issuing the message (the default format)
adb logcat -v brief

# Display PID with the log info 
adb logcat -v process

# Display the raw log message, with no other metadata fields
adb logcat -v raw

# Display the date, invocation time, priority/tag, and PID of the process issuing the message
adb logcat -v time

# Display the priority, tag, and the PID and TID of the thread issuing the message
adb logcat -v thread

# Display the date, invocation time, priority, tag, and the PID and TID of the thread issuing the message
adb logcat -v threadtime

# Display all metadata fields and separate messages with a blank lines
adb logcat -v long
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Filter your log data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A few people would say that we can always use &lt;code&gt;| grep &amp;quot;filter_text&amp;quot;&lt;/code&gt; appended to the &lt;code&gt;adb logcat&lt;/code&gt;. Well you are right you can , but there are some neat tricks hidden in the actual implementation of logcat and you should look at them too.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb logcat &amp;lt;options&amp;gt; &amp;lt;process-tag&amp;gt;:&amp;lt;priority-code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;When filters are provided, the &amp;ldquo;logcat&amp;rdquo; command will dump log entries that are generated from specified processes with priorities higher than the specified code, plus all log entries that generated from unspecified processes.&lt;/p&gt;

&lt;p&gt;A wildcard character, &amp;ldquo;*&amp;ldquo;, can be used to represent all processes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;List of all priority codes that can be used in the &amp;ldquo;logcat&amp;rdquo; command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;V&lt;/code&gt; - Verbose (lowest priority)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;D&lt;/code&gt; - Debug&lt;/li&gt;
&lt;li&gt;&lt;code&gt;I&lt;/code&gt; - Info (default priority)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;W&lt;/code&gt; - Warning&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E&lt;/code&gt; - Error&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F&lt;/code&gt; - Fatal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt; - Silent (highest priority, on which nothing is ever printed)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;to-control-the-device&#34;&gt;To control the device&lt;/h3&gt;

&lt;p&gt;This is pretty well know to people who are into Modding their device. But for people who aren&amp;rsquo;t going to mess with their device, here is what you can do with &lt;strong&gt;ADB&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Remounts the /system partition on the device read-write
adb remount

# Reboots the device, optionally into the bootloader or recovery program
adb reboot [bootloader|recovery]

# Reboots the device into the bootloader
adb reboot-bootloader

# Restarts the adbd daemon with root permissions
adb root

# Restarts the adbd daemon listening on USB
adb usb

# Restarts the adbd daemon listening on TCP on the specified port
adb tcpip &amp;lt;port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;some-other-base-functionality&#34;&gt;Some other base functionality&lt;/h3&gt;

&lt;p&gt;I am just going to list some more commands , just because well they exist! 😋&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Show help about all commands for adb, check this to get info about more commands in adb
adb help

# Shows the version number for adb
adb version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comment/Suggestions always welcome.&lt;/p&gt;

&lt;p&gt;If you would like to get more of such android tips and tricks, just hop onto my &lt;strong&gt;&lt;a href=&#34;https://github.com/nisrulz/android-tips-tricks&#34;&gt;Android Tips &amp;amp; Tricks&lt;/a&gt;&lt;/strong&gt; github repository. I keep updating it constantly.&lt;/p&gt;

&lt;p&gt;Keep on crushing code!🤓 😁&lt;/p&gt;

&lt;p&gt;P.S. : This post is also published on &lt;a href=&#34;https://medium.com/@nisrulz/do-you-like-to-adb-fcae3655b9c8#.e4y1a7km5&#34;&gt;medium.&lt;/a&gt;
I would like to mention that &lt;a href=&#34;https://twitter.com/pbreault&#34;&gt;@pbreault&lt;/a&gt; wrote a plugin for Android Studio and Intellij IDEA called &lt;a href=&#34;https://plugins.jetbrains.com/plugin/7380&#34;&gt;ADB Idea&lt;/a&gt; &lt;a href=&#34;https://github.com/pbreault/adb-idea&#34;&gt;[Github]&lt;/a&gt;, which allows you to do some of the common and straightforward interactions with ADB inside IntelliJ platform i.e Android Studio. Do check it out too 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Whats in the APK?</title>
      <link>http://crushingcode.github.io/whats-in-the-apk/</link>
      <pubDate>Sat, 24 Sep 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/whats-in-the-apk/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/header.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If I give you the code of an android app and ask you to provide me information regarding the android &lt;strong&gt;app&lt;/strong&gt; like  &lt;code&gt;minSdkVersion&lt;/code&gt;, &lt;code&gt;targetSdkVersion&lt;/code&gt;, permissions, configurations, almost anyone who knows how to code an android app would provide it to me in a few minutes. But what if I gave you an android &lt;strong&gt;apk&lt;/strong&gt; file and then ask you to answer for the same 🤔 Its tricky if you try to think at the very first instance.&lt;/p&gt;

&lt;p&gt;I actually ran into such a situation and even though I had known &lt;code&gt;aapt&lt;/code&gt; tool for a long time, it didnot hit my head the very first instance when I had to get the permissions declared inside the &lt;code&gt;apk&lt;/code&gt;. It was clear I needed to brush up the concepts and follow an efficient approach. This blog post will explain how to do so. Also helpful when you are trying to reverse lookup contents of any other app 🤓&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Ok, the most common way to approach this problem has to be this one&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Going with the definition of an &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Android_application_package&#34;&gt;APK&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Android application package (APK)&lt;/strong&gt; is the package file format used by the Android operating system for distribution and installation of mobile apps and middleware.&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;strong&gt;APK&lt;/strong&gt; files are a type of archive file, specifically in &lt;strong&gt;zip&lt;/strong&gt; format packages based on the JAR file format, with .apk as the filename extension.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/apk.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;..hmm so its basically a &lt;em&gt;&lt;strong&gt;ZIP&lt;/strong&gt;&lt;/em&gt; format, so what I can do is rename the extension from &lt;strong&gt;.apk&lt;/strong&gt; to &lt;strong&gt;.zip&lt;/strong&gt; and I should be able extract the contents.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/rename.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/zip.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cool, so we now see what the zip file contain and they are all available for inspection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/contents.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Well at this point you would think that you have got access to all files so you can give me all the information right away. Well not so quick Mr.AndroidDev 😬&lt;/p&gt;

&lt;p&gt;Go ahead try and open up the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; in some text editor to check out its content. This is what you would get&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/androidmanifest.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;..what it basically means is that the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; isn&amp;rsquo;t in human readable format anymore. So your chances of reading basic information regarding the apk from the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; goes down the drain 😞&lt;/p&gt;

&lt;p&gt;&amp;hellip;.&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;..&lt;/p&gt;

&lt;p&gt;..Not really 😋 There are tools to analyze the Android APK and there is one which has been there since the very beginning.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think its known to all the experinced devs but I am pretty sure a lot of budding as well as seasoned Android Devs have not even heard about it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The tool thats available as part of the Android Build Tool is&lt;/p&gt;

&lt;h4 id=&#34;aapt-android-asset-packaging-tool&#34;&gt;&lt;strong&gt;&lt;code&gt;aapt&lt;/code&gt;&lt;/strong&gt; -  Android Asset Packaging Tool&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;This tool can be used to list, add and remove files in an APK file, package resources, crunching PNG files, etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First of all, where exactly is this located 🤔&lt;/p&gt;

&lt;p&gt;Good question, its available as part of build tools in your android sdk.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;path_to_android_sdk&amp;gt;/build-tools/&amp;lt;build_tool_version_such_as_24.0.2&amp;gt;/aapt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..ok so what can it actually do ? From the &lt;code&gt;man&lt;/code&gt; pages of the tool itself&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aapt list&lt;/code&gt; - Listing contents of a ZIP, JAR or APK file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aapt dump&lt;/code&gt; - Dumping specific information from an APK file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aapt package&lt;/code&gt; - Packaging Android resources.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aapt remove&lt;/code&gt; - Removing files from a ZIP, JAR or APK file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aapt add&lt;/code&gt; - Adding files to a ZIP, JAR or APK file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aapt crunch&lt;/code&gt; - Crunching PNG files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are interested in &lt;code&gt;aapt list&lt;/code&gt; and &lt;code&gt;aapt dump&lt;/code&gt; specifically as these are what will help us provide &lt;code&gt;apk&lt;/code&gt; information.&lt;/p&gt;

&lt;p&gt;Lets find information that we are looking for directly from the &lt;code&gt;apk&lt;/code&gt; by running the &lt;code&gt;aapt&lt;/code&gt; tool on it.&lt;/p&gt;

&lt;hr&gt;

&lt;h5 id=&#34;get-base-information-of-the-apk&#34;&gt;Get base information of the apk&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aapt dump badging app-debug.apk 
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result&#34;&gt;&amp;gt; Result&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;package: name=&#39;com.example.application&#39; versionCode=&#39;1&#39; versionName=&#39;1.0&#39; platformBuildVersionName=&#39;&#39;
sdkVersion:&#39;16&#39;
targetSdkVersion:&#39;24&#39;
uses-permission: name=&#39;android.permission.WRITE_EXTERNAL_STORAGE&#39;
uses-permission: name=&#39;android.permission.CAMERA&#39;
uses-permission: name=&#39;android.permission.VIBRATE&#39;
uses-permission: name=&#39;android.permission.INTERNET&#39;
uses-permission: name=&#39;android.permission.RECORD_AUDIO&#39;
uses-permission: name=&#39;android.permission.READ_EXTERNAL_STORAGE&#39;
application-label-af:&#39;Example&#39;
application-label-am:&#39;Example&#39;
application-label-ar:&#39;Example&#39;
..
application-label-zu:&#39;Example&#39;
application-icon-160:&#39;res/mipmap-mdpi-v4/ic_launcher.png&#39;
application-icon-240:&#39;res/mipmap-hdpi-v4/ic_launcher.png&#39;
application-icon-320:&#39;res/mipmap-xhdpi-v4/ic_launcher.png&#39;
application-icon-480:&#39;res/mipmap-xxhdpi-v4/ic_launcher.png&#39;
application-icon-640:&#39;res/mipmap-xxxhdpi-v4/ic_launcher.png&#39;
application: label=&#39;Example&#39; icon=&#39;res/mipmap-mdpi-v4/ic_launcher.png&#39;
application-debuggable
launchable-activity: name=&#39;com.example.application.MainActivity&#39;  label=&#39;&#39; icon=&#39;&#39;
feature-group: label=&#39;&#39;
  uses-feature: name=&#39;android.hardware.camera&#39;
  uses-feature-not-required: name=&#39;android.hardware.camera.autofocus&#39;
  uses-feature-not-required: name=&#39;android.hardware.camera.front&#39;
  uses-feature-not-required: name=&#39;android.hardware.microphone&#39;
  uses-feature: name=&#39;android.hardware.faketouch&#39;
  uses-implied-feature: name=&#39;android.hardware.faketouch&#39; reason=&#39;default feature for all apps&#39;
main
other-activities
supports-screens: &#39;small&#39; &#39;normal&#39; &#39;large&#39; &#39;xlarge&#39;
supports-any-density: &#39;true&#39;
locales: &#39;af&#39; &#39;am&#39; &#39;ar&#39; &#39;az-AZ&#39; &#39;be-BY&#39; &#39;bg&#39; &#39;bn-BD&#39; &#39;bs-BA&#39; &#39;ca&#39; &#39;cs&#39; &#39;da&#39; &#39;de&#39; &#39;el&#39; &#39;en-AU&#39; &#39;en-GB&#39; &#39;en-IN&#39; &#39;es&#39; &#39;es-US&#39; &#39;et-EE&#39; &#39;eu-ES&#39; &#39;fa&#39; &#39;fi&#39; &#39;fr&#39; &#39;fr-CA&#39; &#39;gl-ES&#39; &#39;gu-IN&#39; &#39;hi&#39; &#39;hr&#39; &#39;hu&#39; &#39;hy-AM&#39; &#39;in&#39; &#39;is-IS&#39; &#39;it&#39; &#39;iw&#39; &#39;ja&#39; &#39;ka-GE&#39; &#39;kk-KZ&#39; &#39;km-KH&#39; &#39;kn-IN&#39; &#39;ko&#39; &#39;ky-KG&#39; &#39;lo-LA&#39; &#39;lt&#39; &#39;lv&#39; &#39;mk-MK&#39; &#39;ml-IN&#39; &#39;mn-MN&#39; &#39;mr-IN&#39; &#39;ms-MY&#39; &#39;my-MM&#39; &#39;nb&#39; &#39;ne-NP&#39; &#39;nl&#39; &#39;pa-IN&#39; &#39;pl&#39; &#39;pt&#39; &#39;pt-BR&#39; &#39;pt-PT&#39; &#39;ro&#39; &#39;ru&#39; &#39;si-LK&#39; &#39;sk&#39; &#39;sl&#39; &#39;sq-AL&#39; &#39;sr&#39; &#39;sr-Latn&#39; &#39;sv&#39; &#39;sw&#39; &#39;ta-IN&#39; &#39;te-IN&#39; &#39;th&#39; &#39;tl&#39; &#39;tr&#39; &#39;uk&#39; &#39;ur-PK&#39; &#39;uz-UZ&#39; &#39;vi&#39; &#39;zh-CN&#39; &#39;zh-HK&#39; &#39;zh-TW&#39; &#39;zu&#39;
densities: &#39;160&#39; &#39;240&#39; &#39;320&#39; &#39;480&#39; &#39;640&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h5 id=&#34;get-list-of-permissions-declared-in-the-androidmanifest-of-the-apk&#34;&gt;Get list of permissions declared in the AndroidManifest of the apk&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aapt dump permissions app-debug.apk
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result-1&#34;&gt;&amp;gt; Result&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;package: com.example.application
uses-permission: name=&#39;android.permission.WRITE_EXTERNAL_STORAGE&#39;
uses-permission: name=&#39;android.permission.CAMERA&#39;
uses-permission: name=&#39;android.permission.VIBRATE&#39;
uses-permission: name=&#39;android.permission.INTERNET&#39;
uses-permission: name=&#39;android.permission.RECORD_AUDIO&#39;
uses-permission: name=&#39;android.permission.READ_EXTERNAL_STORAGE&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h5 id=&#34;get-list-of-configurations-for-the-apk&#34;&gt;Get list of configurations for the apk&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aapt dump configurations app-debug.apk
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result-2&#34;&gt;&amp;gt; Result&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;large-v4
xlarge-v4
night-v8
v11
v12
v13
w820dp-v13
h720dp-v13
sw600dp-v13
v14
v17
v18
v21
ldltr-v21
v22
v23
port
land
mdpi-v4
ldrtl-mdpi-v17
hdpi-v4
ldrtl-hdpi-v17
xhdpi-v4
ldrtl-xhdpi-v17
xxhdpi-v4
ldrtl-xxhdpi-v17
xxxhdpi-v4
ldrtl-xxxhdpi-v17
ca
af
..
sr
b+sr+Latn
...
sv
iw
sw
bs-rBA
fr-rCA
lo-rLA
...
kk-rKZ
uz-rUZ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..also try out these&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Print the resource table from the APK.
aapt dump resources app-debug.apk

# Print the compiled xmls in the given assets.
aapt dump xmltree app-debug.apk

# Print the strings of the given compiled xml assets.
aapt dump xmlstrings app-debug.apk

# List contents of Zip-compatible archive.
aapt list -v -a  app-debug.apk    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. as you can see you can easily get the information without even going through the process of unzipping the &lt;code&gt;apk&lt;/code&gt;, but by using the &lt;code&gt;aapt&lt;/code&gt; tool directly on the &lt;code&gt;apk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is more that you can do , taking more info from the &lt;code&gt;man&lt;/code&gt; pages of the &lt;code&gt;aapt&lt;/code&gt; tool&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aapt r[emove] [-v] file.{zip,jar,apk} file1 [file2 ...]
  Delete specified files from Zip-compatible archive.
  
aapt a[dd] [-v] file.{zip,jar,apk} file1 [file2 ...]
  Add specified files to Zip-compatible archive.

aapt c[runch] [-v] -S resource-sources ... -C output-folder ...
  Do PNG preprocessing and store the results in output folder.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..I will let you explore these on your own 🙂&lt;/p&gt;

&lt;p&gt;Comment/Suggestions always welcome.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://elinux.org/Android_aapt&#34;&gt;Reference Link&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Got featured in &lt;a href=&#34;http://androidweekly.net/issues/issue-224&#34;&gt;AndroidWeekly Issue 224&lt;/a&gt;, thank you for the love&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you would like to get more of such android tips and tricks, just hop onto my &lt;strong&gt;&lt;a href=&#34;https://github.com/nisrulz/android-tips-tricks&#34;&gt;Android Tips &amp;amp; Tricks&lt;/a&gt;&lt;/strong&gt; github repository. I keep updating it constantly.&lt;/p&gt;

&lt;p&gt;Keep on crushing code!🤓 😁&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Update Dependencies.Code.Repeat.</title>
      <link>http://crushingcode.github.io/update-dependencies-code-repeat/</link>
      <pubDate>Sat, 03 Sep 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/update-dependencies-code-repeat/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/updatedependency/header.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agree or not agree, but on an average consensus pretty much every android dev goes through the loop of &lt;strong&gt;Update Dependencies.Code.Repeat.&lt;/strong&gt; for each of his/her android project. Its frustrating, a waste of time and super annoying when you would want to have the same version across all projects.&lt;/p&gt;

&lt;p&gt;One of such situations that I recently got into was trying to keep all my apps under &lt;strong&gt;&lt;a href=&#34;https://github.com/nisrulz/android-examples&#34;&gt;Android-Examples&lt;/a&gt;&lt;/strong&gt; repository on github updated. As you can see it the repository has multiple small and simple examples of completely functional android apps. Keeping all of them updated was becoming a hard task whenever a new version of android-gradle-plugin, support library or google play services would be released.&lt;/p&gt;

&lt;p&gt;Initially I would go on to update each app in the repository and then commiting it back. As you can see it wasn&amp;rsquo;t the most efficient way to do it. So sometime back I decided that I am going to put an end to this process and make all version configurations common to all apps and thus escape the &lt;strong&gt;Update Dependencies.Code.Repeat.&lt;/strong&gt; loop of hell.&lt;/p&gt;

&lt;p&gt;So now that I had decided to not update each app individually, I decided to look at my options. The obvious one here was looking at Gradle that supported variables.&lt;/p&gt;

&lt;p&gt;Now we all might have done this for &lt;code&gt;support-library&lt;/code&gt; , where we define a variable inside our module&amp;rsquo;s &lt;code&gt;build.gradle&lt;/code&gt; and  then reference it as below&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;def  supportLibVer = &amp;quot;24.2.0&amp;quot;
..
dependencies {
  compile &amp;quot;com.android.support:appcompat-v7:$supportLibVer&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what I have done here is basically&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Defined a variable named &lt;code&gt;supportLibVer&lt;/code&gt; with the value &lt;code&gt;24.2.0&lt;/code&gt; using &lt;code&gt;def&lt;/code&gt; keyword.&lt;/li&gt;
&lt;li&gt;Next referenced it by using it in the &lt;code&gt;compile&lt;/code&gt; statement as &lt;code&gt;$supportLibVer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the surrounding quote is a double quote &lt;code&gt;&amp;quot;&lt;/code&gt; and not a single quote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now this approach is basically using a &lt;a href=&#34;https://docs.gradle.org/current/userguide/writing_build_scripts.html#sec:local_variables&#34;&gt;Local Variable &lt;/a&gt;, which means that this variable works in the scope of the &lt;code&gt;build.gradle&lt;/code&gt; file it is defined in.&lt;/p&gt;

&lt;p&gt;We want to &lt;strong&gt;&lt;em&gt;externalize&lt;/em&gt;&lt;/strong&gt; the variable from outside the &lt;code&gt;build.gradle&lt;/code&gt; file of the module, so as to provide values to all modules of the project.
Gradle&amp;rsquo;s &lt;a href=&#34;https://docs.gradle.org/current/userguide/writing_build_scripts.html#sec:extra_properties&#34;&gt;Extra properties&lt;/a&gt; comes to the rescue for this.&lt;/p&gt;

&lt;p&gt;The way we use them is by moving our varibales to an &lt;code&gt;ext&lt;/code&gt; block inside the project&amp;rsquo;s root &lt;code&gt;build.gradle&lt;/code&gt; file and referencing it as below&lt;/p&gt;

&lt;p&gt;Project&amp;rsquo;s root &lt;code&gt;build.gradle&lt;/code&gt; file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;ext {
    supportLibVer = &amp;quot;24.2.0&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now reference it in all/required modules as below&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;..
dependencies {
  compile &amp;quot;com.android.support:appcompat-v7:$rootProject.ext.supportLibVer&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Notice that referencing variable is changed now to &lt;code&gt;$rootProject.ext.supportLibVer&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;..hmm looks like we are going somewhere with this. So till now we have been able to externalize the variables so as to facilitate common values to the multiple modules inside a particluar project.&lt;/p&gt;

&lt;p&gt;But my requirement was a step ahead than this. I wanted to provide common values to all projects inside my repository and not just to one particular project. So I needed to provide an external &lt;code&gt;gradle&lt;/code&gt; file (that I place at the root of the folder which contains all my projects) with all &lt;code&gt;ext&lt;/code&gt; variables defined in it , something like this [&lt;a href=&#34;https://github.com/nisrulz/android-examples/blob/master/dependencies.gradle&#34;&gt;dependencies.gradle&lt;/a&gt;]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;ext {
   androidPluginVer = &amp;quot;2.1.3&amp;quot;
   compileSdkVer = 24
   buildToolsVer = &amp;quot;24.0.2&amp;quot;

   minSdkVer = 9
   targetSdkVer = 24

   supportLibVer = &amp;quot;24.2.0&amp;quot;
   googlePlayServicesVer = &amp;quot;9.4.0&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But how do I make them available to each &lt;strong&gt;sub-module&lt;/strong&gt; inside each of my projects?&lt;/p&gt;

&lt;p&gt;I had to dig the gradle docs and buried deep inside is a section that talks about it, called &lt;a href=&#34;https://docs.gradle.org/current/userguide/multi_project_builds.html#sec:subproject_configuration&#34;&gt;Subproject Configuration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So after some practical experimentation i figured out how I can use it to facilitate the &lt;code&gt;ext&lt;/code&gt; variables to &lt;strong&gt;sub-modules&lt;/strong&gt; of each project.
This is what I did next in each Project&amp;rsquo;s root &lt;code&gt;build.gradle&lt;/code&gt;, I added a &lt;code&gt;subprojects&lt;/code&gt; configuration section just below &lt;code&gt;allprojects&lt;/code&gt; configuration section and added a &lt;code&gt;apply from:&lt;/code&gt; statement to apply my external gradle file to each sub-module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ...
}

allprojects {
    ..
}

// This is added to apply the gradle file to each module under the project
subprojects {
    apply from: &#39;../../dependencies.gradle&#39;
}
..

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this did was that it made my external variables, defined in &lt;code&gt;dependencies.gradle&lt;/code&gt; files available in the scope of each module in each of my projects now and I could now reference them simply as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;..
dependencies {
  compile &amp;quot;com.android.support:appcompat-v7:$supportLibVer&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good. Now this makes life so much easy and now I can provide common values to all the dependencies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But wait&lt;/strong&gt;, if you would try to provide a variable and facilitate the version for &lt;code&gt;android-gradle-plugin&lt;/code&gt;, you would see that this wont work!&lt;/p&gt;

&lt;p&gt;Well thats a bummer, as I needed to make that as a common variable too.&lt;/p&gt;

&lt;p&gt;So after much experimentation, I figured out it was because when we define the &lt;code&gt;subprojects&lt;/code&gt; configuration , it doesnot apply to the root project&amp;rsquo;s &lt;code&gt;build.gradle&lt;/code&gt;. Hmm, this is news as we had almost solved the problem.&lt;/p&gt;

&lt;p&gt;So the way I solved this is by applying the &lt;code&gt;dependencies.gradle&lt;/code&gt; to the &lt;code&gt;buildscript&lt;/code&gt; section directly inside the root &lt;code&gt;build.gradle&lt;/code&gt; for each Project. So now each project&amp;rsquo;s root &lt;code&gt;build.gradle&lt;/code&gt; script became as below&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    // This is added to apply the gradle file to facilitate providing variable values to root build.gradle of the project
    apply from: &#39;../dependencies.gradle&#39;
    ..
    dependencies {
        classpath &amp;quot;com.android.tools.build:gradle:$androidPluginVer&amp;quot;
        ..
    }
}


allprojects {
    ..
}

// This is added to apply the gradle file to each module under the project
subprojects {
    apply from: &#39;../../dependencies.gradle&#39;
}
..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nisrulz/android-examples/blob/master/ActivityLifecycle/build.gradle&#34;&gt;Here is a functional root &lt;code&gt;build.gradle&lt;/code&gt; script from one of the project of my repository itself&lt;/a&gt; and &lt;a href=&#34;https://github.com/nisrulz/android-examples/blob/master/ActivityLifecycle/app/build.gradle&#34;&gt;Here is a functional module &lt;code&gt;build.gradle&lt;/code&gt; script from the same project of my repository itself&lt;/a&gt;. You can see I extended the idea to start externalizing the variable for &lt;code&gt;buildToolsVersion&lt;/code&gt; and &lt;code&gt;compileSdkVersion&lt;/code&gt; too :D&lt;/p&gt;

&lt;p&gt;Great! Now we only need to change the values inside the &lt;code&gt;dependencies.gradle&lt;/code&gt; file and hey presto! when ever I would be loading up any of the projects , they will reference the values from this file and would automagically be working of the most udpated version.&lt;/p&gt;

&lt;p&gt;You can checkout the &lt;a href=&#34;https://github.com/nisrulz/android-examples&#34;&gt;Android-Examples&lt;/a&gt; repository to see a fully functional model of this approach.&lt;/p&gt;

&lt;p&gt;Phew, thats all for this time. Hoping it will solve any similar problems, as this approach can be definitely be extended.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Got featured in &lt;a href=&#34;http://androidweekly.net/issues/issue-221&#34;&gt;AndroidWeekly Issue 221&lt;/a&gt;, thank you for the love&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Comment/Suggest me a better approach, if you know one.&lt;/p&gt;

&lt;p&gt;Keep on crushing code!🤓 😁&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guide to publishing your Android Library via JitPack</title>
      <link>http://crushingcode.github.io/publish-your-android-library-via-jitpack/</link>
      <pubDate>Fri, 29 Jul 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/publish-your-android-library-via-jitpack/</guid>
      <description>

&lt;p&gt;Ok so you already know how to build your android library and publish it to JCenter/MavenCentral. This post is third in parts of a series.&lt;/p&gt;

&lt;p&gt;P.S. : If you dont know how to , go ahead and have a look&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jcenter/&#34;&gt;Guide to publishing your Android Library via Jcenter/Bintray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-mavencentral/&#34;&gt;Guide to publishing your Android Library via MavenCentral&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;Guide to publishing your Android Library via JitPack&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The very first question that people would have is&lt;/p&gt;

&lt;h3 id=&#34;what-is-jitpack&#34;&gt;What is JitPack&lt;/h3&gt;

&lt;p&gt;As per their &lt;a href=&#34;https://www.jitpack.io/&#34;&gt;website&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Easy to use package repository for Git. Publish your JVM and Android libraries&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So basically JitPack builds Git projects on demand and provides you with ready-to-use artifacts (jar, aar).&lt;/p&gt;

&lt;h3 id=&#34;why-would-i-use-it-instead-of-jcenter-or-mavencentral&#34;&gt;Why would I use it instead of JCenter or MavenCentral ?&lt;/h3&gt;

&lt;p&gt;Publishing to MavenCentral or JCenter is a well set process which involves people to go through steps in order to let their artifacts be hosted on these repositories. The process also involves you to wait for a certain few hours to get everything synced up.&lt;/p&gt;

&lt;p&gt;On the other hand JitPack is the most simplest way of publishing the artifacts. There is no need to go through project build and upload steps. All you need to do is&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Push your project to GitHub&lt;/li&gt;
&lt;li&gt;Tag a &lt;code&gt;release&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Head over to JitPack and request to publish the &lt;code&gt;release&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;hellip;and thats it. You have your library code available in just few minutes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It just works! Cool , isn&amp;rsquo;t it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I will walk you through the process to help understand the process in a more practical mannner.&lt;/p&gt;

&lt;p&gt;The first step that you need is to create and build your Android &amp;ldquo;Awesome&amp;rdquo; Library, which can be read in the &lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jcenter/&#34;&gt;first post of this series here&lt;/a&gt;. If you have not done so , then please go ahead and read it up. Once done comeback here to read further.&lt;/p&gt;

&lt;p&gt;Assuming you already have your Android &amp;ldquo;Awesome&amp;rdquo; Library built , I will jump directly to steps involved in publishing your library to JitPack&lt;/p&gt;

&lt;h5 id=&#34;publishing-your-android-awesome-library&#34;&gt;Publishing your Android &amp;ldquo;Awesome&amp;rdquo; Library&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Once project is synced, add the &lt;code&gt;android-maven-gradle-plugin&lt;/code&gt; to &lt;code&gt;classpath&lt;/code&gt; in &lt;code&gt;build.gradle&lt;/code&gt; file at &lt;strong&gt;root project&lt;/strong&gt; level.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
  classpath &#39;com.android.tools.build:gradle:2.1.2&#39;
  ..
  ..
  // Setup the android-maven-gradle-plugin in the classpath
  classpath &#39;com.github.dcendents:android-maven-gradle-plugin:1.3&#39;
  ..
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next, apply the &lt;code&gt;android-maven-gradle-plugin&lt;/code&gt; to the &lt;code&gt;build.gradle&lt;/code&gt; file at &lt;strong&gt;library module&lt;/strong&gt; level. Also add the group variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt; apply plugin: &#39;com.android.library&#39;
 // Required plugin in library module
 apply plugin: &#39;com.github.dcendents.android-maven&#39;
 // Replace nisrulz with &amp;lt;your_github_username&amp;gt;
 group=&#39;com.github.nisrulz&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a release TAG in git&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git tag -a 1.0 -m &amp;quot;v1.0&amp;quot;
git push origin 1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once everything is pushed and the release TAG is also pushed, goto &lt;code&gt;https://www.jitpack.io/#username/reponame&lt;/code&gt; where replace &lt;code&gt;username&lt;/code&gt; with your github username and &lt;code&gt;reponame&lt;/code&gt; with the reponame of the android project.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the release you would like to share by clicking the ‘Get It’ button next to the list of releases of your repository.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojitpack/sc1.jpeg&#34; alt=&#34;screenshot1&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;using-your-android-awesome-library-in-other-projects&#34;&gt;Using your Android &amp;ldquo;Awesome&amp;rdquo; Library in other projects&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Next the same page at Jitpack would show you how to use the library in your other android projects. Something like below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojitpack/sc2.jpeg&#34; alt=&#34;screenshot1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Selectable code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;  repositories {
      jcenter()
      maven { url “https://jitpack.io” }
  }
  dependencies {
      compile &#39;com.github.nisrulz:awesomelib:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Let the world know of your &lt;strong&gt;AwesomeLib&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Add a readme that explains how to integrate and use your Awesome library&lt;/li&gt;
&lt;li&gt;Add a license block.&lt;/li&gt;
&lt;li&gt;Also include the JitPack badge provided by jitpack in your readme
&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojitpack/badge.jpeg&#34; alt=&#34;badge&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Promote your lib on social media so that others can know about it.&lt;/li&gt;
&lt;li&gt;Always add a working sample app in your project that demonstrates your library in use.&lt;/li&gt;
&lt;li&gt;Add screenshots if possible in your readme.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code for the AwesomeLibrary and this guide itself is open sourced and available on &lt;a href=&#34;https://github.com/nisrulz/UploadToJitpack&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Star it or just fork it to use it.&lt;/p&gt;

&lt;p&gt;And thats it for this series. I hope it helps people to deploy their android libraries for the world to use.&lt;/p&gt;

&lt;p&gt;Have fun crushing code :D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guide to publishing your Android Library via MavenCentral</title>
      <link>http://crushingcode.github.io/publish-your-android-library-via-mavencentral/</link>
      <pubDate>Sun, 17 Jul 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/publish-your-android-library-via-mavencentral/</guid>
      <description>

&lt;p&gt;If you come from the java world, you would already be knowing about MavenCentral in a big way. MavenCentral is the central repository which hosts all the maven artifacts and one can reference them from anywhere in the world. Android artifacts can also be hosted on MavenCentral in a similar manner. Here I am going to document the process to publish an android library to MavenCentral, as I followed it.&lt;/p&gt;

&lt;p&gt;This post is second in parts of a series. If you didnot read the others in series , go have a look&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jcenter/&#34;&gt;Guide to publishing your Android Library via Jcenter/Bintray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;Guide to publishing your Android Library via MavenCentral&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jitpack/&#34;&gt;Guide to publishing your Android Library via JitPack&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first step need you to create and build your Android &amp;ldquo;Awesome&amp;rdquo; Library and can be read in the &lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jcenter/&#34;&gt;first post of this series here&lt;/a&gt;. If you have not done so , then please go ahead and read it up.&lt;/p&gt;

&lt;p&gt;Assuming you already have your Android &amp;ldquo;Awesome&amp;rdquo; Library built , I will jump directly to steps involved in publishing your library to MavenCentral&lt;/p&gt;

&lt;h5 id=&#34;publishing-your-android-awesome-library&#34;&gt;Publishing your Android &amp;ldquo;Awesome&amp;rdquo; Library&lt;/h5&gt;

&lt;p&gt;Setup &lt;a href=&#34;http://blog.ghostinthemachines.com/2015/03/01/how-to-use-gpg-command-line/&#34;&gt;GPG&lt;/a&gt; and generate yourself a key.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now list your gpg keys&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ gpg --list-keys
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;There the first line will be like pub XXXXX/YYYYYYYY &lt;date&gt;. Remember that ‘YYYYYYYY’ part, it’s you key ID.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Next, publish your keys&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ gpg --keyserver hkp://keyserver.ubuntu.com --send-keys YYYYYYYY
  $ gpg --keyserver hkp://pgp.mit.edu --send-keys YYYYYYYY
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To ensure your keys were published&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ gpg --keyserver hkp://pgp.mit.edu --search-keys
  username@example.com # Use your email
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setup Sonatype account&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a JIRA account on &lt;a href=&#34;https://issues.sonatype.org/secure/Signup!default.jspa&#34;&gt;Sonatype&lt;/a&gt;
&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/signup.jpeg&#34; alt=&#34;signup&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and Login
  &lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/login.jpeg&#34; alt=&#34;login&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Once you are logged in, &lt;a href=&#34;https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;amp;pid=10134&#34;&gt;create a new issue&lt;/a&gt;
&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/create.jpeg&#34; alt=&#34;create&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill out the form as below&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project : Community Support - Open source&lt;/li&gt;
&lt;li&gt;Issue Type : New Project&lt;/li&gt;
&lt;li&gt;Group Id : com.github.github_username&lt;/li&gt;
&lt;li&gt;Project URL : &lt;a href=&#34;https://github.com/github_username/project_name&#34;&gt;https://github.com/github_username/project_name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SCM url : &lt;a href=&#34;https://github.com/github_username/project_name.git&#34;&gt;https://github.com/github_username/project_name.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Username : sonatype_username&lt;/li&gt;
&lt;li&gt;Already Synced to Central : No&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/createissue.jpeg&#34; alt=&#34;createissue&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/createissue2.jpeg&#34; alt=&#34;createissue2&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next hit &lt;strong&gt;Create&lt;/strong&gt;. After that, it can take up to 2 business days to process your issue. Then you will receive a confirmation that your configuration has been prepared and you can publish your library.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; : Do not deploy until after you have received an e-mail notice indicating that the ticket is Resolved.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/approved.jpeg&#34; alt=&#34;approved&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Update &lt;code&gt;gradle.properties&lt;/code&gt; on your local machine  at location &lt;code&gt;~/.gradle/gradle.properties&lt;/code&gt; and include&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; NEXUS_USERNAME=sonatype_username
 NEXUS_PASSWORD=sonatype_password
 signing.keyId=gpg_key_id
 signing.password=gpg_password
 signing.secretKeyRingFile=/Users/username/.gnupg/secring.gpg
 org.gradle.daemon=true
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;IMPORTANT: Steps for setting up your sonatype account up till here are required only once. The steps after these are required whenever publishing your android library, even if its a new one. Just remember to configure it well in your gradle.properties&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;add-the-plugin-by-chris-banes-to-your-library-s-build-gradle&#34;&gt;Add the plugin by Chris Banes to your library&amp;rsquo;s &lt;code&gt;build.gradle&lt;/code&gt;.&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE:  Below is a &lt;a href=&#34;https://github.com/nisrulz/gradle-mvn-push&#34;&gt;fork&lt;/a&gt; of the &lt;a href=&#34;https://github.com/chrisbanes/gradle-mvn-push&#34;&gt;original script&lt;/a&gt; written by Chris Banes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;apply from: &#39;https://raw.github.com/nisrulz/gradle-mvn-push/master/gradle-mvn-push.gradle&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and define the required variables in the &lt;code&gt;gradle.properties&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Properties used by gradle maven-push plugin
VERSION_NAME=1.0.0
VERSION_CODE=1
POM_NAME=&amp;lt;Library_Name&amp;gt;
POM_ARTIFACT_ID=&amp;lt;library_name_smallcaps&amp;gt;

POM_DESCRIPTION=&amp;lt;library_description&amp;gt;
POM_URL=https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;
POM_SCM_URL=https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;
POM_SCM_CONNECTION=scm:git@github.com:&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;.git
POM_SCM_DEV_CONNECTION=scm:git@github.com:&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;.git
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Run in terminal to publish your artifacts&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  ./gradlew build clean uploadArchive
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Login into &lt;a href=&#34;https://oss.sonatype.org/#stagingRepositories&#34;&gt;Nexus Repository Console&lt;/a&gt; and search for your package name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/nexusrepo.jpeg&#34; alt=&#34;nexusrepo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/close.jpeg&#34; alt=&#34;close&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Close the staged artifact.[wait]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Release the closed artifact (keep drop artifact selected).[wait]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Wait for some hours before everything gets synced with MavenCentral.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;using-your-android-awesome-library-in-other-projects&#34;&gt;Using your Android &amp;ldquo;Awesome&amp;rdquo; Library in other projects&lt;/h5&gt;

&lt;p&gt;Your code is available through MavenCentral if you have received the mail with confirmation&lt;/p&gt;

&lt;p&gt;You can use the lib now as follows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
    compile &#39;&amp;lt;group_name&amp;gt;:&amp;lt;artifact_name&amp;gt;:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;i.e for the sample lib in this repo , &lt;code&gt;awesomelib&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
      compile &#39;com.github.nisrulz:awesomelib:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Let the world know of your &lt;strong&gt;AwesomeLib&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Add a readme that explains how to integrate and use your Awesome library&lt;/li&gt;
&lt;li&gt;Add a license block as in this repo&lt;/li&gt;
&lt;li&gt;Also include a badge of MavenCentral in your readme&lt;/li&gt;
&lt;li&gt;Promote your lib on social media so that others can know about it.&lt;/li&gt;
&lt;li&gt;Always add a working sample app in your project that demonstrates your library in use.&lt;/li&gt;
&lt;li&gt;Add screenshots if possible in your readme.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The code for the AwesomeLibrary and this guide itself is open sourced and available on &lt;a href=&#34;https://github.com/nisrulz/UploadToMavenCentral&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Star it or just fork it to use it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guide to publishing your Android Library via Jcenter/Bintray</title>
      <link>http://crushingcode.github.io/publish-your-android-library-via-jcenter/</link>
      <pubDate>Tue, 12 Jul 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/publish-your-android-library-via-jcenter/</guid>
      <description>

&lt;p&gt;Developers are a different kind of people altogether. &lt;strong&gt;They tend to be lazy but strive to be super efficient at the same time&lt;/strong&gt;.
A lot of this can be seen in the Android world where a certain library pops up everyday to solve a specific problem or  to make the complex processes simpler.&lt;/p&gt;

&lt;p&gt;I have a certain knack for re-using code blocks just to avoid repeative tasks and to facilitate this I usually end up converting those codeblocks into an android library.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But what if I wanted to share my android library with the world?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well in a nutshell the steps to follow would be as below :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all I need to open source the andorid library, which should be easy as you can push it to &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; or any other public git repository.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next I need to push the android library as a maven artifact (aar/jar with a POM) to all of the or one of the below central repositories&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bintray.com/&#34;&gt;JCenter/Bintray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://search.maven.org/&#34;&gt;Maven Central&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jitpack.io/&#34;&gt;Jitpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will walkthrough the process of publishing to each if these central repositories in the upcoming posts of this series.&lt;/p&gt;

&lt;p&gt;For now lets lookup the steps to publish your android library to JCenter/Bintray.&lt;/p&gt;

&lt;h5 id=&#34;creating-your-android-awesome-library&#34;&gt;Creating your Android &amp;ldquo;Awesome&amp;rdquo; Library&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;You can skip to the next part if you already have this built&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Create an Android project or open an existing one in &lt;a href=&#34;https://en.wikipedia.org/wiki/Android_Studio&#34;&gt;Android Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Init the project with git and also create a repo on Github for the same. Each step here onwards represent a commit and should be pushed to github.&lt;/li&gt;
&lt;li&gt;Create and add a new module and choose &lt;code&gt;Android Library&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Goto &lt;code&gt;File&amp;gt;New&amp;gt;New Module..&lt;/code&gt; and select &lt;code&gt;Android Library&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/newmodule.jpeg&#34; alt=&#34;newmodule&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/newlib.jpeg&#34; alt=&#34;newlib&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/newlibinfo.jpeg&#34; alt=&#34;newlibinfo&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement your library code inside the library module you created in the last step.&lt;/li&gt;
&lt;li&gt;Next add the library module as a dependency to the app module.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Goto &lt;code&gt;File&amp;gt;Project Structure..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;app&lt;/code&gt; module in the sidebar&lt;/li&gt;
&lt;li&gt;Select the &lt;code&gt;Dependencies&lt;/code&gt; tab&lt;/li&gt;
&lt;li&gt;At the bottom is a &lt;code&gt;+&lt;/code&gt; icon, click that and select &lt;code&gt;Module dependency&lt;/code&gt; and select your &lt;code&gt;library&lt;/code&gt; module.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;ok&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/project.jpeg&#34; alt=&#34;project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/prjstruct.jpeg&#34; alt=&#34;prjstruct&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/addmodule.jpeg&#34; alt=&#34;addmodule&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;publishing-your-android-awesome-library&#34;&gt;Publishing your Android &amp;ldquo;Awesome&amp;rdquo; Library&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Once project is synced, add the required plugins to classpath in &lt;code&gt;build.gradle&lt;/code&gt; file at root project level, as shown below&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt; dependencies {
    classpath &#39;com.android.tools.build:gradle:2.1.3&#39;
    ..
    ..
    // Required plugins added to classpath to facilitate pushing to Jcenter/Bintray
    classpath &#39;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7&#39;
    classpath &#39;com.github.dcendents:android-maven-gradle-plugin:1.4.1&#39;
    ..
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Next, apply the &lt;code&gt;bintray&lt;/code&gt; and &lt;code&gt;install&lt;/code&gt; plugins at the bottom of build.gradle file at library module level. Also add the ext variable with required information as shown below&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt; apply plugin: &#39;com.android.library&#39;

 ext {
   bintrayRepo = &#39;maven&#39;
   bintrayName = &#39;awesomelib&#39;   // Has to be same as your library module name

   publishedGroupId = &#39;com.github.nisrulz&#39;
   libraryName = &#39;AwesomeLib&#39;
   artifact = &#39;awesomelib&#39;     // Has to be same as your library module name

   libraryDescription = &#39;Android Library to make any text into Toast with Awesome prepended to the text&#39;

   // Your github repo link
   siteUrl = &#39;https://github.com/nisrulz/UploadToBintray&#39;
   gitUrl = &#39;https://github.com/nisrulz/UploadToBintray.git&#39;
   githubRepository= &#39;nisrulz/UploadToBintray&#39;

   libraryVersion = &#39;1.0&#39;

   developerId = &#39;nisrulz&#39;
   developerName = &#39;Nishant Srivastava&#39;
   developerEmail = &#39;nisrulz@gmail.com&#39;

   licenseName = &#39;The Apache Software License, Version 2.0&#39;
   licenseUrl = &#39;http://www.apache.org/licenses/LICENSE-2.0.txt&#39;
   allLicenses = [&amp;quot;Apache-2.0&amp;quot;]
 }

 ..
 ..

 // Place it at the end of the file
 apply from: &#39;https://raw.githubusercontent.com/nisrulz/JCenter/master/installv1.gradle&#39;
 apply from: &#39;https://raw.githubusercontent.com/nisrulz/JCenter/master/bintrayv1.gradle&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Edit your &lt;code&gt;local.properties&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;bintray.user=&amp;lt;your_bintray_username&amp;gt;
bintray.apikey=&amp;lt;your_bintray_apikey&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE : &lt;code&gt;bintray.user&lt;/code&gt; and &lt;code&gt;bintray.apikey&lt;/code&gt; have to be in &lt;code&gt;local.properties&lt;/code&gt; specifically or else you will get error later regarding the user and apikey values not available to the bintrayUpload gradle task as below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;No value has been specified for property &#39;apiKey&#39;.
No value has been specified for property &#39;user&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now lets setup Bintray before we can push our artifact to it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Register for an account on &lt;a href=&#34;https://bintray.com/&#34;&gt;bintray.com&lt;/a&gt; and click the activation email they send you.&lt;/li&gt;
&lt;li&gt;Add a new Maven repository and click &lt;strong&gt;Create New Package&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;You should now have a maven repository. For instance:
&lt;code&gt;https://bintray.com/nisrulz/maven&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now once you have your maven repo setup , click on &lt;strong&gt;Edit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/edit.jpeg&#34; alt=&#34;edit&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and see that you have selected the option &lt;code&gt;GPG sign uploaded files using Bintray&#39;s public/private key pair.&lt;/code&gt; and then click &lt;strong&gt;Update&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/gpg.jpeg&#34; alt=&#34;gpg&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once everything is configured, run the below in your terminal in your root of the project&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;./gradlew clean build install bintrayUpload
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Now once your project is up on bintray, simply hit &lt;strong&gt;Add to Jcenter&lt;/strong&gt; button to sync with JCenter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/addtojcenter.jpeg&#34; alt=&#34;addtojcenter&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;using-your-android-awesome-library-in-other-projects&#34;&gt;Using your Android &amp;ldquo;Awesome&amp;rdquo; Library in other projects&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Your code is available through the private repo at bintray&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;repositories {
   jcenter()
   maven { url &#39;https://dl.bintray.com/&amp;lt;bintray_username&amp;gt;/maven&#39; }
}
dependencies {
  compile &#39;com.github.&amp;lt;bintray_username&amp;gt;:&amp;lt;library_module&amp;gt;:1.0&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;i.e for the sample lib in this repo , &lt;code&gt;awesomelib&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;repositories {
   jcenter()
   maven { url &#39;https://dl.bintray.com/nisrulz/maven&#39; }
}
dependencies {
  compile &#39;com.github.nisrulz:awesomelib:1.0&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Your code is available through JCenter if you have received the mail with confirmation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/finalmail.jpeg&#34; alt=&#34;finalmail&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Few things to note when you received the final email.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Goto your maven repo at bintray and verify that you have Jcenter under the &lt;strong&gt;Linked to&lt;/strong&gt; section&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/linked.jpeg&#34; alt=&#34;linked&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now you would also want to sync the artifact to &lt;a href=&#34;https://search.maven.org/&#34;&gt;MavenCentral&lt;/a&gt;, for that you need to hit the &lt;strong&gt;Maven Central&lt;/strong&gt; tab and sync&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/synctomaven.jpeg&#34; alt=&#34;synctomaven&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you hit sync you would see as below. Wait for few hours for the sync to occur.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/syncstatus.jpeg&#34; alt=&#34;syncstatus&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can use the lib now as follows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
    compile &#39;com.github.&amp;lt;bintray_username&amp;gt;:&amp;lt;library_module&amp;gt;:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;i.e for the sample lib in this repo , &lt;code&gt;awesomelib&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
      compile &#39;com.github.nisrulz:awesomelib:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Let the world know of your &lt;strong&gt;AwesomeLib&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Add a readme that explains how to integrate and use your Awesome library&lt;/li&gt;
&lt;li&gt;Add a license block as in this repo&lt;/li&gt;
&lt;li&gt;Also include the Bintray badge provided by Bintray in your readme
&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/badge.jpeg&#34; alt=&#34;badge&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Promote your lib on social media so that others can know about it.&lt;/li&gt;
&lt;li&gt;Always add a working sample app in your project that demonstrates your library in use.&lt;/li&gt;
&lt;li&gt;Add screenshots if possible in your readme.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The code for the AwesomeLibrary and this guide itself is open sourced and available on &lt;a href=&#34;https://github.com/nisrulz/UploadToBintray&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;bintray&lt;/code&gt; and &lt;code&gt;install&lt;/code&gt; plugins are also available on &lt;a href=&#34;https://github.com/nisrulz/JCenter&#34;&gt;github&lt;/a&gt;. You may fork it and use it in your namespace.&lt;/p&gt;

&lt;p&gt;Star it or just fork it to use it.&lt;/p&gt;

&lt;p&gt;This post is first in parts of a series&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;Guide to publishing your Android Library via Jcenter/Bintray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-mavencentral/&#34;&gt;Guide to publishing your Android Library via MavenCentral&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jitpack/&#34;&gt;Guide to publishing your Android Library via JitPack&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Fun Project : Javadoc-Themer</title>
      <link>http://crushingcode.github.io/a-splash-of-colors-to-your-boring-javadocs/</link>
      <pubDate>Sun, 15 May 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/a-splash-of-colors-to-your-boring-javadocs/</guid>
      <description>&lt;p&gt;I am pretty sure you would agree to the fact that the usual javadoc is not a something everyone likes. The colors are what makes it superrrrrrr boring. Yeah , I actually despise those weird colors and the fact that its been around for so long , made me think how to solve this. Also if you try looking it up on the internet there aren&amp;rsquo;t any solutions that basically solved this in a programmatic way.&lt;/p&gt;

&lt;p&gt;Well look no more&amp;hellip;. TADAAAAAAA !!&lt;/p&gt;

&lt;p&gt;Introducing &lt;strong&gt;&lt;a href=&#34;https://javadoc-themer.firebaseapp.com/&#34;&gt;Javadoc-Themer&lt;/a&gt;&lt;/strong&gt; (..insert suppperrr happy smiley here).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/javadocthemer/javadocthemer.png&#34; alt=&#34;javadocthemer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So what does this do actually ? Well it basically makes it easy for you to control what colors your generated javadoc uses.&lt;/p&gt;

&lt;p&gt;Using Javadoc-Themer you can choose the colors for each part of your javadoc and generate a stylesheet of it. Next you provide the stylesheet as an argument while generating your javadocs and there you have a better looking javadoc (^_^)&lt;/p&gt;

&lt;p&gt;Refer to &lt;strong&gt;How to&lt;/strong&gt; section in the &lt;strong&gt;Javadoc-Themer&lt;/strong&gt; for more information.&lt;/p&gt;

&lt;p&gt;Here is a comparison of both&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/javadocthemer/javadocdiff.png&#34; alt=&#34;javadocdiff&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The code for Javadoc-Themer is open sourced on &lt;a href=&#34;https://github.com/nisrulz/javadoc-themer&#34;&gt;github&lt;/a&gt; and you can find the webapp &lt;a href=&#34;https://javadoc-themer.firebaseapp.com/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Star it, fork it or simply use it to build better looking javadocs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The curious case of dependency conflicts</title>
      <link>http://crushingcode.github.io/the-curious-case-of-dependency-conflicts/</link>
      <pubDate>Mon, 02 May 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/the-curious-case-of-dependency-conflicts/</guid>
      <description>

&lt;p&gt;If I were to ask a question to a room filled with android developers&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;How many of you have been in that place of sheer helplessness and panic when your gradle build fails because of a version conflict in dependencies?&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;..I am pretty sure a lot of them would raise their hand or agree to being in that state and the very first action would be to hop onto stackoverflow and search for possible solutions in this type of a situation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/depconflicts.jpg&#34; alt=&#34;depconflicts&#34; /&gt;
&lt;!-- Image taken from freepik.com and all credit goes to the creator of it --&gt;&lt;/p&gt;

&lt;p&gt;We all have been there and we all have experienced it. The problem is a result of each library following a completely different development lifecycle and using a different version of a public api, which by far all means is not the problem which needs to be rectified.
You can&amp;rsquo;t just ask all android library developers/team maintaining it to update the library to use either the lastest or some specific version of a dependency just because it works with another library and/or is causing a conflict when you have both of them in your project.&lt;/p&gt;

&lt;p&gt;So what exactly are the options available to us..&lt;/p&gt;

&lt;p&gt;I stumbled upon such a situation sometime back in the last month or so and as the whole journey to fix this type of conflict was suprisingly less documented on the web , here is my record of how I solved it.&lt;/p&gt;

&lt;p&gt;Now the process I followed may not be the best one out there but it sure did led me to hunt down the solution along with digging out some pretty neat tricks possible using &lt;strong&gt;&lt;em&gt;Gradle Build System&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Before we begin lets get acquinted with some terms we would be using a lot in this whole writeup.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gradle&lt;/strong&gt; - Build system for android&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependency&lt;/strong&gt; - Libraries such as support libraries in your build.gradle&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;transitive dependency&lt;/strong&gt; - Libraries on which dependencies defined in your project depend on&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;conflict&lt;/strong&gt; - incompatible or at variance/clash&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gradlew&lt;/strong&gt; - gradle wrapper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The important term here for us (in regards to our problem of conflicting dependencies) is &lt;strong&gt;&lt;em&gt;transitive dependency&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You see when you have multiple dependencies defined in your build.gradle, you can never be sure of what do those dependencies further depend on.&lt;/p&gt;

&lt;p&gt;Lets take a simple example&lt;/p&gt;

&lt;p&gt;Say you have 3 android libraries defined under your build.gradle for the app , namely &lt;strong&gt;libA&lt;/strong&gt;, &lt;strong&gt;libB&lt;/strong&gt; and &lt;strong&gt;libC&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;
dependencies {
    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])
    compile &#39;com.company1.sdk:libA:1.0.2&#39;
    compile &#39;com.company2.sdk:libB:2.0.3&#39;
    compile &#39;com.company3.sdk:libC:3.0.4&#39;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now for you as an android dev the only dependencies in view are &lt;strong&gt;libA&lt;/strong&gt;, &lt;strong&gt;libB&lt;/strong&gt; and &lt;strong&gt;libC&lt;/strong&gt;. You have no idea what these android libraries furthur depend upon.&lt;/p&gt;

&lt;p&gt;The situation which might cause a conflict would be if &lt;strong&gt;libA&lt;/strong&gt; depends on say &lt;strong&gt;libD&lt;/strong&gt; (version 4.0.4) and &lt;strong&gt;libC&lt;/strong&gt; depends on say &lt;strong&gt;libD&lt;/strong&gt; (version 4.0.2).&lt;/p&gt;

&lt;p&gt;Now by default &lt;em&gt;Gradle&lt;/em&gt; would resolve to the latest version of &lt;strong&gt;libD&lt;/strong&gt;. But this is where the problem actually lies.&lt;/p&gt;

&lt;p&gt;You see when you build your code it only says there is conflict in the &lt;strong&gt;libD&lt;/strong&gt; dependency. Thats all.&lt;/p&gt;

&lt;p&gt;So how do you hunt it down.&lt;/p&gt;

&lt;p&gt;well there are a few ways you can do that, the easiest one uses the &lt;code&gt;gradle wrapper&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-1&#34;&gt;&lt;strong&gt;STEP 1&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Look for all android dependencies being downloaded as part of the build process.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./gradlew androidDependencies
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..you should get a graph like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...
release
+--- com.company1.sdk:libA:1.0.2
|    +--- com.company4.sdk:libD:4.0.4
+--- com.company2.sdk:libB:2.0.3
|
+--- com.company3.sdk:libA:3.0.4
     +--- com.company4.sdk:libD:4.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..hmm..its becoming a bit more clear now. We can see which version of transitive dependencies are being pulled by which dependency.&lt;/p&gt;

&lt;p&gt;So what exactly happened here?&lt;/p&gt;

&lt;p&gt;The declared dependencies inside your build.gradle file actually download some more libraries on their own since its integral to their functioning. Transitive dependency defined for a declared library could conflict with another transitive dependeny defined for another declared library in version.&lt;/p&gt;

&lt;p&gt;Whats wrong here, you ask  ?  When a library was written to work with older version of the &lt;strong&gt;&lt;em&gt;transitive  dependency&lt;/em&gt;&lt;/strong&gt; then it will basically break if provided with a higher version of the same, probably because the API changed or some classes were removed/renamed (between version updates)from what it was coded to reference and work with.&lt;/p&gt;

&lt;p&gt;Well if you are able to find your problem then you can jump to the solution directly, but if you are still looking for answers then read on.&lt;/p&gt;

&lt;p&gt;Looks like you are still in trouble!&lt;/p&gt;

&lt;p&gt;Considering that you still cannot find the conflicting dependencies and their versions and assuming that its not conflicting from a dependency declared in the build.gradle file but (..probably) introduced by some gradle-plugin defined, we will do a more verbose checkup which is what STEP 2 is about&lt;/p&gt;

&lt;h3 id=&#34;step-2&#34;&gt;&lt;strong&gt;STEP 2&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Check the complete stacktrace of the build process using &lt;code&gt;--info&lt;/code&gt; and &lt;code&gt;--stacktrace&lt;/code&gt; flags passed as arguments&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./gradlew build --info --stacktrace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should give you a complete log of everything and where exactly the build failed.You can find out the version conflicts and a lot more details in this step.&lt;/p&gt;

&lt;p&gt;In my case this was the very case where I was having a conflict on annotations library introduced by the findbugs gradle plugin.&lt;/p&gt;

&lt;p&gt;Well, ok so this is a problem we have got. Whats the solution ? how do you go against the default behaviour of gradle and resolve to a lower version when a conflict occurs ?&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;&lt;strong&gt;SOLUTION&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Well this is where the flexibility of Gradle comes into view. This is not commonly known but is a very useful functionality tucked away into the &lt;a href=&#34;https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html#org.gradle.api.artifacts.ResolutionStrategy:failOnVersionConflict()&#34;&gt;api docs&lt;/a&gt; for gradle.&lt;/p&gt;

&lt;p&gt;The very first thing that you should do is, enable &lt;code&gt;failOnVersionConflict&lt;/code&gt; flag in gradle on version conflicts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;
configurations.all {
  resolutionStrategy.failOnVersionConflict()
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should give you more idea about where in your code are version conflicts occuring which were getting implicitly resolved by gradle.&lt;/p&gt;

&lt;p&gt;Secondly, you can force gradle to resolve to the lower version&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;configurations.all {
  resolutionStrategy.force &#39;com.company4.sdk:libD:4.0.2&#39;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This changes the default behaviour of gradle.&lt;/p&gt;

&lt;p&gt;But wait! Resoltion strategy is still causing parts of the same dependency to conflict. HELP!&lt;/p&gt;

&lt;p&gt;Well only in that condition you should try and completely replace the whole module.&lt;/p&gt;

&lt;p&gt;Ho do you do it ? by including the below into your &lt;code&gt;build.gradle&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;// add dependency substitution rules
configurations.all {
  resolutionStrategy.dependencySubstitution {
    // Substitute one module dependency for another
    substitute module(&#39;com.company4.sdk:libD:4.0.4&#39;) with module(&#39;com.company4.sdk:libD:4.0.2&#39;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE : dependencySubstitution is an incubating functionality and may change in a future version of Gradle
As of writting this post the latest Gradle Version is 2.13 in which this is available.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thats pretty neat , isn&amp;rsquo;t it.&lt;/p&gt;

&lt;p&gt;I am pretty sure this would enable you to find the conflicts and solve it too.&lt;/p&gt;

&lt;p&gt;This also goes with the disclaimer that trying to resolve dependency conflicts this way is not the preferred way. You should always try to be using the latest version of the dependencies as well as maintain your library to use the same. This post basically defines the process to enable you to try and figure out why your build is failing and how to bypass it for the time being.&lt;/p&gt;

&lt;p&gt;Thats all for today folks.
Keep crushing code until next post :)&lt;/p&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html#org.gradle.api.artifacts.ResolutionStrategy:failOnVersionConflict()&#34;&gt;Gradle Docs&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Own a maven repository, like a boss! – Part 2</title>
      <link>http://crushingcode.github.io/own-a-maven-repository-like-a-bosspart-2/</link>
      <pubDate>Tue, 16 Feb 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/own-a-maven-repository-like-a-bosspart-2/</guid>
      <description>

&lt;p&gt;The world of artifacts and the way they make the life of a developer simpler, fascinates me to a great extent.&lt;/p&gt;

&lt;p&gt;For the same reason I have gone through a lot of good articles online, which explain how the whole process works. However most of the documentation is either not up to date or lacks proper explanation. Personally all I care about is how does it work and how can I make it simpler. Hence I set out to try and implement the whole process on my own.&lt;/p&gt;

&lt;p&gt;We have already covered in &lt;a href=&#34;http://crushingcode.github.io/own-a-maven-repository-like-a-boss–part-1&#34;&gt;Part-1&lt;/a&gt; of this series the process of how to create a maven repository hosted on github and this part builds upon that.&lt;/p&gt;

&lt;p&gt;The next part is actually the simpler step - To consume these artifacts which are hosted on a maven repository in your android project.&lt;/p&gt;

&lt;p&gt;The basic steps required are as follows :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&#34;step-1&#34;&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Goto your maven repository on github and open up your releases folder via the browser.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;step-2&#34;&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Copy the URL in the address bar. It should look like below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/&amp;lt;username&amp;gt;/&amp;lt;mavenrepo&amp;gt;/tree/master/releases
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;step-3&#34;&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Now replace the &lt;code&gt;tree&lt;/code&gt; word in the url with &lt;code&gt;raw&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# From
https://github.com/&amp;lt;username&amp;gt;/&amp;lt;mavenrepo&amp;gt;/tree/master/releases

# to
https://github.com/&amp;lt;username&amp;gt;/&amp;lt;mavenrepo&amp;gt;/raw/master/releases

# and copy this new url.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;step-4&#34;&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Now goto your Android Project and open up your &lt;code&gt;build.gradle&lt;/code&gt; file for the module where you want to include the artifact (i.e app/library).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;step-5&#34;&gt;&lt;strong&gt;Step 5&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Now copy the below to the &lt;code&gt;build.gradle&lt;/code&gt; file with the appropriate url for the maven repository as obtained in &lt;em&gt;Step-3&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;repositories {
maven {
    url &amp;quot;https://github.com/&amp;lt;username&amp;gt;/&amp;lt;mavenrepo&amp;gt;/raw/master/releases&amp;quot;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;step-6&#34;&gt;&lt;strong&gt;Step 6&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Next , add the dependency as you would normally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dependencies {
compile &#39;com.github.&amp;lt;username&amp;gt;:&amp;lt;artifact_name&amp;gt;:&amp;lt;version&amp;gt;&#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;where &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; has to be of the form  &lt;code&gt;&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.&amp;lt;patch&amp;gt;&lt;/code&gt; i.e 1.0.0&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;in-summary&#34;&gt;In Summary&lt;/h2&gt;

&lt;p&gt;You just learned how to use artifacts from your own github account as a maven repository and in essence bypassed the complexity of getting artifacts into the Maven Central/Jcenter.&lt;/p&gt;

&lt;p&gt;For reference you can have a look at my own &lt;a href=&#34;http://crushingcode.github.io/mavenrepo/&#34;&gt;maven repository&lt;/a&gt; on &lt;a href=&#34;https://github.com/nisrulz/mavenrepo&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However as you would see this is a very limiting way of accessing artifacts.
The developer is supposed to include your &lt;code&gt;maven url&lt;/code&gt; under &lt;code&gt;repository&lt;/code&gt; section which is &amp;hellip;a bit of extra work , right ?&lt;/p&gt;

&lt;p&gt;As a developer we are all very lazy. We want to cut this extra work down to only compiling our artifact as a dependency with a single line of code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compile &#39;com.github.&amp;lt;username&amp;gt;:&amp;lt;artifact_name&amp;gt;:&amp;lt;version&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well this is where Maven Central/Jcenter step in.
A lot of information on them in the next part of this series.&lt;/p&gt;

&lt;p&gt;Till then keep calm and crush c.o.d.e !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Own a maven repository, like a boss! – Part 1</title>
      <link>http://crushingcode.github.io/own-a-maven-repository-like-a-bosspart-1/</link>
      <pubDate>Mon, 03 Aug 2015 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/own-a-maven-repository-like-a-bosspart-1/</guid>
      <description>

&lt;p&gt;Have you ever thought how the central repository works like Maven Central or JCenter?
Is it possible to own one for yourself?
Do you want to host your artifacts in your own private repository?&lt;/p&gt;

&lt;p&gt;If your answer is &lt;strong&gt;YES&lt;/strong&gt;, well you are in the right place. I am going to walk you through basic steps involved in setting up your own maven repository where you can publish your artifacts, using all but your terminal, git and a public remote repository hosting service of your choice ( i.e Github or Bitbucket ).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For those of you who want to jump into the code right away , here is the gist&lt;/strong&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/nisrulz/efb1654eaeb8930591c6.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;For the rest of you who want a complete explanation, lets dive in&lt;/strong&gt;..&lt;/p&gt;

&lt;h2 id=&#34;terms&#34;&gt;Terms&lt;/h2&gt;

&lt;p&gt;Before we start, I want you to get acquainted with some of the terms:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Artifacts&lt;/strong&gt; : An artifact is a file, usually a JAR, that gets deployed to a Maven repository. A Maven build produces one or more artifacts, such as a compiled JAR and a “sources” JAR. Each artifact has a group ID (usually a reversed domain name, like com.example.foo), an artifact ID (just a name), and a version string. The three together uniquely identify the artifact. A project’s dependencies are specified as artifacts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Maven&lt;/strong&gt; : A tool that can be used for building and managing any Java-based project.(&lt;a href=&#34;https://maven.apache.org/what-is-maven.html&#34;&gt;more info&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I would like to mention that having your artifacts in the Maven Central and JCenter has a plethora of advantages which you will never be able to get when using the below method.
Lets just say its just another method to host and publish your artifacts without having to go through the process of publishing it to central repository.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Prerequisites&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;git (&lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;Install guide&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;maven (&lt;a href=&#34;https://maven.apache.org/install.html&#34;&gt;Install guide&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/&#34;&gt;Bitbucket&lt;/a&gt; or &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; account&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JAR/AAR/WAR file to be published to your maven repository&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;….Okay…if you made it till this point, everything is going to be a piece of cake from here onwards :P promise :)&lt;/p&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; : Fire up your terminal/command prompt
&lt;strong&gt;Step 2&lt;/strong&gt; : Create a directory where you will sync your maven artifacts to, lets say its called mavenrepo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir mavenrepo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and change into the mavenrepo directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd mavenrepo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt; : Once inside the directory, initialize it with git&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt; : Create a repository named &lt;strong&gt;mavenrepo (git remote)&lt;/strong&gt; at Github/Bitbucket and add it to your &lt;strong&gt;mavenrepo (git local)&lt;/strong&gt; directory as a remote repository named &lt;strong&gt;origin&lt;/strong&gt; ( here i am adding a github repo)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add origin https://github.com/&amp;lt;username&amp;gt;/mavenrepo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note : you can get the url from Github under the settings tab when at your repository page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/copygithuburl.png&#34; alt=&#34;copygithuburl&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt; :  Create 2 directories under mavenrepo, namely releases and snapshots&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir releases snapshots
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt; : Create README.md under each sub directory, releases and snapshots
Note: This step is required since git will not push empty directories, so we add empty README.md files :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;touch releases/README.md
touch snapshots/README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 7&lt;/strong&gt; : Stage all the changed files under git, using the below command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 8&lt;/strong&gt; : Commit with a message&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -m &amp;quot;Initial Setup&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 9&lt;/strong&gt; : Push to origin&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thats It!
You have a working maven repository :D&lt;/p&gt;

&lt;p&gt;Okay, this is cool …I have a working maven repository ..hmm..but something is missing ….wait a second, where is the artifact that i would be pushing to this maven repository ??
To be specific, how do i generate the maven artifact ?
Simple,&lt;/p&gt;

&lt;h2 id=&#34;generating-a-maven-artifact&#34;&gt;Generating a maven artifact&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 10&lt;/strong&gt; : Generate a maven artifact using the below command in terminal/command prompt (provided you already have the maven installed)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn clean org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file -DgroupId=com.company.id -DartifactId=artificatid -Dversion=1.0.0 -Dpackaging=aar -Dfile=artifact.aar -DlocalRepositoryPath=./mavenrepo/releases/aar -DgeneratePom=true -DcreateChecksum=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;thats a lot to take in but thats just one single command that does it all.&lt;/p&gt;

&lt;p&gt;Lets break it down into parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mvn&lt;/strong&gt; Maven build tool command&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;clean&lt;/strong&gt; Command that attempts to clean a project’s working directory of the files that were generated at build-time&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file&lt;/strong&gt; Command to install the artifact into the maven repository via using a specific maven plugin, here being v2.5.2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-DgroupId&lt;/strong&gt; Specify your package name here i.e.com.company.id&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-DartifactId&lt;/strong&gt; Specify the name of the artifact&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-Dversion&lt;/strong&gt; Specify the version of the artifact&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-Dpackaging&lt;/strong&gt; Specify the packaging type of the artifact i.e jar/aar/war&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-Dfile&lt;/strong&gt; Specify here the specific name of the jar/aar/war you are pushing as a maven artifact&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-DlocalRepositoryPath&lt;/strong&gt; Specify the path to your mavenrepo (git local) i.e.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;./mavenrepo/releases/aar
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-DgeneratePom&lt;/strong&gt; Set it to true to generate a POM file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-DcreateChecksum&lt;/strong&gt; Set it to true to generate the checksum files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 11&lt;/strong&gt; : Once you are done generating the maven artifacts and they are deployed under the specific folder ( releases/snapshots), just stage them, commit and push it to your remote repo…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;&amp;lt;artifact&amp;gt; v1.0.0 added&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Repeat &lt;strong&gt;&lt;em&gt;Steps 10-11&lt;/em&gt;&lt;/strong&gt; every time you want to publish a maven artifact to your own maven repository.&lt;/p&gt;

&lt;h2 id=&#34;in-summary&#34;&gt;In Summary&lt;/h2&gt;

&lt;p&gt;Thats it for Part 1. In the next part we will see how to use this maven repository in our android application to reference libraries into our project with the help of gradle.&lt;/p&gt;

&lt;p&gt;Till then have fun crushing code :D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Meet JACK &amp; JILL , Android’s experimental toolchain</title>
      <link>http://crushingcode.github.io/meet-jack-and-jill-androids-experimental-toolchain/</link>
      <pubDate>Tue, 21 Jul 2015 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/meet-jack-and-jill-androids-experimental-toolchain/</guid>
      <description>&lt;p&gt;JACK &amp;amp; JILL are part of the new tool chain for android and in the words of &lt;a href=&#34;http://android-developers.blogspot.co.uk/2014/12/hello-world-meet-our-new-experimental.html&#34;&gt;Android Developer Blog&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;they are designed to improve build times and simplify development by reducing dependencies on other tools&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In case you are curious, &lt;strong&gt;JACK&lt;/strong&gt; stands for &lt;strong&gt;Java Android Compiler Kit&lt;/strong&gt; and &lt;strong&gt;JILL&lt;/strong&gt; stands for  &lt;strong&gt;Jack Intermediate Library Linker&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Woa ..woa..wooaaaa ..thats sounds too technical ..lets slow this down, right.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JACK&lt;/strong&gt; &amp;amp; &lt;strong&gt;JILL&lt;/strong&gt; were released as an experimental tool chain in the Android SDK  21.1.1 and recently got minor bug fixes in the recent release of Android SDK 21.1.2&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what exactly are they for  ?&lt;/strong&gt;
&lt;strong&gt;JACK&lt;/strong&gt; basically compiles your Java code directly to a .dex Dalvik Executable.
&lt;strong&gt;JILL&lt;/strong&gt; on the other hand translates any libraries you are referencing to a new Jack library file (.jack).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Whats the difference ?&lt;/strong&gt;
Glad you asked :)
The usual process of android compilation process is
1. Use the standard javac compiler to convert the source code to Java bytecode
2. Feed this bytecode to dex compiler to get the Dalvik bytecode&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JACK&lt;/strong&gt; eliminates the conversion to Java bytecode step and directly converts source code to Dalvik bytecode. During the same time it also handles any requested code minification (shrinking and/or obfuscation), previously handled by Proguard and then perform repackaging too.&lt;/p&gt;

&lt;p&gt;Now all this time, &lt;strong&gt;JACK&lt;/strong&gt; was working on you source code, right!
What if you have a library being referenced in the form of say a JAR?
&lt;strong&gt;JILL&lt;/strong&gt; takes care of that, by converting all libraries to Jack Library File (.jack) which can easily be merged by JACK during compilation into object code.
Basically the Android Gradle plugin and JACK collect any .jack library files, along with your source code, and compiles them into a set of dex files and further assembles them into an APK.&lt;/p&gt;

&lt;p&gt;The complete process explained in a diagram&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/jacksitesdiagram.png&#34; alt=&#34;jacksitesdiagram&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why all the hassle for compiler ?&lt;/strong&gt;
Google believes in optimizing the whole process of  compilation of android apps. The faster that happens the better, maybe involve incremental compilation for the same(still under development)! :D
Also due to the Oracle-Google dispute over using java , Google probably wants to move away from using javac and have its own compiler in place to convert source code to dalvik bytecode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you use the tool chain in your apps ?&lt;/strong&gt;
Good question! At the moment JACK &amp;amp; JILL are both in experimental phase.
So you specifically need to enable them in your build.gradle i.e. you need to set &lt;code&gt;useJack = true&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;android {
    ...
     buildToolsRevision &#39;24.0.1&#39;
     defaultConfig {
         // Enable the experimental Jack build tools.
         useJack = true
         }
    ...
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tools.android.com/tech-docs/jackandjill&#34;&gt;More Info at Android Tools Project Site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Downside ?&lt;/strong&gt;
As of now these support only Java 7 i.e no support for Java 8 :(
No Annotation processing :(&lt;/p&gt;

&lt;p&gt;Thats it for now.
Any questions are always welcome :D&lt;/p&gt;

&lt;p&gt;References&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://android-developers.blogspot.co.uk/2014/12/hello-world-meet-our-new-experimental.html&#34;&gt;Android Developer Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tools.android.com/tech-docs/jackandjill&#34;&gt;Android Tools Project Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Life without wires : ADB over WiFi</title>
      <link>http://crushingcode.github.io/life-without-wires-adb-over-wifi/</link>
      <pubDate>Thu, 09 Jul 2015 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/life-without-wires-adb-over-wifi/</guid>
      <description>

&lt;p&gt;Tired of being tied to your laptop/desktop while debugging your android apps ?
Well let me break it to you – You are NOT the FIRST person to do it.
Its a common practice to tether your device via a USB cable to the host machine and debug android apps.Well here is something for you that is going to set you free. Yes literally. You can run adb over WiFi (period)&lt;/p&gt;

&lt;p&gt;Yes , you read that right! Thats the secret solution(…ok not secret.. :p ) and setting it up is a piece of cake :P
Most people ask me why another post on this, well if you googled it you would come across a lot of information regarding the same but most of it is outdated or you would be using hit-and-trial method to get it working. I did some research on my own and found a way to get it working in the below steps.
I will walk you through the process of doing so in the most easiest way.
All you need is a USB cable (for the initial setup) and have your laptop/desktop and the devices connected to the same network (work on 99% cases)&lt;/p&gt;

&lt;h2 id=&#34;step-1&#34;&gt;Step 1&lt;/h2&gt;

&lt;p&gt;Connect your mobile device via USB and make sure usb debugging is on (you can do that via the developer options in your device).
Also connect to your Wifi.&lt;/p&gt;

&lt;h2 id=&#34;step-2&#34;&gt;Step 2&lt;/h2&gt;

&lt;p&gt;Open up the Terminal , provided you have the adb set in your PATH, type the following&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb devices
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this would list your device as connected over the USB&lt;/p&gt;

&lt;h2 id=&#34;step-3&#34;&gt;Step 3&lt;/h2&gt;

&lt;p&gt;To enable the wifi-debug-mode&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb tcpip 5555
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-4&#34;&gt;Step 4&lt;/h2&gt;

&lt;p&gt;Get your DEVICE-IP-ADDRESS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb shell netcfg | grep &#39;wlan0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will get something like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wlan0 UP 192.168.2.23/24 0x00001043 cc:c3:ea:ef:12:11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where 192.168.2.23 is your DEVICE-IP-ADDRESS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;you can simply on your device , go to&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Settings &amp;gt; About phone &amp;gt; Status&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;to view the IP address of your phone&lt;/p&gt;

&lt;h2 id=&#34;step-5&#34;&gt;Step 5&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT : Remove USB cable&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-6&#34;&gt;Step 6&lt;/h2&gt;

&lt;p&gt;Connect your device by typing in the below in the terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb connect DEVICE-IP-ADDRESS:5555
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-7&#34;&gt;Step 7&lt;/h2&gt;

&lt;p&gt;To confirm the connection just made, type in the terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb devices
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this should list your device as connected over the particular DEVICE-IP-ADDRESS
And you are done. Run/Debug your apps from your IDE in wireless mode.
Let the magic of wire-free-life begin.&lt;/p&gt;

&lt;h2 id=&#34;step-8&#34;&gt;Step 8&lt;/h2&gt;

&lt;p&gt;Did I mention that to switch back to USB mode you simply type in the below command in terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb usb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Things to Note:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you move into a different workspace and change WiFi networks, you simply repeat steps 5 and 6 . The steps 1 to 5 are used to set your device into wifi-debug mode.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The device will exit the wifi-debug mode when it restarts. So if your device restarts unfortunately, you will have to start over (from steps 1 to 6). So if you keep an eye on your battery and do not restart your device, you can live without cables for weeks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;
&lt;a href=&#34;http://developer.android.com/tools/help/adb.html&#34;&gt;Info about ADB&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>