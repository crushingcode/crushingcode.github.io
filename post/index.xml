<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Crushing C.O.D.E</title>
    <link>http://crushingcode.github.io/post/</link>
    <description>Recent content in Posts on Crushing C.O.D.E</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2015</copyright>
    <lastBuildDate>Sun, 17 Jul 2016 10:54:24 +0200</lastBuildDate>
    <atom:link href="http://crushingcode.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Guide to publishing your Android Library via MavenCentral</title>
      <link>http://crushingcode.github.io/publish-your-android-library-via-mavencentral/</link>
      <pubDate>Sun, 17 Jul 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/publish-your-android-library-via-mavencentral/</guid>
      <description>

&lt;p&gt;If you come from the java world, you would already be knowing about MavenCentral in a big way. MavenCentral is the central repository which hosts all the maven artifacts and one can reference them from anywhere in the world. Android artifacts can also be hosted on MavenCentral in a similar manner. Here I am going to document the process to publish an android library to MavenCentral, as I followed it.&lt;/p&gt;

&lt;p&gt;This post is second in parts of a series. If you didnot read the others in series , go have a look&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jcenter/&#34;&gt;Guide to publishing your Android Library via Jcenter/Bintray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;Guide to publishing your Android Library via MavenCentral&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Guide to publishing your Android Library via JitPack (..todo)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first step need you to create and build your Android &amp;ldquo;Awesome&amp;rdquo; Library and can be read in the &lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jcenter/&#34;&gt;first post of this series here&lt;/a&gt;. If you have not done so , then please go ahead and read it up.&lt;/p&gt;

&lt;p&gt;Assuming you already have your Android &amp;ldquo;Awesome&amp;rdquo; Library built , I will jump directly to steps involved in publishing your library to MavenCentral&lt;/p&gt;

&lt;h5 id=&#34;publishing-your-android-awesome-library:2b50d16037b146983527a8651ff29e32&#34;&gt;Publishing your Android &amp;ldquo;Awesome&amp;rdquo; Library&lt;/h5&gt;

&lt;p&gt;Setup &lt;a href=&#34;http://blog.ghostinthemachines.com/2015/03/01/how-to-use-gpg-command-line/&#34;&gt;GPG&lt;/a&gt; and generate yourself a key.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now list your gpg keys&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ gpg --list-keys
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;There the first line will be like pub XXXXX/YYYYYYYY &lt;date&gt;. Remember that ‘YYYYYYYY’ part, it’s you key ID.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Next, publish your keys&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ gpg --keyserver hkp://keyserver.ubuntu.com --send-keys YYYYYYYY
  $ gpg --keyserver hkp://pgp.mit.edu --send-keys YYYYYYYY
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To ensure your keys were published&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ gpg --keyserver hkp://pgp.mit.edu --search-keys
  username@example.com # Use your email
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setup Sonatype account&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a JIRA account on &lt;a href=&#34;https://issues.sonatype.org/secure/Signup!default.jspa&#34;&gt;Sonatype&lt;/a&gt;
&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/signup.jpeg&#34; alt=&#34;signup&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and Login
  &lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/login.jpeg&#34; alt=&#34;login&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Once you are logged in, &lt;a href=&#34;https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;amp;pid=10134&#34;&gt;create a new issue&lt;/a&gt;
&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/create.jpeg&#34; alt=&#34;create&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill out the form as below&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project : Community Support - Open source&lt;/li&gt;
&lt;li&gt;Issue Type : New Project&lt;/li&gt;
&lt;li&gt;Group Id : com.github.github_username&lt;/li&gt;
&lt;li&gt;Project URL : &lt;a href=&#34;https://github.com/github_username/project_name&#34;&gt;https://github.com/github_username/project_name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SCM url : &lt;a href=&#34;https://github.com/github_username/project_name.git&#34;&gt;https://github.com/github_username/project_name.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Username : sonatype_username&lt;/li&gt;
&lt;li&gt;Already Synced to Central : No&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/createissue.jpeg&#34; alt=&#34;createissue&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/createissue2.jpeg&#34; alt=&#34;createissue2&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next hit &lt;strong&gt;Create&lt;/strong&gt;. After that, it can take up to 2 business days to process your issue. Then you will receive a confirmation that your configuration has been prepared and you can publish your library.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; : Do not deploy until after you have received an e-mail notice indicating that the ticket is Resolved.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/approved.jpeg&#34; alt=&#34;approved&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Update &lt;code&gt;gradle.properties&lt;/code&gt; on your local machine  at location &lt;code&gt;~/.gradle/gradle.properties&lt;/code&gt; and include&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; NEXUS_USERNAME=sonatype_username
 NEXUS_PASSWORD=sonatype_password
 signing.keyId=gpg_key_id
 signing.password=gpg_password
 signing.secretKeyRingFile=/Users/username/.gnupg/secring.gpg
 org.gradle.daemon=true
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;IMPORTANT: Steps for setting up your sonatype account up till here are required only once. The steps after these are required whenever publishing your android library, even if its a new one. Just remember to configure it well in your gradle.properties&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;add-the-plugin-by-chris-banes-to-your-library-s-build-gradle:2b50d16037b146983527a8651ff29e32&#34;&gt;Add the plugin by Chris Banes to your library&amp;rsquo;s &lt;code&gt;build.gradle&lt;/code&gt;.&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE:  Below is a &lt;a href=&#34;https://github.com/nisrulz/gradle-mvn-push&#34;&gt;fork&lt;/a&gt; of the &lt;a href=&#34;https://github.com/chrisbanes/gradle-mvn-push&#34;&gt;original script&lt;/a&gt; written by Chris Banes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;apply from: &#39;https://raw.github.com/nisrulz/gradle-mvn-push/master/gradle-mvn-push.gradle&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and define the required variables in the &lt;code&gt;gradle.properties&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Properties used by gradle maven-push plugin
VERSION_NAME=1.0.0
VERSION_CODE=1
POM_NAME=&amp;lt;Library_Name&amp;gt;
POM_ARTIFACT_ID=&amp;lt;library_name_smallcaps&amp;gt;

POM_DESCRIPTION=&amp;lt;library_description&amp;gt;
POM_URL=https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;
POM_SCM_URL=https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;
POM_SCM_CONNECTION=scm:git@github.com:&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;.git
POM_SCM_DEV_CONNECTION=scm:git@github.com:&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;.git
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Run in terminal to publish your artifacts&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  ./gradlew build clean uploadArchive
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Login into &lt;a href=&#34;https://oss.sonatype.org/#stagingRepositories&#34;&gt;Nexus Repository Console&lt;/a&gt; and search for your package name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/nexusrepo.jpeg&#34; alt=&#34;nexusrepo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/close.jpeg&#34; alt=&#34;close&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Close the staged artifact.[wait]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Release the closed artifact (keep drop artifact selected).[wait]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Wait for some hours before everything gets synced with MavenCentral.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;using-your-android-awesome-library-in-other-projects:2b50d16037b146983527a8651ff29e32&#34;&gt;Using your Android &amp;ldquo;Awesome&amp;rdquo; Library in other projects&lt;/h5&gt;

&lt;p&gt;Your code is available through MavenCentral if you have received the mail with confirmation&lt;/p&gt;

&lt;p&gt;You can use the lib now as follows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
    compile &#39;&amp;lt;group_name&amp;gt;:&amp;lt;artifact_name&amp;gt;:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;i.e for the sample lib in this repo , &lt;code&gt;awesomelib&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
      compile &#39;com.github.nisrulz:awesomelib:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Let the world know of your &lt;strong&gt;AwesomeLib&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Add a readme that explains how to integrate and use your Awesome library&lt;/li&gt;
&lt;li&gt;Add a license block as in this repo&lt;/li&gt;
&lt;li&gt;Also include a badge of MavenCentral in your readme&lt;/li&gt;
&lt;li&gt;Promote your lib on social media so that others can know about it.&lt;/li&gt;
&lt;li&gt;Always add a working sample app in your project that demonstrates your library in use.&lt;/li&gt;
&lt;li&gt;Add screenshots if possible in your readme.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The code for the AwesomeLibrary and this guide itself is open sourced and available on &lt;a href=&#34;https://github.com/nisrulz/UploadToMavenCentral&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Star it or just fork it to use it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guide to publishing your Android Library via Jcenter/Bintray</title>
      <link>http://crushingcode.github.io/publish-your-android-library-via-jcenter/</link>
      <pubDate>Tue, 12 Jul 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/publish-your-android-library-via-jcenter/</guid>
      <description>

&lt;p&gt;Developers are a different kind of people altogether. &lt;strong&gt;They tend to be lazy but strive to be super efficient at the same time&lt;/strong&gt;.
A lot of this can be seen in the Android world where a certain library pops up everyday to solve a specific problem or  to make the complex processes simpler.&lt;/p&gt;

&lt;p&gt;I have a certain knack for re-using code blocks just to avoid repeative tasks and to facilitate this I usually end up converting those codeblocks into an android library.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But what if I wanted to share my android library with the world?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well in a nutshell the steps to follow would be as below :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all I need to open source the andorid library, which should be easy as you can push it to &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; or any other public git repository.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next I need to push the android library as a maven artifact (aar/jar with a POM) to all of the or one of the below central repositories&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bintray.com/&#34;&gt;JCenter/Bintray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://search.maven.org/&#34;&gt;Maven Central&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jitpack.io/&#34;&gt;Jitpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will walkthrough the process of publishing to each if these central repositories in the upcoming posts of this series.&lt;/p&gt;

&lt;p&gt;For now lets lookup the steps to publish your android library to JCenter/Bintray.&lt;/p&gt;

&lt;h5 id=&#34;creating-your-android-awesome-library:3aca4bb9a1be907ad816749bc422b732&#34;&gt;Creating your Android &amp;ldquo;Awesome&amp;rdquo; Library&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;You can skip to the next part if you already have this built&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Create an Android project or open an existing one in &lt;a href=&#34;https://en.wikipedia.org/wiki/Android_Studio&#34;&gt;Android Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Init the project with git and also create a repo on Github for the same. Each step here onwards represent a commit and should be pushed to github.&lt;/li&gt;
&lt;li&gt;Create and add a new module and choose &lt;code&gt;Android Library&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Goto &lt;code&gt;File&amp;gt;New&amp;gt;New Module..&lt;/code&gt; and select &lt;code&gt;Android Library&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/newmodule.jpeg&#34; alt=&#34;newmodule&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/newlib.jpeg&#34; alt=&#34;newlib&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/newlibinfo.jpeg&#34; alt=&#34;newlibinfo&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement your library code inside the library module you created in the last step.&lt;/li&gt;
&lt;li&gt;Next add the library module as a dependency to the app module.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Goto &lt;code&gt;File&amp;gt;Project Structure..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;app&lt;/code&gt; module in the sidebar&lt;/li&gt;
&lt;li&gt;Select the &lt;code&gt;Dependencies&lt;/code&gt; tab&lt;/li&gt;
&lt;li&gt;At the bottom is a &lt;code&gt;+&lt;/code&gt; icon, click that and select &lt;code&gt;Module dependency&lt;/code&gt; and select your &lt;code&gt;library&lt;/code&gt; module.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;ok&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/project.jpeg&#34; alt=&#34;project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/prjstruct.jpeg&#34; alt=&#34;prjstruct&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/addmodule.jpeg&#34; alt=&#34;addmodule&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;publishing-your-android-awesome-library:3aca4bb9a1be907ad816749bc422b732&#34;&gt;Publishing your Android &amp;ldquo;Awesome&amp;rdquo; Library&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Once project is synced, add the required plugins to classpath in &lt;code&gt;build.gradle&lt;/code&gt; file at root project level, as shown below&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt; dependencies {
    classpath &#39;com.android.tools.build:gradle:2.1.2&#39;
    ..
    ..
    // Required plugins added to classpath to facilitate pushing to Jcenter/Bintray
    classpath &#39;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4&#39;
    classpath &#39;com.github.dcendents:android-maven-gradle-plugin:1.3&#39;
    ..
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Next, apply the &lt;code&gt;bintray&lt;/code&gt; and &lt;code&gt;install&lt;/code&gt; plugins at the bottom of build.gradle file at library module level. Also add the ext variable with required information as shown below&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt; apply plugin: &#39;com.android.library&#39;

 ext {
   bintrayRepo = &#39;maven&#39;
   bintrayName = &#39;awesomelib&#39;   // Has to be same as your library module name

   publishedGroupId = &#39;com.github.nisrulz&#39;
   libraryName = &#39;AwesomeLib&#39;
   artifact = &#39;awesomelib&#39;     // Has to be same as your library module name

   libraryDescription = &#39;Android Library to make any text into Toast with Awesome prepended to the text&#39;

   // Your github repo link
   siteUrl = &#39;https://github.com/nisrulz/UploadToBintray&#39;
   gitUrl = &#39;https://github.com/nisrulz/UploadToBintray.git&#39;

   libraryVersion = &#39;1.0&#39;

   developerId = &#39;nisrulz&#39;
   developerName = &#39;Nishant Srivastava&#39;
   developerEmail = &#39;nisrulz@gmail.com&#39;

   licenseName = &#39;The Apache Software License, Version 2.0&#39;
   licenseUrl = &#39;http://www.apache.org/licenses/LICENSE-2.0.txt&#39;
   allLicenses = [&amp;quot;Apache-2.0&amp;quot;]
 }

 ..
 ..

 // Place it at the end of the file
 apply from: &#39;https://raw.githubusercontent.com/nisrulz/JCenter/master/installv1.gradle&#39;
 apply from: &#39;https://raw.githubusercontent.com/nisrulz/JCenter/master/bintrayv1.gradle&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Edit your &lt;code&gt;local.properties&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;bintray.user=&amp;lt;your_bintray_username&amp;gt;
bintray.apikey=&amp;lt;your_bintray_apikey&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now lets setup Bintray before we can push our artifact to it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Register for an account on &lt;a href=&#34;https://bintray.com/&#34;&gt;bintray.com&lt;/a&gt; and click the activation email they send you.&lt;/li&gt;
&lt;li&gt;Add a new Maven repository and click &lt;strong&gt;Create New Package&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;You should now have a maven repository. For instance:
&lt;code&gt;https://bintray.com/nisrulz/maven&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now once you have your maven repo setup , click on &lt;strong&gt;Edit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/edit.jpeg&#34; alt=&#34;edit&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and see that you have selected the option &lt;code&gt;GPG sign uploaded files using Bintray&#39;s public/private key pair.&lt;/code&gt; and then click &lt;strong&gt;Update&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/gpg.jpeg&#34; alt=&#34;gpg&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once everything is configured, run the below in your terminal in your root of the project&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;./gradlew install bintrayUpload
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Now once your project is up on bintray, simply hit &lt;strong&gt;Add to Jcenter&lt;/strong&gt; button to sync with JCenter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/addtojcenter.jpeg&#34; alt=&#34;addtojcenter&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;using-your-android-awesome-library-in-other-projects:3aca4bb9a1be907ad816749bc422b732&#34;&gt;Using your Android &amp;ldquo;Awesome&amp;rdquo; Library in other projects&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Your code is available through the private repo at bintray&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;repositories {
   jcenter()
   maven { url &#39;https://dl.bintray.com/&amp;lt;bintray_username&amp;gt;/maven&#39; }
}
dependencies {
  compile &#39;com.github.&amp;lt;bintray_username&amp;gt;:&amp;lt;library_module&amp;gt;:1.0&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;i.e for the sample lib in this repo , &lt;code&gt;awesomelib&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;repositories {
   jcenter()
   maven { url &#39;https://dl.bintray.com/nisrulz/maven&#39; }
}
dependencies {
  compile &#39;com.github.nisrulz:awesomelib:1.0&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Your code is available through JCenter if you have received the mail with confirmation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/finalmail.jpeg&#34; alt=&#34;finalmail&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Few things to note when you received the final email.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Goto your maven repo at bintray and verify that you have Jcenter under the &lt;strong&gt;Linked to&lt;/strong&gt; section&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/linked.jpeg&#34; alt=&#34;linked&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now you would also want to sync the artifact to &lt;a href=&#34;https://search.maven.org/&#34;&gt;MavenCentral&lt;/a&gt;, for that you need to hit the &lt;strong&gt;Maven Central&lt;/strong&gt; tab and sync&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/synctomaven.jpeg&#34; alt=&#34;synctomaven&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you hit sync you would see as below. Wait for few hours for the sync to occur.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/syncstatus.jpeg&#34; alt=&#34;syncstatus&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can use the lib now as follows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
    compile &#39;com.github.&amp;lt;bintray_username&amp;gt;:&amp;lt;library_module&amp;gt;:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;i.e for the sample lib in this repo , &lt;code&gt;awesomelib&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
      compile &#39;com.github.nisrulz:awesomelib:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Let the world know of your &lt;strong&gt;AwesomeLib&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Add a readme that explains how to integrate and use your Awesome library&lt;/li&gt;
&lt;li&gt;Add a license block as in this repo&lt;/li&gt;
&lt;li&gt;Also include the Bintray badge provided by Bintray in your readme
&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/badge.jpeg&#34; alt=&#34;badge&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Promote your lib on social media so that others can know about it.&lt;/li&gt;
&lt;li&gt;Always add a working sample app in your project that demonstrates your library in use.&lt;/li&gt;
&lt;li&gt;Add screenshots if possible in your readme.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The code for the AwesomeLibrary and this guide itself is open sourced and available on &lt;a href=&#34;https://github.com/nisrulz/UploadToBintray&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;bintray&lt;/code&gt; and &lt;code&gt;install&lt;/code&gt; plugins are also available on &lt;a href=&#34;https://github.com/nisrulz/JCenter&#34;&gt;github&lt;/a&gt;. You may fork it and use it in your namespace.&lt;/p&gt;

&lt;p&gt;Star it or just fork it to use it.&lt;/p&gt;

&lt;p&gt;This post is first in parts of a series&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;Guide to publishing your Android Library via Jcenter/Bintray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Guide to publishing your Android Library via MavenCentral (..todo)&lt;/li&gt;
&lt;li&gt;Guide to publishing your Android Library via JitPack (..todo)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Fun Project : Javadoc-Themer</title>
      <link>http://crushingcode.github.io/a-splash-of-colors-to-your-boring-javadocs/</link>
      <pubDate>Sun, 15 May 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/a-splash-of-colors-to-your-boring-javadocs/</guid>
      <description>&lt;p&gt;I am pretty sure you would agree to the fact that the usual javadoc is not a something everyone likes. The colors are what makes it superrrrrrr boring. Yeah , I actually despise those weird colors and the fact that its been around for so long , made me think how to solve this. Also if you try looking it up on the internet there aren&amp;rsquo;t any solutions that basically solved this in a programmatic way.&lt;/p&gt;

&lt;p&gt;Well look no more&amp;hellip;. TADAAAAAAA !!&lt;/p&gt;

&lt;p&gt;Introducing &lt;strong&gt;&lt;a href=&#34;http://javadocthemer.crushingcode.co/&#34;&gt;Javadoc-Themer&lt;/a&gt;&lt;/strong&gt; (..insert suppperrr happy smiley here).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/javadocthemer/javadocthemer.png&#34; alt=&#34;javadocthemer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So what does this do actually ? Well it basically makes it easy for you to control what colors your generated javadoc uses.&lt;/p&gt;

&lt;p&gt;Using Javadoc-Themer you can choose the colors for each part of your javadoc and generate a stylesheet of it. Next you provide the stylesheet as an argument while generating your javadocs and there you have a better looking javadoc (^_^)&lt;/p&gt;

&lt;p&gt;Refer to &lt;strong&gt;How to&lt;/strong&gt; section in the &lt;strong&gt;Javadoc-Themer&lt;/strong&gt; for more information.&lt;/p&gt;

&lt;p&gt;Here is a comparison of both&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/javadocthemer/javadocdiff.png&#34; alt=&#34;javadocdiff&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The code for Javadoc-Themer is open sourced on &lt;a href=&#34;https://github.com/nisrulz/javadoc-themer&#34;&gt;github&lt;/a&gt; and you can find the webapp &lt;a href=&#34;http://javadocthemer.crushingcode.co/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Star it, fork it or simply use it to build better looking javadocs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The curious case of dependency conflicts</title>
      <link>http://crushingcode.github.io/the-curious-case-of-dependency-conflicts/</link>
      <pubDate>Mon, 02 May 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/the-curious-case-of-dependency-conflicts/</guid>
      <description>

&lt;p&gt;If I were to ask a question to a room filled with android developers&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;How many of you have been in that place of sheer helplessness and panic when your gradle build fails because of a version conflict in dependencies?&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;..I am pretty sure a lot of them would raise their hand or agree to being in that state and the very first action would be to hop onto stackoverflow and search for possible solutions in this type of a situation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/depconflicts.jpg&#34; alt=&#34;depconflicts&#34; /&gt;
&lt;!-- Image taken from freepik.com and all credit goes to the creator of it --&gt;&lt;/p&gt;

&lt;p&gt;We all have been there and we all have experienced it. The problem is a result of each library following a completely different development lifecycle and using a different version of a public api, which by far all means is not the problem which needs to be rectified.
You can&amp;rsquo;t just ask all android library developers/team maintaining it to update the library to use either the lastest or some specific version of a dependency just because it works with another library and/or is causing a conflict when you have both of them in your project.&lt;/p&gt;

&lt;p&gt;So what exactly are the options available to us..&lt;/p&gt;

&lt;p&gt;I stumbled upon such a situation sometime back in the last month or so and as the whole journey to fix this type of conflict was suprisingly less documented on the web , here is my record of how I solved it.&lt;/p&gt;

&lt;p&gt;Now the process I followed may not be the best one out there but it sure did led me to hunt down the solution along with digging out some pretty neat tricks possible using &lt;strong&gt;&lt;em&gt;Gradle Build System&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Before we begin lets get acquinted with some terms we would be using a lot in this whole writeup.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gradle&lt;/strong&gt; - Build system for android&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependency&lt;/strong&gt; - Libraries such as support libraries in your build.gradle&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;transitive dependency&lt;/strong&gt; - Libraries on which dependencies defined in your project depend on&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;conflict&lt;/strong&gt; - incompatible or at variance/clash&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gradlew&lt;/strong&gt; - gradle wrapper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The important term here for us (in regards to our problem of conflicting dependencies) is &lt;strong&gt;&lt;em&gt;transitive dependency&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You see when you have multiple dependencies defined in your build.gradle, you can never be sure of what do those dependencies further depend on.&lt;/p&gt;

&lt;p&gt;Lets take a simple example&lt;/p&gt;

&lt;p&gt;Say you have 3 android libraries defined under your build.gradle for the app , namely &lt;strong&gt;libA&lt;/strong&gt;, &lt;strong&gt;libB&lt;/strong&gt; and &lt;strong&gt;libC&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;
dependencies {
    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])
    compile &#39;com.company1.sdk:libA:1.0.2&#39;
    compile &#39;com.company2.sdk:libB:2.0.3&#39;
    compile &#39;com.company3.sdk:libC:3.0.4&#39;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now for you as an android dev the only dependencies in view are &lt;strong&gt;libA&lt;/strong&gt;, &lt;strong&gt;libB&lt;/strong&gt; and &lt;strong&gt;libC&lt;/strong&gt;. You have no idea what these android libraries furthur depend upon.&lt;/p&gt;

&lt;p&gt;The situation which might cause a conflict would be if &lt;strong&gt;libA&lt;/strong&gt; depends on say &lt;strong&gt;libD&lt;/strong&gt; (version 4.0.4) and &lt;strong&gt;libC&lt;/strong&gt; depends on say &lt;strong&gt;libD&lt;/strong&gt; (version 4.0.2).&lt;/p&gt;

&lt;p&gt;Now by default &lt;em&gt;Gradle&lt;/em&gt; would resolve to the latest version of &lt;strong&gt;libD&lt;/strong&gt;. But this is where the problem actually lies.&lt;/p&gt;

&lt;p&gt;You see when you build your code it only says there is conflict in the &lt;strong&gt;libD&lt;/strong&gt; dependency. Thats all.&lt;/p&gt;

&lt;p&gt;So how do you hunt it down.&lt;/p&gt;

&lt;p&gt;well there are a few ways you can do that, the easiest one uses the &lt;code&gt;gradle wrapper&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-1:ef486a40d2d89dcc8b652c977990e671&#34;&gt;&lt;strong&gt;STEP 1&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Look for all android dependencies being downloaded as part of the build process.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./gradlew androidDependencies
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..you should get a graph like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...
release
+--- com.company1.sdk:libA:1.0.2
|    +--- com.company4.sdk:libD:4.0.4
+--- com.company2.sdk:libB:2.0.3
|
+--- com.company3.sdk:libA:3.0.4
     +--- com.company4.sdk:libD:4.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..hmm..its becoming a bit more clear now. We can see which version of transitive dependencies are being pulled by which dependency.&lt;/p&gt;

&lt;p&gt;So what exactly happened here?&lt;/p&gt;

&lt;p&gt;The declared dependencies inside your build.gradle file actually download some more libraries on their own since its integral to their functioning. Transitive dependency defined for a declared library could conflict with another transitive dependeny defined for another declared library in version.&lt;/p&gt;

&lt;p&gt;Whats wrong here, you ask  ?  When a library was written to work with older version of the &lt;strong&gt;&lt;em&gt;transitive  dependency&lt;/em&gt;&lt;/strong&gt; then it will basically break if provided with a higher version of the same, probably because the API changed or some classes were removed/renamed (between version updates)from what it was coded to reference and work with.&lt;/p&gt;

&lt;p&gt;Well if you are able to find your problem then you can jump to the solution directly, but if you are still looking for answers then read on.&lt;/p&gt;

&lt;p&gt;Looks like you are still in trouble!&lt;/p&gt;

&lt;p&gt;Considering that you still cannot find the conflicting dependencies and their versions and assuming that its not conflicting from a dependency declared in the build.gradle file but (..probably) introduced by some gradle-plugin defined, we will do a more verbose checkup which is what STEP 2 is about&lt;/p&gt;

&lt;h3 id=&#34;step-2:ef486a40d2d89dcc8b652c977990e671&#34;&gt;&lt;strong&gt;STEP 2&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Check the complete stacktrace of the build process using &lt;code&gt;--info&lt;/code&gt; and &lt;code&gt;--stacktrace&lt;/code&gt; flags passed as arguments&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./gradlew build --info --stacktrace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should give you a complete log of everything and where exactly the build failed.You can find out the version conflicts and a lot more details in this step.&lt;/p&gt;

&lt;p&gt;In my case this was the very case where I was having a conflict on annotations library introduced by the findbugs gradle plugin.&lt;/p&gt;

&lt;p&gt;Well, ok so this is a problem we have got. Whats the solution ? how do you go against the default behaviour of gradle and resolve to a lower version when a conflict occurs ?&lt;/p&gt;

&lt;h3 id=&#34;solution:ef486a40d2d89dcc8b652c977990e671&#34;&gt;&lt;strong&gt;SOLUTION&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Well this is where the flexibility of Gradle comes into view. This is not commonly known but is a very useful functionality tucked away into the &lt;a href=&#34;https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html#org.gradle.api.artifacts.ResolutionStrategy:failOnVersionConflict(&#34;&gt;api docs&lt;/a&gt;) for gradle.&lt;/p&gt;

&lt;p&gt;The very first thing that you should do is, enable &lt;code&gt;failOnVersionConflict&lt;/code&gt; flag in gradle on version conflicts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;
configurations.all {
  resolutionStrategy.failOnVersionConflict()
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should give you more idea about where in your code are version conflicts occuring which were getting implicitly resolved by gradle.&lt;/p&gt;

&lt;p&gt;Secondly, you can force gradle to resolve to the lower version&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;configurations.all {
  resolutionStrategy.force &#39;com.company4.sdk:libD:4.0.2&#39;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This changes the default behaviour of gradle.&lt;/p&gt;

&lt;p&gt;But wait! Resoltion strategy is still causing parts of the same dependency to conflict. HELP!&lt;/p&gt;

&lt;p&gt;Well only in that condition you should try and completely replace the whole module.&lt;/p&gt;

&lt;p&gt;Ho do you do it ? by including the below into your &lt;code&gt;build.gradle&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;// add dependency substitution rules
configurations.all {
  resolutionStrategy.dependencySubstitution {
    // Substitute one module dependency for another
    substitute module(&#39;com.company4.sdk:libD:4.0.4&#39;) with module(&#39;com.company4.sdk:libD:4.0.2&#39;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE : dependencySubstitution is an incubating functionality and may change in a future version of Gradle
As of writting this post the latest Gradle Version is 2.13 in which this is available.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thats pretty neat , isn&amp;rsquo;t it.&lt;/p&gt;

&lt;p&gt;I am pretty sure this would enable you to find the conflicts and solve it too.&lt;/p&gt;

&lt;p&gt;This also goes with the disclaimer that trying to resolve dependency conflicts this way is not the preferred way. You should always try to be using the latest version of the dependencies as well as maintain your library to use the same. This post basically defines the process to enable you to try and figure out why your build is failing and how to bypass it for the time being.&lt;/p&gt;

&lt;p&gt;Thats all for today folks.
Keep crushing code until next post :)&lt;/p&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html#org.gradle.api.artifacts.ResolutionStrategy:failOnVersionConflict(&#34;&gt;Gradle Docs&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Own a maven repository, like a boss! – Part 2</title>
      <link>http://crushingcode.github.io/own-a-maven-repository-like-a-bosspart-2/</link>
      <pubDate>Tue, 16 Feb 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/own-a-maven-repository-like-a-bosspart-2/</guid>
      <description>

&lt;p&gt;The world of artifacts and the way they make the life of a developer simpler, fascinates me to a great extent.&lt;/p&gt;

&lt;p&gt;For the same reason I have gone through a lot of good articles online, which explain how the whole process works. However most of the documentation is either not up to date or lacks proper explanation. Personally all I care about is how does it work and how can I make it simpler. Hence I set out to try and implement the whole process on my own.&lt;/p&gt;

&lt;p&gt;We have already covered in &lt;a href=&#34;http://crushingcode.github.io/own-a-maven-repository-like-a-boss–part-1&#34;&gt;Part-1&lt;/a&gt; of this series the process of how to create a maven repository hosted on github and this part builds upon that.&lt;/p&gt;

&lt;p&gt;The next part is actually the simpler step - To consume these artifacts which are hosted on a maven repository in your android project.&lt;/p&gt;

&lt;p&gt;The basic steps required are as follows :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&#34;step-1:2694c5e86a3a8f207d205bd191869089&#34;&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Goto your maven repository on github and open up your releases folder via the browser.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;step-2:2694c5e86a3a8f207d205bd191869089&#34;&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Copy the URL in the address bar. It should look like below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/&amp;lt;username&amp;gt;/&amp;lt;mavenrepo&amp;gt;/tree/master/releases
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;step-3:2694c5e86a3a8f207d205bd191869089&#34;&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Now replace the &lt;code&gt;tree&lt;/code&gt; word in the url with &lt;code&gt;raw&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# From
https://github.com/&amp;lt;username&amp;gt;/&amp;lt;mavenrepo&amp;gt;/tree/master/releases

# to
https://github.com/&amp;lt;username&amp;gt;/&amp;lt;mavenrepo&amp;gt;/raw/master/releases

# and copy this new url.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;step-4:2694c5e86a3a8f207d205bd191869089&#34;&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Now goto your Android Project and open up your &lt;code&gt;build.gradle&lt;/code&gt; file for the module where you want to include the artifact (i.e app/library).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;step-5:2694c5e86a3a8f207d205bd191869089&#34;&gt;&lt;strong&gt;Step 5&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Now copy the below to the &lt;code&gt;build.gradle&lt;/code&gt; file with the appropriate url for the maven repository as obtained in &lt;em&gt;Step-3&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;repositories {
maven {
    url &amp;quot;https://github.com/&amp;lt;username&amp;gt;/&amp;lt;mavenrepo&amp;gt;/raw/master/releases&amp;quot;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;step-6:2694c5e86a3a8f207d205bd191869089&#34;&gt;&lt;strong&gt;Step 6&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Next , add the dependency as you would normally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dependencies {
compile &#39;com.github.&amp;lt;username&amp;gt;:&amp;lt;artifact_name&amp;gt;:&amp;lt;version&amp;gt;&#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;where &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; has to be of the form  &lt;code&gt;&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.&amp;lt;patch&amp;gt;&lt;/code&gt; i.e 1.0.0&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;in-summary:2694c5e86a3a8f207d205bd191869089&#34;&gt;In Summary&lt;/h2&gt;

&lt;p&gt;You just learned how to use artifacts from your own github account as a maven repository and in essence bypassed the complexity of getting artifacts into the Maven Central/Jcenter.&lt;/p&gt;

&lt;p&gt;For reference you can have a look at my own &lt;a href=&#34;http://crushingcode.co/mavenrepo/&#34;&gt;maven repository&lt;/a&gt; on &lt;a href=&#34;https://github.com/nisrulz/mavenrepo&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However as you would see this is a very limiting way of accessing artifacts.
The developer is supposed to include your &lt;code&gt;maven url&lt;/code&gt; under &lt;code&gt;repository&lt;/code&gt; section which is &amp;hellip;a bit of extra work , right ?&lt;/p&gt;

&lt;p&gt;As a developer we are all very lazy. We want to cut this extra work down to only compiling our artifact as a dependency with a single line of code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compile &#39;com.github.&amp;lt;username&amp;gt;:&amp;lt;artifact_name&amp;gt;:&amp;lt;version&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well this is where Maven Central/Jcenter step in.
A lot of information on them in the next part of this series.&lt;/p&gt;

&lt;p&gt;Till then keep calm and crush c.o.d.e !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Own a maven repository, like a boss! – Part 1</title>
      <link>http://crushingcode.github.io/own-a-maven-repository-like-a-bosspart-1/</link>
      <pubDate>Mon, 03 Aug 2015 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/own-a-maven-repository-like-a-bosspart-1/</guid>
      <description>

&lt;p&gt;Have you ever thought how the central repository works like Maven Central or JCenter?
Is it possible to own one for yourself?
Do you want to host your artifacts in your own private repository?&lt;/p&gt;

&lt;p&gt;If your answer is &lt;strong&gt;YES&lt;/strong&gt;, well you are in the right place. I am going to walk you through basic steps involved in setting up your own maven repository where you can publish your artifacts, using all but your terminal, git and a public remote repository hosting service of your choice ( i.e Github or Bitbucket ).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For those of you who want to jump into the code right away , here is the gist&lt;/strong&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/nisrulz/efb1654eaeb8930591c6.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;For the rest of you who want a complete explanation, lets dive in&lt;/strong&gt;..&lt;/p&gt;

&lt;h2 id=&#34;terms:f84ad0192643eed3ea96b10c231ee903&#34;&gt;Terms&lt;/h2&gt;

&lt;p&gt;Before we start, I want you to get acquainted with some of the terms:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Artifacts&lt;/strong&gt; : An artifact is a file, usually a JAR, that gets deployed to a Maven repository. A Maven build produces one or more artifacts, such as a compiled JAR and a “sources” JAR. Each artifact has a group ID (usually a reversed domain name, like com.example.foo), an artifact ID (just a name), and a version string. The three together uniquely identify the artifact. A project’s dependencies are specified as artifacts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Maven&lt;/strong&gt; : A tool that can be used for building and managing any Java-based project.(&lt;a href=&#34;https://maven.apache.org/what-is-maven.html&#34;&gt;more info&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I would like to mention that having your artifacts in the Maven Central and JCenter has a plethora of advantages which you will never be able to get when using the below method.
Lets just say its just another method to host and publish your artifacts without having to go through the process of publishing it to central repository.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Prerequisites&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;git (&lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;Install guide&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;maven (&lt;a href=&#34;https://maven.apache.org/install.html&#34;&gt;Install guide&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/&#34;&gt;Bitbucket&lt;/a&gt; or &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; account&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JAR/AAR/WAR file to be published to your maven repository&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;….Okay…if you made it till this point, everything is going to be a piece of cake from here onwards :P promise :)&lt;/p&gt;

&lt;h2 id=&#34;steps:f84ad0192643eed3ea96b10c231ee903&#34;&gt;Steps&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; : Fire up your terminal/command prompt
&lt;strong&gt;Step 2&lt;/strong&gt; : Create a directory where you will sync your maven artifacts to, lets say its called mavenrepo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir mavenrepo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and change into the mavenrepo directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd mavenrepo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt; : Once inside the directory, initialize it with git&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt; : Create a repository named &lt;strong&gt;mavenrepo (git remote)&lt;/strong&gt; at Github/Bitbucket and add it to your &lt;strong&gt;mavenrepo (git local)&lt;/strong&gt; directory as a remote repository named &lt;strong&gt;origin&lt;/strong&gt; ( here i am adding a github repo)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add origin https://github.com/&amp;lt;username&amp;gt;/mavenrepo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note : you can get the url from Github under the settings tab when at your repository page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/copygithuburl.png&#34; alt=&#34;copygithuburl&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt; :  Create 2 directories under mavenrepo, namely releases and snapshots&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir releases snapshots
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt; : Create README.md under each sub directory, releases and snapshots
Note: This step is required since git will not push empty directories, so we add empty README.md files :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;touch releases/README.md
touch snapshots/README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 7&lt;/strong&gt; : Stage all the changed files under git, using the below command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 8&lt;/strong&gt; : Commit with a message&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -m &amp;quot;Initial Setup&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 9&lt;/strong&gt; : Push to origin&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thats It!
You have a working maven repository :D&lt;/p&gt;

&lt;p&gt;Okay, this is cool …I have a working maven repository ..hmm..but something is missing ….wait a second, where is the artifact that i would be pushing to this maven repository ??
To be specific, how do i generate the maven artifact ?
Simple,&lt;/p&gt;

&lt;h2 id=&#34;generating-a-maven-artifact:f84ad0192643eed3ea96b10c231ee903&#34;&gt;Generating a maven artifact&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 10&lt;/strong&gt; : Generate a maven artifact using the below command in terminal/command prompt (provided you already have the maven installed)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn clean org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file -DgroupId=com.company.id -DartifactId=artificatid -Dversion=1.0.0 -Dpackaging=aar -Dfile=artifact.aar -DlocalRepositoryPath=./mavenrepo/releases/aar -DgeneratePom=true -DcreateChecksum=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;thats a lot to take in but thats just one single command that does it all.&lt;/p&gt;

&lt;p&gt;Lets break it down into parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mvn&lt;/strong&gt; Maven build tool command&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;clean&lt;/strong&gt; Command that attempts to clean a project’s working directory of the files that were generated at build-time&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file&lt;/strong&gt; Command to install the artifact into the maven repository via using a specific maven plugin, here being v2.5.2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-DgroupId&lt;/strong&gt; Specify your package name here i.e.com.company.id&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-DartifactId&lt;/strong&gt; Specify the name of the artifact&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-Dversion&lt;/strong&gt; Specify the version of the artifact&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-Dpackaging&lt;/strong&gt; Specify the packaging type of the artifact i.e jar/aar/war&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-Dfile&lt;/strong&gt; Specify here the specific name of the jar/aar/war you are pushing as a maven artifact&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-DlocalRepositoryPath&lt;/strong&gt; Specify the path to your mavenrepo (git local) i.e.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;./mavenrepo/releases/aar
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-DgeneratePom&lt;/strong&gt; Set it to true to generate a POM file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-DcreateChecksum&lt;/strong&gt; Set it to true to generate the checksum files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 11&lt;/strong&gt; : Once you are done generating the maven artifacts and they are deployed under the specific folder ( releases/snapshots), just stage them, commit and push it to your remote repo…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;&amp;lt;artifact&amp;gt; v1.0.0 added&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Repeat &lt;strong&gt;&lt;em&gt;Steps 10-11&lt;/em&gt;&lt;/strong&gt; every time you want to publish a maven artifact to your own maven repository.&lt;/p&gt;

&lt;h2 id=&#34;in-summary:f84ad0192643eed3ea96b10c231ee903&#34;&gt;In Summary&lt;/h2&gt;

&lt;p&gt;Thats it for Part 1. In the next part we will see how to use this maven repository in our android application to reference libraries into our project with the help of gradle.&lt;/p&gt;

&lt;p&gt;Till then have fun crushing code :D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Meet JACK &amp; JILL , Android’s experimental toolchain</title>
      <link>http://crushingcode.github.io/meet-jack-and-jill-androids-experimental-toolchain/</link>
      <pubDate>Tue, 21 Jul 2015 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/meet-jack-and-jill-androids-experimental-toolchain/</guid>
      <description>&lt;p&gt;JACK &amp;amp; JILL are part of the new tool chain for android and in the words of &lt;a href=&#34;http://android-developers.blogspot.co.uk/2014/12/hello-world-meet-our-new-experimental.html&#34;&gt;Android Developer Blog&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;they are designed to improve build times and simplify development by reducing dependencies on other tools&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In case you are curious, &lt;strong&gt;JACK&lt;/strong&gt; stands for &lt;strong&gt;Java Android Compiler Kit&lt;/strong&gt; and &lt;strong&gt;JILL&lt;/strong&gt; stands for  &lt;strong&gt;Jack Intermediate Library Linker&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Woa ..woa..wooaaaa ..thats sounds too technical ..lets slow this down, right.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JACK&lt;/strong&gt; &amp;amp; &lt;strong&gt;JILL&lt;/strong&gt; were released as an experimental tool chain in the Android SDK  21.1.1 and recently got minor bug fixes in the recent release of Android SDK 21.1.2&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what exactly are they for  ?&lt;/strong&gt;
&lt;strong&gt;JACK&lt;/strong&gt; basically compiles your Java code directly to a .dex Dalvik Executable.
&lt;strong&gt;JILL&lt;/strong&gt; on the other hand translates any libraries you are referencing to a new Jack library file (.jack).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Whats the difference ?&lt;/strong&gt;
Glad you asked :)
The usual process of android compilation process is
1. Use the standard javac compiler to convert the source code to Java bytecode
2. Feed this bytecode to dex compiler to get the Dalvik bytecode&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JACK&lt;/strong&gt; eliminates the conversion to Java bytecode step and directly converts source code to Dalvik bytecode. During the same time it also handles any requested code minification (shrinking and/or obfuscation), previously handled by Proguard and then perform repackaging too.&lt;/p&gt;

&lt;p&gt;Now all this time, &lt;strong&gt;JACK&lt;/strong&gt; was working on you source code, right!
What if you have a library being referenced in the form of say a JAR?
&lt;strong&gt;JILL&lt;/strong&gt; takes care of that, by converting all libraries to Jack Library File (.jack) which can easily be merged by JACK during compilation into object code.
Basically the Android Gradle plugin and JACK collect any .jack library files, along with your source code, and compiles them into a set of dex files and further assembles them into an APK.&lt;/p&gt;

&lt;p&gt;The complete process explained in a diagram&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/jacksitesdiagram.png&#34; alt=&#34;jacksitesdiagram&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why all the hassle for compiler ?&lt;/strong&gt;
Google believes in optimizing the whole process of  compilation of android apps. The faster that happens the better, maybe involve incremental compilation for the same(still under development)! :D
Also due to the Oracle-Google dispute over using java , Google probably wants to move away from using javac and have its own compiler in place to convert source code to dalvik bytecode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you use the tool chain in your apps ?&lt;/strong&gt;
Good question! At the moment JACK &amp;amp; JILL are both in experimental phase.
So you specifically need to enable them in your build.gradle i.e. you need to set &lt;code&gt;useJack = true&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;android {
    ...
     buildToolsRevision &#39;24.0.1&#39;
     defaultConfig {
         // Enable the experimental Jack build tools.
         useJack = true
         }
    ...
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tools.android.com/tech-docs/jackandjill&#34;&gt;More Info at Android Tools Project Site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Downside ?&lt;/strong&gt;
As of now these support only Java 7 i.e no support for Java 8 :(
No Annotation processing :(&lt;/p&gt;

&lt;p&gt;Thats it for now.
Any questions are always welcome :D&lt;/p&gt;

&lt;p&gt;References&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://android-developers.blogspot.co.uk/2014/12/hello-world-meet-our-new-experimental.html&#34;&gt;Android Developer Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tools.android.com/tech-docs/jackandjill&#34;&gt;Android Tools Project Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Life without wires : ADB over WiFi</title>
      <link>http://crushingcode.github.io/life-without-wires-adb-over-wifi/</link>
      <pubDate>Thu, 09 Jul 2015 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/life-without-wires-adb-over-wifi/</guid>
      <description>

&lt;p&gt;Tired of being tied to your laptop/desktop while debugging your android apps ?
Well let me break it to you – You are NOT the FIRST person to do it.
Its a common practice to tether your device via a USB cable to the host machine and debug android apps.Well here is something for you that is going to set you free. Yes literally. You can run adb over WiFi (period)&lt;/p&gt;

&lt;p&gt;Yes , you read that right! Thats the secret solution(…ok not secret.. :p ) and setting it up is a piece of cake :P
Most people ask me why another post on this, well if you googled it you would come across a lot of information regarding the same but most of it is outdated or you would be using hit-and-trial method to get it working. I did some research on my own and found a way to get it working in the below steps.
I will walk you through the process of doing so in the most easiest way.
All you need is a USB cable (for the initial setup) and have your laptop/desktop and the devices connected to the same network (work on 99% cases)&lt;/p&gt;

&lt;h2 id=&#34;step-1:4a91edfe3954c56fb32837c099bc0494&#34;&gt;Step 1&lt;/h2&gt;

&lt;p&gt;Connect your mobile device via USB and make sure usb debugging is on (you can do that via the developer options in your device).
Also connect to your Wifi.&lt;/p&gt;

&lt;h2 id=&#34;step-2:4a91edfe3954c56fb32837c099bc0494&#34;&gt;Step 2&lt;/h2&gt;

&lt;p&gt;Open up the Terminal , provided you have the adb set in your PATH, type the following&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb devices
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this would list your device as connected over the USB&lt;/p&gt;

&lt;h2 id=&#34;step-3:4a91edfe3954c56fb32837c099bc0494&#34;&gt;Step 3&lt;/h2&gt;

&lt;p&gt;To enable the wifi-debug-mode&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb tcpip 5555
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-4:4a91edfe3954c56fb32837c099bc0494&#34;&gt;Step 4&lt;/h2&gt;

&lt;p&gt;Get your DEVICE-IP-ADDRESS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb shell netcfg | grep &#39;wlan0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will get something like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wlan0 UP 192.168.2.23/24 0x00001043 cc:c3:ea:ef:12:11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where 192.168.2.23 is your DEVICE-IP-ADDRESS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;you can simply on your device , go to&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Settings &amp;gt; About phone &amp;gt; Status&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;to view the IP address of your phone&lt;/p&gt;

&lt;h2 id=&#34;step-5:4a91edfe3954c56fb32837c099bc0494&#34;&gt;Step 5&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT : Remove USB cable&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-6:4a91edfe3954c56fb32837c099bc0494&#34;&gt;Step 6&lt;/h2&gt;

&lt;p&gt;Connect your device by typing in the below in the terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb connect DEVICE-IP-ADDRESS:5555
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-7:4a91edfe3954c56fb32837c099bc0494&#34;&gt;Step 7&lt;/h2&gt;

&lt;p&gt;To confirm the connection just made, type in the terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb devices
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this should list your device as connected over the particular DEVICE-IP-ADDRESS
And you are done. Run/Debug your apps from your IDE in wireless mode.
Let the magic of wire-free-life begin.&lt;/p&gt;

&lt;h2 id=&#34;step-8:4a91edfe3954c56fb32837c099bc0494&#34;&gt;Step 8&lt;/h2&gt;

&lt;p&gt;Did I mention that to switch back to USB mode you simply type in the below command in terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb usb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Things to Note:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you move into a different workspace and change WiFi networks, you simply repeat steps 5 and 6 . The steps 1 to 5 are used to set your device into wifi-debug mode.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The device will exit the wifi-debug mode when it restarts. So if your device restarts unfortunately, you will have to start over (from steps 1 to 6). So if you keep an eye on your battery and do not restart your device, you can live without cables for weeks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;
&lt;a href=&#34;http://developer.android.com/tools/help/adb.html&#34;&gt;Info about ADB&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>