[{"content":"  Have you ever wanted to emphasize some console log output with colors? Well, I thought I never would have needed to, but while tinkering with some side project, I found a trick to colorize my console log output. The magic trick is using ANSI Escape Codes. My use-case was to highlight some part of my Groovy task\u0026rsquo;s output as a yellow colored warning and some errors as red, while working with my Android project. The code is quite simple, so lets dive into its implementation right away!\nFirst, create a colored_console.gradle file at the root of your project directory and populate it with content shown below. You can copy past it as it is:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  // Colored Console logs in Groovy def printlnWithColor(color, str) { // Map of ANSI Escape color codes  final colorsMap = [black : 30, red: 31, green: 32, yellow: 33, blue : 34, magenta: 35, cyan: 36, white: 37, default: 39] // Create the escape sequence so string is color formatted  final style = \u0026#34;${(char) 27}[${colorsMap[color]}\u0026#34; + \u0026#34;m\u0026#34; // Apply the escape sequence to the string by prepending it  final styledStr = style + str // finally use println to print this escaped string  println(styledStr) } // Using ext.method_name so it is exported and available // to be used outside the file it is declared in ext.printlnBlack = { str -\u0026gt; printlnWithColor(\u0026#34;black\u0026#34;, str) } ext.printlnRed = { str -\u0026gt; printlnWithColor(\u0026#34;red\u0026#34;, str) } ext.printlnGreen = { str -\u0026gt; printlnWithColor(\u0026#34;green\u0026#34;, str) } ext.printlnYellow = { str -\u0026gt; printlnWithColor(\u0026#34;yellow\u0026#34;, str) } ext.printlnBlue = { str -\u0026gt; printlnWithColor(\u0026#34;blue\u0026#34;, str) } ext.printlnCyan = { str -\u0026gt; printlnWithColor(\u0026#34;magenta\u0026#34;, str) } ext.printlnWhite = { str -\u0026gt; printlnWithColor(\u0026#34;white\u0026#34;, str) } ext.printlnDefault = { str -\u0026gt; printlnWithColor(\u0026#34;default\u0026#34;, str) }   Next, include this file inside the build.gradle file where you want to want to use the functions that facilitate colored console output. i.e app module\u0026rsquo;s build.gradle file.\nInclude the below line of code at the top of build.gradle file where plugins are defined.\n1  apply from: \u0026#34;$rootProject.projectDir/colored_console.gradle\u0026#34;   The setup part is now done and you can start using the defined functions to enable colored console output.\nIn order to test this out, lets create a task named coloredHelloWorld, as shown below:\n1 2 3 4 5  task coloredHelloWorld { printlnGreen(\u0026#34;============\u0026#34;) printlnBlue(\u0026#34;Hello World!\u0026#34;) printlnRed(\u0026#34;============\u0026#34;) }   Now we should execute this task by running the below command in a terminal window at the root of the project:\n1  ./gradlew coloredHelloWorld   and its output:\nPretty, init üåà Now go use it in your projects and add a splash of color to your console logs üôÉ\n","description":"","id":19,"section":"posts","tags":["groovy"],"title":"Rainbow console logs in Groovy","uri":"https://crushingcode.nisrulz.com/posts/rainbow-console-logs-in-groovy/"},{"content":"  As an Android Engineer, I have to sign Android apps whenever making a public release. The steps are quite simple and well documented on the official website. However the one thing that always comes up how do you provide your signing credentials and keystore file. Lets find out!\nThere 2 common ways this can be done:\nUsing ENV vars (Recommended) Inside your ~/.zshrc or ~/.bashrc file, declare the key value pairs as shown below:\n Note: For CI, declare key-value pair under secrets section\n 1 2 3 4  export KEYSTORE_FILE_PATH = \u0026#34;/Users/your_user/App_Directory/keystore_file.keystore\u0026#34; export KEYSTORE_PASSWORD = \u0026#34;********\u0026#34; export KEY_ALIAS = \u0026#34;key_alias\u0026#34; export KEY_PASSWORD = \u0026#34;************\u0026#34;   Then inside your app module\u0026rsquo;s build.gradle file, you can reference it as shown below:\n1 2 3 4 5 6 7 8  signingConfigs { release { storeFile file(String.valueOf(System.getenv(\u0026#34;KEYSTORE_FILE_PATH\u0026#34;))) storePassword System.getenv(\u0026#34;KEYSTORE_PASSWORD\u0026#34;) keyAlias System.getenv(\u0026#34;KEY_ALIAS\u0026#34;) keyPassword System.getenv(\u0026#34;KEY_PASSWORD\u0026#34;) } }   Using local.properties file Inside your local.properties file, declare the key value pairs as shown below:\n1 2 3 4  storeFile=../keystore.jks storePassword=example keyAlias=example keyPassword=example    Note: keystore.jks file is the Keystore file that is expected to be placed inside the root directory of your project.\n Next create a signing.gradle file at the root of your project and add the below code in it:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  def keystorePropertiesFile = rootProject.file(\u0026#34;local.properties\u0026#34;) if (keystorePropertiesFile.exists()) { // Load the properties \tdef keystoreProperties = new Properties() keystoreProperties.load(new FileInputStream(keystorePropertiesFile)) android { signingConfigs { if (keystorePropertiesFile.exists()) { release { keyAlias keystoreProperties[\u0026#39;keyAlias\u0026#39;] keyPassword keystoreProperties[\u0026#39;keyPassword\u0026#39;] storeFile file(keystoreProperties[\u0026#39;storeFile\u0026#39;]) storePassword keystoreProperties[\u0026#39;storePassword\u0026#39;] } } } buildTypes { release { if (keystorePropertiesFile.exists()) { signingConfig signingConfigs.release } } } } } else { println(\u0026#34;Filename: keystore.properties\u0026#34;) println(\u0026#34;Error: File does not exists\u0026#34;) println(\u0026#34;Solution: Create a keystore.properties file with valid details under keystore directory at the root of your project\u0026#34;) }   Now in order to use this signing.gradle config in your app, open the build.gradle file for app module and add the the below line of code just above the android {} block:\n1 2 3 4  apply from: \u0026#34;$rootProject.projectDir/signing.gradle\u0026#34; // android { ... }   Thats all!\nIn both cases, simply sync your project and you should be able to sign your APK file by executing ./gradlew assembleRelease üéâ\n","description":"","id":20,"section":"posts","tags":["android"],"title":"Signing Android Apps","uri":"https://crushingcode.nisrulz.com/posts/signing-android-apps/"},{"content":"  Kotlin Synthetics for Views is deprecated! You can read about it here.\nThat means if you have been using them in your project then you need to replace them with a more recommended approach i.e ViewBindings. There is a migration guide too.\nBut before you can start the migration you need to track down the files where Kotlin Synthetics are being used. Lets find out.\nRun the below command at the root of your project in a terminal window:\n1  grep -rwl . -e \u0026#39;kotlinx.android.synthetic\u0026#39;   here\n -r = Recursive -w = Match the whole word -l = Output the file name of matching files -e = Match pattern used during the search  On executing the above command, the output is like below:\n1 2  ‚ùØ grep -rwl . -e \u0026#39;kotlinx.android.synthetic\u0026#39; ./UsingKotlin/app/src/main/java/nisrulz/github/sample/usingkotlin/MainActivity.   Incase you are only interested in finding out the number of files where Kotlin Synthetics are being used, run the below command:\n1  grep -rwl . -e \u0026#39;kotlinx.android.synthetic\u0026#39; | wc -l   On executing the above command, the output is like below:\n1 2  ‚ùØ grep -rwl . -e \u0026#39;kotlinx.android.synthetic\u0026#39; | wc -l 1   That is all! Once you have found the places in your codebase where Kotlin Synthetics have been used, simply replace them with ViewBinding one by one. You could also completely switch to Jetpack Compose, if you want to switch to the next generation of UI development framework on Android.\n","description":"","id":21,"section":"posts","tags":["terminal"],"title":"Hunting Kotlin Synthetics For Views","uri":"https://crushingcode.nisrulz.com/posts/hunting-kotlin-synthetics-for-views/"},{"content":"  Once in a while I notice disk used up in my developer machine, taking up considerable space. Since I am an Android Engineer, I mostly work with Gradle build tool.\nGradle maintains a cache of all dependencies it downloads as well as other artifacts such as downloaded wrappers at the path ~/.gradle. Now you\u0026rsquo;ll be surprized to know how much space this .gradle directory occupies. Lets try to find out.\nI\u0026rsquo;ll use a tool called du. This is usually present on all unix systems (I am using macOS).\nTo check the space occupied by .gradle directory, you need to run the below command in a terminal window:\n1  du -sh ~/.gradle   here -sh just means the output will be total value in a human readable format with a size letter such as \u0026lsquo;M\u0026rsquo; for megabytes/\u0026lsquo;G\u0026rsquo; for gigabytes. Read the docs for more details.\nWhen I ran this command in my machine this was the result:\nBecause I use this often, I have created an alias for this, shown below:\n1 2 3 4 5  # Drop this aliases in your ~/.bashrc or ~/.zshrc file # Find the size of your .gradle directory # Usage: gradleCacheSize alias gradleCacheSize=\u0026#39;du -sh ~/.gradle\u0026#39;   Now that is a lot of space occupied by just 1 directory that is just a directory for storing cache, 15 Gb!\nI need to free up some space, but I don\u0026rsquo;t want to delete the whole directory because the cache is useful.\nTo handle this case, I came up with a command that will only delete files that are were accessed more than 30 days ago. That way the most used cache files are kept intact and unused/rarely used files are deleted. Lets take a look at it now.\n1 2  # Clean files inside .gradle directory that were accessed more than 30 days ago find ~/.gradle -type f -atime +30 -delete   here\n  ~/.gradle = Path where find will be executed.\n  -type f = Only look for files.\n  -atime +30 = File was last accessed more than 30 days ago (tweak this as per your requirement).\n  -delete = Delete files found by find based on set criteria.\n  Additionally, I could also delete all empty directories inside .gradle. The below command does just that:\n1 2  # Delete empty directories inside .gradle directory find ~/.gradle -mindepth 1 -type d -empty -delete   here\n  -mindepth 1 = Means process all files except the command line arguments i.e except ~/.gradle directory itself, all sub directories are used to find.\n  -type d = Only look for directories.\n  -empty = File is empty and is either a regular file or a directory.\n  I then went ahead and combined the two commands into 1 alias as shown below. Copy and past the below alias in your ~/.bashrc or ~/.zshrc file:\n1 2 3 4  # Clean your .gradle/caches that is older than 30 days # Usage: gradleCleanCache alias gradleCleanCache=\u0026#39;find ~/.gradle -type f -atime +30 -delete \\ \u0026amp;\u0026amp; find ~/.gradle -mindepth 1 -type d -empty -delete\u0026#39;   Looks so much better! I executed this alias command to free up my disk space and checked for the occupied space again\nNice! I was able to free up 5.7 Gb of disk space. Everything else is useful, thus shouldn\u0026rsquo;t be deleted.\nEnjoy your free space üéâ\nCredits Elephant icons created by Freepik - Flaticon ","description":"","id":22,"section":"posts","tags":["gradle"],"title":"Reducing mammoth gradle caches","uri":"https://crushingcode.nisrulz.com/posts/reducing-mammoth-gradle-caches/"},{"content":" Droidcon Italy, Online Abstract   Developing for multi-platform is picking up speed as the Kotlin Multi-Platform gets better with every release. That mostly means that shared logic is being written in Kotlin which can then be targeted to many target platforms. Up until recently it wasn\u0026rsquo;t easy to develop UI for multiple platforms on the Desktop side. That is changing with the introduction of Compose for Desktop, which will allow building application UI for Linux, macOS and Windows.\nIn this session you will get to understand what is Compose for Desktop, how does it work and how can you jump right into building for multiple platforms opening up the vast domains other than the mobile.\n  Presentation  Video To be added\nEvent Click here to access the event website\n  ","description":"","id":23,"section":"talks","tags":["kotlin","android","compose","desktop"],"title":"Another Compose(it): Desktop @Droidcon Italy","uri":"https://crushingcode.nisrulz.com/talks/droidcon_italy_2021/"},{"content":" Chicago Roboto Online Abstract   KMM or Kotlin Multiplatform Mobile is evolving rapidly. So much so that many companies already use it in production. KMM brings a paradigm shift in sharing code between mobile platforms in a way that allows for greater control over what is shared while leaving the native UI code to the platform.\n  Event   ","description":"","id":24,"section":"talks","tags":["kotlin","kmp"],"title":" Birds of a Feather: Kotlin Multiplatform Mobile @Chicago Roboto","uri":"https://crushingcode.nisrulz.com/talks/chicago_roboto_2021/"},{"content":" Droidcon, Online Abstract   Panel Discussion with Googlers about Jetpack Compose.\n  Video+ Event Click here to access the event website\n  ","description":"","id":25,"section":"talks","tags":["kotlin","android","compose"],"title":"Ask Googlers about Jetpack Compose @Droidcon Online","uri":"https://crushingcode.nisrulz.com/talks/panel_discussion_droidcon_online_july_2021/"},{"content":" Ya!vaConf, Online Abstract   Developing for multi-platform is picking up speed as the Kotlin Multi-Platform gets better with every release. That mostly means that shared logic is being written in Kotlin which can then be targeted to many target platforms. Up until recently it wasn\u0026rsquo;t easy to develop UI for multiple platforms on the Desktop side. That is changing with the introduction of Compose for Desktop, which will allow building application UI for Linux, macOS and Windows.\nIn this session you will get to understand what is Compose for Desktop, how does it work and how can you jump right into building for multiple platforms opening up the vast domains other than the mobile.\n  Presentation  Video To be added\nEvent Click here to access the event website\n  ","description":"","id":26,"section":"talks","tags":["kotlin","android","compose","desktop"],"title":"Another Compose(it): Desktop @Ya!vaConf","uri":"https://crushingcode.nisrulz.com/talks/yava_conf_2021/"},{"content":" Android Chatter, Clubhouse/Online Abstract   Live panel discussion with other Android devs to talk about building Android Libraries, tips n' tricks and Q\u0026amp;A from audienceüë®üèª‚Äçüíª\n  Event Click here to access the event website\n  ","description":"","id":27,"section":"talks","tags":["kotlin","android","android-library"],"title":"Building Android Libraries @Android Chatter","uri":"https://crushingcode.nisrulz.com/talks/clubhouse_jun_2021/"},{"content":" Raywenderlich.com, Online Abstract   In this Livecast, Dru Freeman, Nishant Srivastava, Ray Fix, Caroline Begbie, Audrey Tam and Ehab Amer livestream their reactions to Apple‚Äôs annual Worldwide Developers Conference (WWDC 2021) keynote event.\n  Video Click here to access the video\n  ","description":"","id":28,"section":"talks","tags":["apple","ios"],"title":"WWDC First Impressions Livecast @Raywenderlich.com","uri":"https://crushingcode.nisrulz.com/talks/wwdc_livecast_2021/"},{"content":" Raywenderlich.com, Online Abstract   In this Livecast, Dru Freeman, Nishant Srivastava, Victoria Gonda, Fuad Kamal and Subhrajyoti Sen sit down to share their thoughts on all the latest news and outcomes from Google I/O 2021.\n  Video Click here to access the video\n  ","description":"","id":29,"section":"talks","tags":["google","android"],"title":"Google I/O First Impressions Livecast @Raywenderlich.com","uri":"https://crushingcode.nisrulz.com/talks/google_io_livecast_2021/"},{"content":" GDG London: Jetpack Compose, Online Abstract   Since the time Android has existed, our workflow for designing a UI has been confined to XML. This has led to other issues and hacks to make UI work as per current times. But that is now about to end. With the introduction of Jetpack Compose, a modern toolkit that is based on the declarative programming model you can simply describe what your UI should look like, and Compose takes care of the rest.\nIn this session, you will understand what exactly is this Jetpack Compose and witness a speed run of developing an app in 30 mins.\nAll code in Github\n  Presentation  Video To be added\nEvent   ","description":"","id":30,"section":"talks","tags":["kotlin","android","compose","desktop"],"title":"Jet-Set-Compose üöÄ@GDG London","uri":"https://crushingcode.nisrulz.com/talks/gdg_london_jetpack_compose_may_2021/"},{"content":"  Writing documentation is part of almost all developer jobs. Although writing code is the primary focus for any developer, the core understanding/reasoning of the implementation can only be captured in a well-written human-readable documentation.\nI put emphasis on human-readable because this documentation needs to be understood by, well humans. If we throw in a lot of jargon words, acronyms and code without explaining it in a simple language then it is close to not usable by people.\nAnother aspect that is important is how the documentation is formatted. If it is just blobs of text it becomes boring to read and people tend to just skip parts of it. This is easy to fix. The best and easiest way is to write in Markdown, which takes care of syntax highlighting as well as is simple to write. It is written following a certain syntax and is saved to a file with an extension of .md. In fact, this post is written in markdown üòé\nThe only problem is that many folks, don\u0026rsquo;t actually know how to consume this .md file. Most folks are familiar with a more common format i.e .pdf file. Almost all major operating systems can handle PDF files.\nI recently had to write a specific integration guide as part of documentation and deliver it to a client separately from our hosted documentation. Now I could totally write all of that in a Word doc/Normal Text file or in a Google Doc. However, I don\u0026rsquo;t get all the nice features that markdown provides. Plus I have to deal with the GUI tools of each of these tools. So I decided to write the integration guide as a markdown file. The whole write-up was quickly done as I have been using markdown for some time now. Now comes the tricky part.\nI needed to provide this file as a PDF file. So I started searching for possible ways I could do that.\nThe golden tool to pick for this would be pandoc.\n Read about how to install pandoc here.\nNOTE: In order to render pdf, pandoc requires latex installed. Make sure it is installed before proceeding.\n Considering our markdown file is called integration_guide.md, below command would convert it to an integration_guide.pdf:\n1  pandoc integration_guide.md -s -o integration_guide.pdf   As soon as I ran this command, it threw an error:\n1 2  Error producing PDF. ! Package inputenc Error: Unicode character üòÖ (U+1F605)   So it cannot handle emojis! Oh no üòï\nAnyways, I still wanted to confirm it works, so I got rid of all emojis in the markdown file and ran the command again.\n Checkout the final generated integration_guide.pdf file.\n Simple and fast!\nThis should solve the problem. Well not really ü•∫\nThe thing is that I like Github Flavored Markdown (Yes there are different flavors of Markdown, like icecream üç¶).\nTurns out while using pandoc this is not quite possible (or I couldn\u0026rsquo;t find it. If you have an idea how to do it let me know on twitter üòÖ). Also, I found out that installing LaTex is a huge download üëÄ. Not to mention again, but not being able to render emojis is already a deal-breaker for me because I ‚ô•Ô∏è using emojis. So I started looking for some other tool that would let me render my markdown into a PDF that looks the same as how Github renders markdown.\nAfter an hour of trying out various tools, I stumbled upon grip. From the Github repository\n Render local readme files before sending off to GitHub.\nGrip is a command-line server application written in Python that uses the GitHub markdown API to render a local readme file. The styles and rendering come directly from GitHub, so you\u0026rsquo;ll know exactly how it will appear. Changes you make to the Readme will be instantly reflected in the browser without requiring a page refresh.\n  NOTE: Make sure grip is installed by executing pip3 install grip in your directory.\n Using grip for my use-case was as simple as running\n1  grip integration_guide.md   \u0026hellip; this will start a local server with a url, http://localhost:6419/\n1 2 3 4 5 6  * Serving Flask app \u0026#34;grip.app\u0026#34; (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: off * Running on http://localhost:6419/ (Press CTRL+C to quit)   On opening http://localhost:6419/ in a browser of your choice (I use MS Edge), you are presented with a nice Github Flavored Markdown render of your file\nSweet üòé\nBut wait, what is this fake tab in the rendered webpage?\nIn order to get rid of this \u0026ldquo;Fake Tab\u0026rdquo;, I checked the documentation of grip. Nothing stood out as a proper solution until I found this issue/comment.\nBasically, the solution is to load the markdown via stdin and then export it as an HTML file. Sounds good. I did a bit of a mix and came up with the below oneliner command:\n1  cat integration_guide.md | grip - --export integration_guide.html \u0026amp;\u0026amp; open integration_guide.html   which I converted into a bash function like below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  # Drop these in your ~/.bashrc or ~/.zshrc file # Single command to open a file in your OS # Use as: openFile filename.extension function openFile(){ # Open the generated output file if [[ $(uname -s) == \u0026#34;Darwin\u0026#34; ]]; then # macOS open $1 else # Linux xdg-open $1 fi } # Convert Markdown to HTML # Dependency: Install grip, https://github.com/joeyespo/grip # Use as: convertMarkdownToHtml your_markdown_file.md # Use as with open flag: convertMarkdownToHtml your_markdown_file.md --open function convertMarkdownToHtml(){ if [[ $1 == *\u0026#34;.md\u0026#34;* ]]; then # Filename without extension local FILE_NAME=$(basename \u0026#34;$1\u0026#34; .md) local OUTPUT_FILE=\u0026#34;$FILE_NAME.html\u0026#34; # Read the markdown file and then convert it to an HTML file cat $FILE_NAME.md | grip - --export $OUTPUT_FILE if [[ $2 == \u0026#34;--open\u0026#34; ]]; then # Open the generated output file openFile $OUTPUT_FILE fi else echo \u0026#34;Passed file is not of markdown type. Please pass a .md file\u0026#34; fi }   Using the bash function, I simply need to call the below line of code:\n1  convertMarkdownToHtml integration_guide.md   Aditionally if called with the command with --open flag:\n1  convertMarkdownToHtml integration_guide.md --open   Then the generated HTML file is opened in the associated Browser window!\nAt this point I can open the generated HTML file and utilize the Print functionality of the browser (CMD + P/ Ctrl + P) to save as PDF:\n\u0026hellip;and hit Print or Save.\nOn opening the generated PDF file I have:\n Checkout the final generated integration_guide.pdf file.\n However, I am not quite happy with this solution. It works, yes, but I really don\u0026rsquo;t want to open a browser and then have a few keystrokes to print the final pdf file. Would be nice if I could skip this step and directly convert HTML file to PDF via some commandline tool. This gave me an idea üí° What if I could open a browser window in headless mode and print the document programmitically üßê? Kind of like emulating the current process we figured earlier üëÄ\nThis is not new for me and I knew where to start for this part. The best tool out there for a headless and programmable browser is Puppeteer. Reading through the docs quickly for my specific use case, I came up with the below script, which I saved as renderToPdf.js:\n NOTE: Make sure puppeteer is installed by executing npm i -g puppeteer in your directory.\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  const puppeteer = require(\u0026#39;puppeteer\u0026#39;); (async () =\u0026gt; { // Get the cmdline arguments  const myArgs = process.argv.slice(2); // The first argument is the HTML file  const inputHtmlFile = myArgs[0] // Extract the filename from input file, to create the output filename  const outputHtmlFileName = inputHtmlFile.replace(/\\.[^/.]+$/, \u0026#34;\u0026#34;) + \u0026#39;.pdf\u0026#39; // Prepare the file path  const filePath = \u0026#39;file:///\u0026#39; + __dirname + \u0026#39;/\u0026#39; + inputHtmlFile // Launch the headless browser  const browser = await puppeteer.launch(); const page = await browser.newPage(); await page.goto(filePath, { waitUntil: \u0026#39;networkidle0\u0026#39; }); await page.pdf({ path: outputHtmlFileName, printBackground: true, format: \u0026#39;A4\u0026#39;, margin: { left: \u0026#34;40px\u0026#34;, right: \u0026#34;40px\u0026#34;, } }); await browser.close(); })();   Now in order to execute my renderToPdf.js script I need to execute in terminal the below command:\n1  node renderToPdf.js integration_guide.html    Checkout the final generated integration_guide.pdf file via Puppeteer.\n We can even incorporate this step as part of our bash function we created earlier. The updated function looks like below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  # Convert Markdown to PDF # Use as: convertMarkdownToPdf your_markdown_file.md # Use as with open flag: convertMarkdownToPdf your_markdown_file.md --open function convertMarkdownToPdf(){ if [[ $1 == *\u0026#34;.md\u0026#34;* ]]; then # Filename without extension local FILE_NAME=$(basename \u0026#34;$1\u0026#34; .md) local TEMP_FILE=\u0026#34;$FILE_NAME.html\u0026#34; # Read the markdown file and then convert it to an HTML file cat $FILE_NAME.md | grip - --export $TEMP_FILE # Render HTML to PDF node renderToPdf.js $TEMP_FILE # Remove intermediate html file rm $TEMP_FILE if [[ $2 == \u0026#34;--open\u0026#34; ]]; then # Open the generated output file openFile $FILE_NAME.pdf fi else echo \u0026#34;Passed file is not of markdown type. Please pass a .md file\u0026#34; fi }   Using the bash function, I simply need to call the below line of code:\n1  convertMarkdownToPdf integration_guide.md    NOTE: The bash function has been renamed from convertMarkdownToHtml to convertMarkdownToPdf\n \u0026hellip;and the markdown file is converted to HTML first, opened in Headless browser and printed as a PDF file. Aditionally if called with the command with --open flag:\n1  convertMarkdownToPdf integration_guide.md --open   Then the generated PDF file is opened in the associated PDF file reader!\nThat\u0026rsquo;s it! Everything works üòé It is quick and solved my immediate requirement.\nAll this code now exists also on Github as a project! üéâ\nSidenote:\nThere are possibly many other tools, which could have been useful too i.e markdown-pdf. However I am quite happy with my setup here üòÖ\n","description":"","id":31,"section":"posts","tags":["tools","opensource"],"title":"How to convert Markdown to PDF","uri":"https://crushingcode.nisrulz.com/posts/how-to-convert-markdown-to-pdf/"},{"content":" FOSDEM 2021: Kotlin Devroom, Online Abstract   Developing for multi-platform is picking up speed as the Kotlin Multi-Platform gets better with every release. That mostly means that shared logic is being written in Kotlin which can then be targeted to many target platforms. Up until recently it wasn\u0026rsquo;t easy to develop UI for multiple platforms on the Desktop side. That is changing with the introduction of Compose for Desktop, which will allow building application UI for Linux, macOS and Windows.\nIn this session you will get to understand what is Compose for Desktop, how does it work and how can you jump right into building for multiple platforms opening up the vast domains other than the mobile.\n  Presentation  Video  Event   ","description":"","id":32,"section":"talks","tags":["kotlin","compose"],"title":"Step it up: Compose for Desktop @FOSDEM","uri":"https://crushingcode.nisrulz.com/talks/fosdem_2021/"},{"content":" South Cairo Tech Talks, GDG Helwan, Online Abstract   A lot of Android libraries are being built/shipped by indie devs and companies alike. Everyone wants to start working inside the host application as quickly as possible. This competition has led to many of these Android libraries to implement various possible hack/tricks in order to get up and running inside host Android application as quickly as possible. Eventually leading to bad side effects introduced on the host application side.\nIn this session, you will get to learn about the various ways Android Library developers use to init their code inside the host application. You will also get to understand how these mechanisms work, what pitfalls they bring and where are these employed within an existing Android application. Towards the end of this session, the new and shiny Jetpack Startup AndroidX library will be introduced along with information on how to use it and what it brings to the table to solve the startup mess the Android Library ecosystem is in currently.\nBy the end of this session, you will be all set to build Android libraries that scale and have API which doesn\u0026rsquo;t mess up with the startup of your Android application.\n  Presentation  Video  Event   ","description":"","id":33,"section":"talks","tags":["kotlin","android","android-library"],"title":"And' Libraries, Stop Starting up! @GDG Helwan","uri":"https://crushingcode.nisrulz.com/talks/south_cairo_tech_talks_2021/"},{"content":" Devfest DACH'21, Online Abstract   A lot of Android libraries are being built/shipped by indie devs and companies alike. Everyone wants to start working inside the host application as quickly as possible. This competition has led to many of these Android libraries to implement various possible hack/tricks in order to get up and running inside host Android application as quickly as possible. Eventually leading to bad side effects introduced on the host application side.\nIn this session, you will get to learn about the various ways Android Library developers use to init their code inside the host application. You will also get to understand how these mechanisms work, what pitfalls they bring and where are these employed within an existing Android application. Towards the end of this session, the new and shiny Jetpack Startup AndroidX library will be introduced along with information on how to use it and what it brings to the table to solve the startup mess the Android Library ecosystem is in currently.\nBy the end of this session, you will be all set to build Android libraries that scale and have API which doesn\u0026rsquo;t mess up with the startup of your Android application.\n  Presentation  Video  Event   ","description":"","id":34,"section":"talks","tags":["kotlin","android","android-library"],"title":"And' Libraries, Stop Starting up! @Devfest DACH'21","uri":"https://crushingcode.nisrulz.com/talks/devfest_dach_2020/"},{"content":" Android Worldwide, Online Abstract   A lot of Android libraries are being built/shipped by indie devs and companies alike. Everyone wants to start working inside the host application as quickly as possible. This competition has led to many of these Android libraries to implement various possible hack/tricks in order to get up and running inside host Android application as quickly as possible. Eventually leading to bad side effects introduced on the host application side.\nIn this session, you will get to learn about the various ways Android Library developers use to init their code inside the host application. You will also get to understand how these mechanisms work, what pitfalls they bring and where are these employed within an existing Android application. Towards the end of this session, the new and shiny Jetpack Startup AndroidX library will be introduced along with information on how to use it and what it brings to the table to solve the startup mess the Android Library ecosystem is in currently.\nBy the end of this session, you will be all set to build Android libraries that scale and have API which doesn\u0026rsquo;t mess up with the startup of your Android application.\n  Presentation  Video  Event   ","description":"","id":35,"section":"talks","tags":["kotlin","android","android-library"],"title":"And' Libraries, Stop Starting up! @Android Worldwide","uri":"https://crushingcode.nisrulz.com/talks/android_worldwide_jan_2021/"},{"content":" Droidcon APAC \u0026lsquo;20, Online Abstract   Enabling an enhanced audio experience for your users is the topmost priority for developers who build audio processing apps. Android, however, holds dark secrets about low latency audio, thus making it harder for developers to build responsive audio apps and user experiences. This talk uncovers those dark secrets while also giving a quick rundown on working with Native code along with Kotlin and how the platform has evolved over time to fix the issues with Low Latency Audio. Towards the end, Oboe library for building real-time audio apps is introduced showcasing how it simplifies everything.\n  Presentation  Video  Event   ","description":"","id":36,"section":"talks","tags":["android","kotlin","audio"],"title":"Demystifying Low Latency Audio on Android @Droidcon APAC","uri":"https://crushingcode.nisrulz.com/talks/droidcon_apac_2020/"},{"content":" Droidcon Americas \u0026lsquo;20, Online Abstract   A lot of Android libraries are being built/shipped by indie devs and companies alike. Everyone wants to start working inside the host application as quickly as possible. This competition has led to many of these Android libraries to implement various possible hack/tricks in order to get up and running inside host Android application as quickly as possible. Eventually leading to bad side effects introduced on the host application side.\nIn this session, you will get to learn about the various ways Android Library developers use to init their code inside the host application. You will also get to understand how these mechanisms work, what pitfalls they bring and where are these employed within an existing Android application. Towards the end of this session, the new and shiny Jetpack Startup AndroidX library will be introduced along with information on how to use it and what it brings to the table to solve the startup mess the Android Library ecosystem is in currently.\nBy the end of this session, you will be all set to build Android libraries that scale and have API which doesn\u0026rsquo;t mess up with the startup of your Android application.\n  Presentation  Video  Event   ","description":"","id":37,"section":"talks","tags":["android","android-library"],"title":"And' Libraries, Stop Starting up! @Droidcon Americas","uri":"https://crushingcode.nisrulz.com/talks/droidcon_americas_2020/"},{"content":"App Privacy Policy Generator is a simple web app to generate a generic privacy policy for your Android/iOS apps.\nBackstory It was built with a core idea and vision, to enable indie developers from having to jump through the weeds of legality around putting up a Privacy Policy or Terms \u0026amp; Conditions in their applications. I built this web app because I wanted to do the same and every other alternative out there was charging me money. At that time, I was not that well off to consider buying the services of such companies. So I built the app, used it in my apps and open sourced it hoping someone who would be in the same situation as me would benefit from it. Over the years this project has shown that it has helped many and that I was not the only one with this problem. Thus the core of all of this has led to me trying my best to keep this project always free and open-source.\nSince the web app\u0026rsquo;s inception in the year 2017, it has always been licensed under Apache 2.0. Over the few years between 2017 and now (2020 as of writing), many people have tried to acquire this project/make an exact copy and host it on their domain (without contributing back to the project at all). Whenever I have declined the offer for acquisition citing the ideas and vision for my project or requested for contribution back to the project, folks have taken offense and declined my request or sent me üò° emails.\nThis was allowed under a more liberal Apache 2.0 license and I had no say in any of such cases ü§∑\nSo, after thinking much about all this and keeping my vision of keeping this project free and open source forever I started looking around what I can do. Then I came across a recent article from the folks at Plausible Analytics, where they were in a similar situation. They were first MIT licensed and then moved to AGPLv3 recently. They go into more details to explain AGPLv3 license too, you should read their article.\nHowever, that gave me ideas that I felt the same about App Privacy Policy Generator. So, I decided to do any further development under the AGPLv3 license.\nWhat does that mean for the project?\nWell simply worded this project and its derivatives will always be open source (including hosted ones!)\nApp Privacy Policy Generator v3.1.0 is out! üöÄ The new release is licensed under the AGPLv3 license. Head over to the latest release\u0026rsquo;s changelog to read about it ü§ó\nWith v3.1.0, I have set the base for supporting more templates in the future. Additionally, it is now easier to add 3rd party services now. No more fidgeting with JSON. A simple YAML block will do the work, enabling an easier contribution path for non-developers too.\nAdding a 3rd party service to the web app is as simple as adding the below to the thirdpartyservices.yml file:\n1 2 3 4 5 6 7  - name:Google Play Servicesmodel:gpsgps:falselogo:images/gps.pnglink:privacy:https://www.google.com/policies/privacy/terms:https://policies.google.com/terms  Read more about it here.\nLastly, if App Privacy Policy Generator has helped you or your company in anyway then consider supporting the project. You can also sponsor me on Github üôáüèª‚Äç‚ôÇÔ∏è\nAlso, did you know I maintain a Guest book issue for App Privacy Policy Generator!üò≥\nRead what others have to say about the project.\nOne of the ways of supporting the project would be to write about how it helped you out üòÑ\nWhat\u0026rsquo;s next Well, there a few things that are already in the pipeline and would see the light in the next releases, like supporting:\n GDPR compliant Privacy Policy Localization Enabling Github Actions for the project  There is more to this project and I have a lot of stuff planned. Keep an eye on it ü§ó\n","description":"","id":38,"section":"posts","tags":["project","news"],"title":"App Privacy Policy Generator is moving to AGPLv3 license üôáüèª‚Äç‚ôÇÔ∏èü•≥","uri":"https://crushingcode.nisrulz.com/posts/app-privacy-policy-gen-change-license/"},{"content":" Codemotion Online 2020, Online Abstract   Kotlin Coroutines graduated to stable release just last year and are fairly new for everyone adopting them. That means a lot of the information is not quite straightforward when it comes to implementing them in current projects. In this talk, you will be cooking up a hot pot of various Kotlin Coroutine approaches. You will be covering some aromatic recipes that provide step by step process to add that specific flavor to your current Kotlin and/or Android projects to unlock the full potential of Coroutines.\n  Presentation  Event   ","description":"","id":39,"section":"talks","tags":["kotlin","coroutines"],"title":"Cooking with Coroutine Recipes @Codemotion Online","uri":"https://crushingcode.nisrulz.com/talks/codemotion_online_2020/"},{"content":" GDG Kisumu, Kenya 2020, Online Abstract   This is a panel discussion along with other awesome developers about Android with focus on upcoming Android 11 release.\n  Event   ","description":"","id":40,"section":"talks","tags":["android","kotlin"],"title":"Android 11 - THE GRAND FINALE! @GDG Kisumu","uri":"https://crushingcode.nisrulz.com/talks/gdg_kisumu_4_sept_2020/"},{"content":" GDG Kisumu, Kenya 2020, Online Abstract   Enabling an enhanced audio experience for your users is the topmost priority for developers who build audio processing apps. Android, however, holds dark secrets about low latency audio, thus making it harder for developers to build responsive audio apps and user experiences. This talk uncovers those dark secrets while also giving a quick rundown on working with Native code along with Kotlin and how the platform has evolved over time to fix the issues with Low Latency Audio. Towards the end, Oboe library for building real-time audio apps is introduced showcasing how it simplifies everything.\n  Presentation  Event   ","description":"","id":41,"section":"talks","tags":["android","kotlin","audio"],"title":"Demystifying Low Latency Audio on Android @GDG Kisumu","uri":"https://crushingcode.nisrulz.com/talks/gdg_kisumu_22_aug_2020/"},{"content":"I have been contributing to the tutorials/infographics at Raywenderlich.com since 2018. I joined them initially as an Author on the Android team, but since then have now jumped into different roles such as being a Technical Editor and a Final Pass Editor as well as also the Flutter team :)\nThis post is for maintaining a list of tutorials I have written or contributed to, for the Raywenderlich.com platform:\n  As Author\n Building an Android Library Tutorial [18 Apr, 2018] Gradle Tips and Tricks for Android [15 Aug, 2018] Android Studio Tips and Tricks [3 Jul, 2019] Getting Started with Flutter [26 Aug, 2019] Fastlane Tutorial for Android: Getting Started [2 Jul, 2020]    As Technical Editor\n Image Recognition With ML Kit [5 Sept, 2018] Kotlin Coroutines Infographic [8 July, 2020]    As Final Pass Editor\n Null Safety Tutorial in Kotlin: Best Practices [6 Feb, 2019] Build an API with Kotlin on Google Cloud Platform [30 Sept, 2019] App Hardening Tutorial for Android With Kotlin [27 Nov, 2019] Data Privacy for Android [11 Mar, 2020] Coroutines With Room Persistence Library [25 Mar, 2020] Navigation Component for Android Part 3: Transition and Navigation [22 Apr, 2020] Securing Network Data Tutorial for Android [3 Jun, 2020] Database Views With Room for Android [22 Jun, 2020] Building the Android Open Source Project [29 Jun, 2020] Sensors Tutorial for Android: Getting Started [20 July, 2020] Paging Library for Android With Kotlin: Creating Infinite Lists [5 Oct, 2020] Deep Dive Into Kotlin Data Classes for Android [12 Apr, 2021] Android Services: Getting Started [27 May, 2021]    ","description":"","id":42,"section":"posts","tags":["tutorials"],"title":"Tutorials contributed to Raywenderlich.com","uri":"https://crushingcode.nisrulz.com/posts/raywederlich-com-tutorials/"},{"content":" Codemotion Amsterdam 2020, Amsterdam, Netherlands Abstract   Kotlin Coroutines graduated to stable release just last year and are fairly new for everyone adopting them. That means a lot of the information is not quite straightforward when it comes to implementing them in current projects. In this talk, you will be cooking up a hot pot of various Kotlin Coroutine approaches. You will be covering some aromatic recipes that provide step by step process to add that specific flavor to your current Kotlin and/or Android projects to unlock the full potential of Coroutines.\n  Event Due to COVID-19 pandemic, the conference was cancelled.\n  ","description":"","id":43,"section":"talks","tags":["kotlin","coroutines"],"title":"Cooking with Coroutine Recipes @CodemotionAmsterdam [Cancelled]","uri":"https://crushingcode.nisrulz.com/talks/codemotion_amsterdam_2020/"},{"content":" Raywenderlich.com, Online Abstract   In this Roundtable Talk, Kevin Moore, Kevin Galligan, Nishant Srivastava and Joe Howard discuss the state of mobile and what platform you should use when starting a brand new project.\n  Video Click here to access the video\n  ","description":"","id":44,"section":"talks","tags":["android","kotlin","kotlin-multiplatform","flutter","ios"],"title":"The Future of Mobile: Android/iOS, Flutter and Native @Raywenderlich.com","uri":"https://crushingcode.nisrulz.com/talks/future_of_mobile_2020/"},{"content":" Android Makers Paris 2020, Online Abstract   Enabling an enhanced audio experience for your users is the topmost priority for developers who build audio processing apps. Android, however, holds dark secrets about low latency audio, thus making it harder for developers to build responsive audio apps and user experiences. This talk uncovers those dark secrets while also giving a quick rundown on working with Native code along with Kotlin and how the platform has evolved over time to fix the issues with Low Latency Audio. Towards the end, Oboe library for building real-time audio apps is introduced showcasing how it simplifies everything.\n  Presentation  Video  Event   ","description":"","id":45,"section":"talks","tags":["android","kotlin","audio"],"title":"Demystifying Low Latency Audio on Android @Android Makers Paris","uri":"https://crushingcode.nisrulz.com/talks/android_makers_paris_apr_2020/"},{"content":" GDG Ahmedabad Live Webinar, Ahmedabad, India Abstract   Android Studio is the tool of the trade hands down. When it comes to Android (app/library/IoT) development, the first thing that comes to mind is to install Android Studio and get going from there. However, it has not been a smooth road for me. In my own experience, I talk about my love-hate relationship with Android Studio. I try to cover what Android Studio gets right and what it doesn\u0026rsquo;t. The talk focuses on how to embrace performance when Android Studio is the bottleneck in the workflow (slow build times and reduced productivity), how switching to a terminal and various supporting tools that exist in the ecosystem can give Android developers the much-needed speed boost and in-depth view in their development workflow. By the end of this talk, you would be aware of a workflow that allows for increased productivity and faster development.\n  Presentation  Video  Event  ","description":"","id":46,"section":"talks","tags":["android","adb ","tools"],"title":"My love-hate relationship with Android Studio @GDG Ahmedabad","uri":"https://crushingcode.nisrulz.com/talks/gdg_ahmedabad_apr_2020/"},{"content":"  Executing tasks and processes is pretty common in the Terminal. Having them run and then pipe the output into another one, transforming the output, triggering a sub-process/task, etc. are some of the usual ways of working with them.\nThat implies that they will most probably won\u0026rsquo;t finish immediately. Now that is an not much of an issue, but more of an annoyance because you sometimes have to wait for the task to finish to start another one. Ofcourse you can open new terminal windows to execute multiple tasks, however the feedback loop is still missing.\nI wanted to personally fix this issue for myself. So I set out to find a solution for this.\nOne of things that I find very useful is the Notifications in macOS and Ubuntu. Wouldn\u0026rsquo;t it be nice if there was a notification that could be triggered when a task is finished?\nSo, I decided to find a unified of way of doing the same across multiple platforms i.e macOS and Ubuntu.\nUbuntu I work with Ubuntu Budgie on my personal laptop, so that was my starting point. Taking a dig inside Google results, surfaced a package that could solve my problem at hand: notify-send\nHere is what the man page for it state:\n notify-send - a program to send desktop notifications\n WowüòÄ Bingo! This is exactly what I want.\nNow, if you read the man pages, you will notice that the are some options yo can pass to this utility on the cmdline. However we are interested in something very simple. Something on the lines of a title, description and maybe an icon.\nAfter reading through the possible options, I figured I can do this via:\n1  notify-send \u0026#34;Title\u0026#34; \u0026#34;Message\u0026#34; -i face-smile   The -i face-smile allows to specify an icon for the notification. This is how it shows up if you execute the above line in your terminal. You can find the valid names for icons that can be usedhere.\nTo test if it works when a task finishes, execute the below:\n1  for i in {1..9999999}; do ; done \u0026amp;\u0026amp; notify-send \u0026#34;Title\u0026#34; \u0026#34;Message\u0026#34; -i face-smile   Here we are running a for loop to simulate work being done. When the for loop finishes you will see the same notification show up! Sweetüç¨\nSo Ubuntu is sorted for showing a notification when a task finishes. Next up is figuring it out for macOS.\nmacOS Turns out on macOS this was relatively simpler to achieve. macOS has a utility called display notification.\nFrom their man pages:\n display notification command to show notifications, such as status updates as files are processed.\n and you use it as below:\n1  display notification \u0026#34;Message\u0026#34; with title \u0026#34;Title\u0026#34;   However you cannot just execute it directly in a terminal. This utility needs to be triggered via osascript. So you need to trigger this from terminal as below:\n1  osascript -e \u0026#39;display notification \u0026#34;Message\u0026#34; with title \u0026#34;Title\u0026#34;\u0026#39;   This is how it shows up if you execute the above line in your terminal.\nTo test if it works when a task finishes, we will do the same for-loop test. Execute the below in a terminal:\n1  for i in {1..9999999}; do ; done \u0026amp;\u0026amp; osascript -e \u0026#39;display notification \u0026#34;Message\u0026#34; with title \u0026#34;Title\u0026#34;\u0026#39;   Thats perfect!\nNow the only thing bothering me is that I need to call these commands based on the platforms and that their syntax differs for each. I can fix that by making a simple bash function called notify:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  # Drop this in your ~/.zshrc or ~/.bashrc file # Trigger a notification # Use as: # notify \u0026#34;Title\u0026#34; \u0026#34;Message\u0026#34; \u0026#34;face-smile\u0026#34; function notify() { local TITLE=\u0026#34;$1\u0026#34; local MSG=\u0026#34;$2\u0026#34; local ICON=\u0026#34;$3\u0026#34; if [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then # if it is macOS osascript -e \u0026#34;display notification \\\u0026#34;$MSG\\\u0026#34; with title \\\u0026#34;$TITLE\\\u0026#34;\u0026#34; else notify-send $TITLE $MSG -i $ICON fi }   Here, if the function is being executed on macOS it will execute the display notification utility by setting the right params in order, otherwise it will execute the notify-send utility.\n NOTE: A bash function can be called just like an alias\nAlso note that I escaped the \u0026quot; in \\\u0026quot;$MSG\\\u0026quot; for the display notification utility so as to be able to pass in a variable.\n Here is a functional version of this, where I call notify after ./gradlew clean task finishes:\nNice! Set this up as you would like to and be more productive.\nSubscribe to my RSS feed to keep track of more such terminal foo nuggets üç™\n","description":"","id":47,"section":"posts","tags":["tricks","terminal"],"title":"Terminal Foo: Triggering Notifications from CMDLine üìü","uri":"https://crushingcode.nisrulz.com/posts/trigger-notification-when-task-over/"},{"content":" FOSDEM 2020: Kotlin Devroom, Brussels, Belgium Abstract   Kotlin Multiplatform is the new kid on the cross-platform block. The approach although is very different from what you have seen in the past. The new approach utilizes Kotlin Native to compile Kotlin language to native binaries for specific target platform which can run without a virtual machine. Thus enabling simplified code sharing across multiple platforms. In this talk, you will be introduced to Kotlin/Native and demonstrate how to build a Kotlin Multiplatform app that runs on both iOS and Android using shared Kotlin code.\n  Presentation  Video  Event   ","description":"","id":50,"section":"talks","tags":["kotlin","kotlin-multiplatform"],"title":"Kotlin MP: Into the Multi-Verse @FOSDEM","uri":"https://crushingcode.nisrulz.com/talks/fosdem_2020/"},{"content":" Devfest'19, Berlin, Germany Abstract   Android Studio is the tool of the trade hands down. When it comes to Android (app/library/IoT) development, the first thing that comes to mind is to install Android Studio and get going from there. However, it has not been a smooth road for me. In my own experience, I talk about my love-hate relationship with Android Studio. I try to cover what Android Studio gets right and what it doesn\u0026rsquo;t. The talk focuses on how to embrace performance when Android Studio is the bottleneck in the workflow (slow build times and reduced productivity), how switching to a terminal and various supporting tools that exist in the ecosystem can give Android developers the much-needed speed boost and in-depth view in their development workflow. By the end of this talk, you would be aware of a workflow that allows for increased productivity and faster development.\n  Presentation  Event Click here to access the event website\n  ","description":"","id":51,"section":"talks","tags":["android","adb ","tools"],"title":"My love-hate relationship with Android Studio @Devfest'19 Berlin","uri":"https://crushingcode.nisrulz.com/talks/devfest_berlin_2019/"},{"content":" Mobilization IX, ≈Å√≥d≈∫, Poland Abstract   Kotlin Coroutines graduated to stable release just last year and are fairly new for everyone adopting them. That means a lot of the information is not quite straightforward when it comes to implementing them in current projects. In this talk, you will be cooking up a hot pot of various Kotlin Coroutine approaches. You will be covering some aromatic recipes that provide step by step process to add that specific flavor to your current Kotlin and/or Android projects to unlock the full potential of Coroutines.\n  Presentation  Video  Event   ","description":"","id":52,"section":"talks","tags":["kotlin","coroutines "],"title":"Cooking with Coroutines Recipes @Mobilization IX","uri":"https://crushingcode.nisrulz.com/talks/mobilization_ix_2019/"},{"content":" Droidcon Greece \u0026lsquo;19, Heraklion, Greece Abstract   Android Studio is the tool of the trade hands down. When it comes to Android (app/library/IoT) development, the first thing that comes to mind is to install Android Studio and get going from there. However, it has not been a smooth road for me. In my own experience, I talk about my love-hate relationship with Android Studio. I try to cover what Android Studio gets right and what it doesn\u0026rsquo;t. The talk focuses on how to embrace performance when Android Studio is the bottleneck in the workflow (slow build times and reduced productivity), how switching to a terminal and various supporting tools that exist in the ecosystem can give Android developers the much-needed speed boost and in-depth view in their development workflow. By the end of this talk, you would be aware of a workflow that allows for increased productivity and faster development.\n  Presentation  Event   ","description":"","id":53,"section":"talks","tags":["android","adb ","tools"],"title":"My love-hate relationship with Android Studio @Droidcon Greece","uri":"https://crushingcode.nisrulz.com/talks/droidcon_greece_2019/"},{"content":" Droidcon Vienna \u0026lsquo;19, Vienna, Austria Abstract   Android Studio is the tool of the trade hands down. When it comes to Android (app/library/IoT) development, the first thing that comes to mind is to install Android Studio and get going from there. However, it has not been a smooth road for me. In my own experience, I talk about my love-hate relationship with Android Studio. I try to cover what Android Studio gets right and what it doesn\u0026rsquo;t. The talk focuses on how to embrace performance when Android Studio is the bottleneck in the workflow (slow build times and reduced productivity), how switching to a terminal and various supporting tools that exist in the ecosystem can give Android developers the much-needed speed boost and in-depth view in their development workflow. By the end of this talk, you would be aware of a workflow that allows for increased productivity and faster development.\n  Presentation  Event   ","description":"","id":54,"section":"talks","tags":["android","adb ","tools"],"title":"My love-hate relationship with Android Studio @Droidcon Vienna","uri":"https://crushingcode.nisrulz.com/talks/droidcon_vienna_2019/"},{"content":" Devoxx Poland \u0026lsquo;19, Krakow, Poland Abstract   Android Studio is the tool of the trade hands down. When it comes to Android (app/library/IoT) development, the first thing that comes to mind is to install Android Studio and get going from there. However, it has not been a smooth road as expected for me. In my own experience, I talk about my love-hate relationship with Android Studio. I try to cover what Android Studio gets right and what it doesn\u0026rsquo;t. The talk focuses on how to be embrace performance when Android Studio is the bottleneck in the workflow (slow build times and reduced productivity), how switching to a terminal and various tools that exist in the ecosystem can give Android developers the much-needed speed boost and in-depth view in their development workflow. By the end of this talk, you would have embraces a workflow that allows for increased productivity and faster development.\n  Presentation  Video  Event   ","description":"","id":55,"section":"talks","tags":["android","adb ","tools"],"title":"My love-hate relationship with Android Studio @Devoxx Poland","uri":"https://crushingcode.nisrulz.com/talks/devoxx_pl_2019/"},{"content":" TL;DR: I used Google Sheets + Translate + AppScript to build a completely free and robust Automated Android Localization Tool! üêº  So this started when I found the below tweet:\nTIL: You can use Google Sheets to translate your strings to multiple languages. *Mind blown* üòÆ\nSeems super handy for indie Android devs when considering simple localization!#google #translate #sheets #localization #AndroidDev #android https://t.co/H9BdOTHXrP\n\u0026mdash; NishFish (@nisrulz) March 27, 2019   Basically what it is doing is that using Google Sheets you can specify a cell text to be translated to another language using the very simple formula as below:\nGOOGLETRANSLATE(text, [source_language, target_language])\nRead more here.\nI was curious so I just tried it out on my own Google Sheet:\n  Direct link to the google sheet file:\nGoogle Translate In Sheets\n Testing English, Spanish, Hindi, Tamil, German, Korean, Russian, Czech, Estonian, French, Polish, Chinese\n \u0026hellip;and it totally worked!! üéâ\nI only have to duplicate a row (each column has the formula already set up to translate the text in the first column to respective columns language) and then update the text in the first column in English with my own string value. That English string is translated to all the other languages in their respective columns.\nThis was super cool and I was mostly done here. This was a cool feature. However, if you remember my first tweet, I mentioned:\n Seems super handy for indie Android devs when considering simple localization!\n One guy reached out to me about that end result and how to do that:\nInterestingly that is what most people would like. The first thing that pops up in the head that one can use the Google App Script to parse the data in Google Sheets and then it is just a matter of formatting the data to be the right format of how strings.xml is.\nSo I went on to fiddle with some Google AppScript and was able to generate the below:\nstrings.xml @Pastebin.com\nHmm, pretty close now ü§î\nWhat is missing, is that each of these needs to be in its own value-lang folder inside a strings.xml file.\nShould be easy. So after fiddling a bit more I was able to end up generating the full folder structure inside my own Google Drive folder.\nFinally! üéà   Everything was so quick to bootstrap and get running üõ¥\nI plan on open sourcing this sheet and the app script by this weekend. It is not doing anything complex, pretty simple. I would also release the script as an addon so it is easier to set up for people.\nFor now, I think it works for most Indie devs who cannot afford to pay for translation services and hopefully it will be as helpful as I think it is.\nStay tuned for more updates here (about open-sourcing the script, addon release and explanation about how the script )üôÉ\nFor now, I am too sleepy to write anything üò¥\nUntil next time, keep crushing code üòé\n Special Credit to Jake Millar who tweeted the Google Translate trick inside Google Sheets!\n I do a lot of such tinkering with scripts and Android development over at Github, or you can see me rambling about tech in twitter :]\n","description":"","id":56,"section":"posts","tags":["android","tools","localization"],"title":"Building an automated Android Localization Tool today","uri":"https://crushingcode.nisrulz.com/posts/automated-localization-using-gsheets/"},{"content":" AppdevCon \u0026lsquo;19, Amsterdam, Netherlands Abstract   Building an Android library in the current times is way different than what it used to be earlier. Things have changed considerably and keeping up to date with them is now a necessity rather than just some acquirable knowledge.\nIn this session, you will dive deeper into best practices and ways of architecting Android libraries. You will get to learn about the common pitfalls and how to overcome them by using the right approach such as leveraging architecture components and making your Android libraries lifecycle-aware. You will also understand how one can leverage Kotlin language when developing Android libraries as well as information around API design and exploring the path to becoming a better Android Library Developer.\nBy the end of this session, you will be all set to build Android libraries that scale and have API which contributes to the developer\u0026rsquo;s happiness.\n  Presentation  Video  Event   ","description":"","id":57,"section":"talks","tags":["android","android-library","best-practices"],"title":"Demystifying Android Libraries @AppdevCon","uri":"https://crushingcode.nisrulz.com/talks/appdevcon_2019/"},{"content":" Berlindroid \u0026lsquo;19, Berlin, Germany Abstract   Building an Android library in the current times is way different than what it used to be earlier. Things have changed considerably and keeping up to date with them is a now a necessity than just some acquirable knowledge.\nThis session in a second part to the last year‚Äôs talk at Droidcon Berlin 2017 with the same title. In this session we will dive deeper into best practices and ways of architecting android libraries. You will get to learn about the common pitfalls and how to overcome them by using the right approach such as leveraging architecture components and making your android libraries lifecycle aware. We will also be covering how one can leverage Kotlin language when developing android libraries as well as information around API design and exploring the path to becoming a better Android Library Developer.\nBy the end of this session, you will be all set to build android libraries that scale and have API which contributes to developer happiness.\n  Presentation  Event   ","description":"","id":58,"section":"talks","tags":["android","android-library","best-practices"],"title":"Things I wish I knew when I started building Android libraries-Vol.2 @Berlindroid","uri":"https://crushingcode.nisrulz.com/talks/berlindroid_feb_2019/"},{"content":" Mobius Moscow \u0026lsquo;18, Moscow, Russia Abstract   Building an Android library in the current times is way different than what it used to be earlier. Things have changed considerably and keeping up to date with them is now a necessity rather than just some acquirable knowledge.\nThis session is a second part to the last year\u0026rsquo;s talk at Droidcon Berlin 2017 which was Vol. 1. In this session, you will dive deeper into best practices and ways of architecting Android libraries. You will get to learn about the common pitfalls and how to overcome them by using the right approach such as leveraging architecture components and making your Android libraries lifecycle-aware. You will also understand how one can leverage Kotlin language when developing Android libraries as well as information around API design and exploring the path to becoming a better Android Library Developer.\nBy the end of this session, you will be all set to build Android libraries that scale and have API which contributes to the developer\u0026rsquo;s happiness.\n  Presentation  Video  Event   ","description":"","id":59,"section":"talks","tags":["android","android-library","best-practices"],"title":"Things I wish I knew when I started building Android libraries-Vol.2 @Mobius Moscow","uri":"https://crushingcode.nisrulz.com/talks/mobius_moscow_2018/"},{"content":" Devoxx Belgium \u0026lsquo;18, Antwerp, Belgium Abstract   Building an Android library in the current times is way different than what it used to be earlier. Things have changed considerably and keeping up to date with them is a now a necessity than just some acquirable knowledge.\nThis session in a second part to the last year‚Äôs talk at Droidcon Berlin 2017 with the same title. In this session we will dive deeper into best practices and ways of architecting android libraries. You will get to learn about the common pitfalls and how to overcome them by using the right approach such as leveraging architecture components and making your android libraries lifecycle aware. We will also be covering how one can leverage Kotlin language when developing android libraries as well as information around API design and exploring the path to becoming a better Android Library Developer.\nBy the end of this session, you will be all set to build android libraries that scale and have API which contributes to developer happiness.\n  Devoxx Belgium \u0026lsquo;18, Antwerp, Belgium Presentation  Video  Event  üìñ Also mentioned in Android Weekly #339  ","description":"","id":60,"section":"talks","tags":["android","android-library","best-practices"],"title":"Things I wish I knew when I started building Android libraries-Vol.2 @Devoxx Belgium","uri":"https://crushingcode.nisrulz.com/talks/devoxx_be_2018/"},{"content":" Droidcon Berlin \u0026lsquo;18, Berlin, Germany Abstract   If you\u0026rsquo;ve been developing Android applications for a while now, you know the pain of handling the lifecycle just right. It‚Äôs a pain-point that has existed since the advent of Android, up until recently when Google released Architecture components. As an Android developer you are bugged by handling activity/fragment lifecycle and flow of data in tandem to the lifecycle changes day in and out. Making your code aware about the lifecycle of the process/activity/fragment makes you more confident as a developer and enables faster development. This session would enable you to understand Lifecycle components (ProcessLifecycleOwner, LifecycleOwner, LifecycleObserver) and how they are leveraged in other architecture components like LiveData and ViewModel.\n  Presentation  Video  Event   ","description":"","id":61,"section":"talks","tags":["android","android-library"],"title":"The A, B and C of Lifecycle Components @Droidcon Berlin","uri":"https://crushingcode.nisrulz.com/talks/droidcon_berlin_2018/"},{"content":"This isn‚Äôt a click-bait article! I will explain how to make your Android build time shorter than the reading time of this post (hopefully) üèÉüèª\nAndroid build times are really slow, Ugh. I get it. Especially if you own a low spec machine with 4GB RAM.\nTL;DR: Build your Android Project via terminal with gradle assembleDebug  Read on for the longer version describing how I got to this.\nAlso, make sure to check Bonus section at the end where I reduce the whole build+deployment to device into one command!\n First, the Problem My Laptop: MacBook Air early 2014, 4GB Ram and 128 GB SSD.\nMy laptop does not pack much power, meaning when I would be coding on small-average android projects the build times would take 6‚Äì10 minutes.\nI recently joined a new company, inherited a big Android code-base and ‚Ä¶\nMy build time when generating a debug APK was 37 minutes. Yes, 37 MINUTES! Let that sink in.\nI was able to drop this to 28 minutes by using a couple of tricks (checkout more of those in myAndroid Tips \u0026amp; Tricks repo) and following the official Gradle performance suggestions such as enabling Build Cache, Parallelize builds, Configure on demand, Offline builds, etc\nUpdated my gradle config inside ~/.gradle/gradle.properties which now looks like:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # Enable Gradle Daemon org.gradle.daemon=true # Enable Configure on demand org.gradle.configureondemand=true # Enable parallel builds org.gradle.parallel=true # Enable Build Cache android.enableBuildCache=true # Enable simple gradle caching org.gradle.caching=true # Increase memory allotted to JVM org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8   At 28 minutes build time, this wasn‚Äôt anywhere near acceptable.\nThe Solution After 2 days of trying and failing to reduce the build time, I decided to ditch Android Studio in favor of a text editor to write code. The reasoning behind that was that I wanted to get rid of any bells and whistles Android Studio brings with it. To build/compile code I turned to one of the most common ways of building a project, TERMINAL!\nToday has been a bad dayüòë @androidstudio has been taking forever to buildüßê On the plus side, I finally decided to ditch #androidstudio \u0026amp; switch to @code and the #terminal to build/compile the project, assemble apk üë®‚Äçüíª1‚É£1‚É£ #yolo #AndroidDev #slow #android #gradle #woes pic.twitter.com/mPWZFz38yd\n\u0026mdash; NishFish (@nisrulz) April 5, 2018   Guess what, I was able to clock my builds at ~3 minutes via Terminal!\n1 2  # To build your debug apk from terminal, run the below ./gradlew assembleDebug   I noticed Android Studio was particularly bad at only the Gradle builds, hence I switched back to writing code in Android Studio but stuck to running builds via my terminal.\nAt almost 3 minutes build time down from 28 minutes, I had achieved 89% reduction in build times! That‚Äôs insane!\nBonus Edit 1: As pointed out by Frank Harper you can effectively build and install the debug apk to your device using just a single command:\n1  ./gradlew installDebug   This however will not launch the apk but only install it.This is also mentioned here in official documentation.\n If you would like to install as well as launch the apk on your connected device, read on‚Ä¶\n I have created some terminal aliases to help me install the apk and then launch it too on the connected device.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  # I use ZSH, here is what I added to my .zshrc file (config file) # at ~/.zshrc # Have the adb accessible, by including it in the PATH export PATH=\u0026#34;$PATH:path/to/android_sdk/platform-tools/\u0026#34; # Setup your Android SDK path in ANDROID_HOME variable export ANDROID_HOME=~/sdks/android_sdk # Setup aapt tool so it accessible using a single command alias aapt=\u0026#34;$ANDROID_HOME/build-tools/29.0.3/aapt\u0026#34; # Install APK to device # Use as: apkinstall app-debug.apk alias apkinstall=\u0026#34;adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X install -r $1\u0026#34; # As an alternative to apkinstall, you can also do just ./gradlew installDebug # Alias for building and installing the apk to connected device # Run at the root of your project # $ buildAndInstallApk alias buildAndInstallApk=\u0026#39;./gradlew assembleDebug \u0026amp;\u0026amp; apkinstall ./app/build/outputs/apk/debug/app-debug.apk\u0026#39; # Launch your debug apk on your connected device # Execute at the root of your android project # Usage: launchDebugApk alias launchDebugApk=\u0026#34;adb shell monkey -p `aapt dump badging ./app/build/outputs/apk/debug/app-debug.apk | grep -e \u0026#39;package: name\u0026#39; | cut -d \\\u0026#39; -f 2` 1\u0026#34; # ------------- Single command to build+install+launch apk------------# # Execute at the root of your android project # Use as: buildInstallLaunchDebugApk alias buildInstallLaunchDebugApk=\u0026#34;buildAndInstallApk \u0026amp;\u0026amp; launchDebugApk\u0026#34; # Note: Here I am building, installing and launching the debug apk which is usually in the path: `./app/build/outputs/apk/debug/app-debug.apk`  # when this command is executed from the root of the project # If you would like to install and run any other apk, simply replace the path for debug apk with path of your own apk   ..the apk is built, pushed and installed to device. Here is the result\nI would however like to inspect more about the Gradle build times in my Android Project, but only when time permits. For those who like to know how that is done,\n1 2 3  # Profile your build from the terminal # In my case, \u0026lt;task\u0026gt; would be assembleDebug gradle --profile \u0026lt;tasks\u0026gt;   My work cycle is super fast now. I am able to iterate at 10x the speed than I was earlier. I plan on revisiting this with more in-depth info. But for now, this Android Developer with not-so-fast-machine is happy and productive.\nEDIT 2: Created a twitter thread with all my terminal aliases for Android Development (at the end there is a link to a gist for easy copy pasting). If you would like to follow, you can do so at*\nFor people following me, you probably know that I have switched to using the terminal for building, installing and deploying apk for my development work. I am going to start a thread where I list all terminal goodies I use in my day to day #android development workü§ì#AndroidDev\n\u0026mdash; NishFish (@nisrulz) April 15, 2018   Edit 3: As pointed out by Alejandro H. Cruz, in a reddit thread Jake Wharton mentions that it is possible to speed up Android Studio by disabling a lot of plugins. In any case if you feel that you need the functionality they provide, one can just enable them. Most of these plugins aren‚Äôt used in day to day development work. I went ahead and disabled a bunch and saw a drastic change in builds run from Android Studio, a drop from 28 minutes to around 5 minutes.* Direct link\nI hope this helps someone who is in the same boat as me. Give it a try at least and probably let me know if you find something new in this regards.\nIf it did help you in any way, then please share this in your network for it to reach people like you and more.\nIf you have suggestions or maybe would like me to add something to the content here, please let me know.\n A big thank you to Mario Sanoguera de Lorenzo for proof reading this article.\n ","description":"","id":62,"section":"posts","tags":["android","tools","gradle","shell"],"title":"How I reduced my Android build times by 89%","uri":"https://crushingcode.nisrulz.com/posts/how-i-reduced-android-build-times/"},{"content":" Devfest'17, Vancouver, Canada Abstract   Get to know the new Architecture Components released by Google in I/O'17\n  Presentation  Event   ","description":"","id":63,"section":"talks","tags":["android"],"title":"Architecture Components @Devfest'17 Vancouver","uri":"https://crushingcode.nisrulz.com/talks/devfest_vancouver_2017/"},{"content":" Google Developers Group - Cloud Vancouver, Vancouver, Canada Presentation  Event   ","description":"","id":64,"section":"talks","tags":["android","flutter "],"title":"Google Developer Days, Europe - Extended '17 Recap: Android and Flutter @GDG CV","uri":"https://crushingcode.nisrulz.com/talks/gdd_eu_ext_2017/"},{"content":" Lifecycle events in Android.\nIt has been a pain point for Android developers all over the world. It is no brainer that, most of the times the main cause of a memory leak in the codebase is because an invalid state is accessed which is out of sync with the lifecycle of the activity/fragment of the app.\nWhat this means is that as an Android Developer you are forced to put up a lot of checks in place, making sure that your code state is in sync with the lifecycle of the Activity/Fragment.\nThings start to get a bit more messy when that is something you expect from others to do, which is the case when you are an Android Library Developer. As an android library developer, you need other app developers to conform to un-registering callbacks/call cleanup methods or specific functions to re-initialize at certain points in the lifecycle of Activity/Fragment.i.e onDestroy(), onResume(), onCreate(), etc.\nNow that is a lot to expect and ask for. We all know developers tend to avoid going through documentations (..to build features quickly and achieve deadlines, obviously üòÖ ). So what that means is sometimes the cleanup part is missed or not understood quite properly for them to put in the right places in code. For example, if an Activity receives a callback after it‚Äôs been stopped, then it‚Äôs pretty likely that your app is going to crash due to memory leak. Un-registering the callback is right before the Activity is destroyed is what is the needed, which is possible if the app developer calls the cleanup() method from your android library, but it is expected of them. You cannot make sure that they will conform to it.\nWell that is a problem, so what is the solution? The solution is to make your android library Lifecycle-Aware. Making android library aware of the states of the lifecycle of Activity/Fragment gives us, the Android library developers greater control over making sure that callbacks are unregistered and calls to cleanup methods or re-initialization happens at the right state in the lifecycle of Activity/Fragment. At the same time it means less dependence on app developer to conform to putting more code and checks in their app to handle the states of your android library. Sounds like a win-win for both, eh! üòé\nBut how do we make our library code Lifecycle Aware¬†? Enter, Lifecycle Arch Components! Lifecycle Arch Components are a new set of lifecycle-aware components that can track the lifecycle of an activity or fragment, and adjust their behavior accordingly.\nThey are created by good folks at Google, were introduced at Google I/O 2017 and are currently in beta stage. Being in beta does not mean they aren‚Äôt ready. They seem to be the way most people are going to be moving forward in the near future as the library itself becomes stable. But we can get on the band wagon right now, as they are fairly ready.\n Update: Core lifecycle artifacts (runtime, common) have reached stable version v1.0.0. The lifecycle compiler and extensions are now at version v1.0.0-beta1\n Without taking much time, lets jump right into understanding how to wire these lifecycle components for your own android library‚Ä¶\nI will be using a simple example to demonstrate the wiring up process, which is available as a completely functional example app on github here.\nLets start by creating a new app. Once done, you can add a new library module\nYour folder structure should look like the below\nNext add this awesomelib module as a dependency to the app module, so that the app module has access to the public classes contained by the awesomelib library module. To do that add the below to the build.gradle of the app module.\n1  implementation project(\u0026#39;:awesomelib\u0026#39;)   Next you want to add a class to your awesomelib library module. I created mine named as AwesomeMainLib¬†. This class is just to showcase the code for library which will be referenced in the app module later on. For simplicity sake, lets make AwesomeMainLib class a singleton. The code in that case would look like below\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  public class AwesomeLibMain { static final AwesomeLibMain ourInstance = new AwesomeLibMain(); public static AwesomeLibMain getInstance() { return ourInstance; } private AwesomeLibMain() { } public void init() { System.out.println(\u0026#34;Called From AwesomeLibMain Class, init()\u0026#34;); } public void cleanup() { System.out.println(\u0026#34;Called From AwesomeLibMain Class, cleanup()\u0026#34;); } }   and in your app module you would call init() method via AwesomeLibMain.getInstance().init() in onCreate() and cleanup() method via AwesomeLibMain.getInstance().cleanup() in onDestroy() respectively. Here is the code of MainActivity.java class in app module\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // Init  AwesomeLibMain.getInstance().init(); } @Override protected void onDestroy() { super.onDestroy(); // Cleanup  AwesomeLibMain.getInstance().cleanup(); } }   But thats not the point here, right! We do not want the app developer to be calling these themselves. Also what happens if you want to trigger more methods at specific points in lifecycle of Activity/Fragment? The dependence on app developer increases by many folds and expecting them to do everything right is a like a chink in the armour.\nWell let us solve this situation by integrating with Lifecycle Arch Components.\nThe first thing we need to do is add the required dependencies to build.gradle to each module.\nAdd the below to the build.gradle for awesomelib module\n1 2  implementation \u0026#34;android.arch.lifecycle:runtime:1.0.0\u0026#34; annotationProcessor \u0026#34;android.arch.lifecycle:compiler:1.0.0-beta1\u0026#34;   and add the below to the build.gradle for app module\n1  implementation \u0026#34;com.android.support:appcompat-v7:26.1.0\u0026#34;    Note: We are using the latest support lib v26.1.0¬†, which now has AppCompatActivity implementing LifecycleOwner interface from Architecture Components. More about this, later in the post. For now just know you need support lib v26.1.0\n ‚Ä¶ that done, sync your project.\nNow is the time for us to integrate Lifecycle Arch Components into our android library module, awesomelib\nWe start by first implementing LifecyleObserver class in our AwesomeLibMain class.\n From android official docs: LifecycleObserver is an interface which does not have any methods, instead, relies on OnLifecycleEvent annotated methods to mark the class for lifecycle events.\n Now comes the magic. Once you have integrated Lifecycle Arch components, you have access to annotations which correspond to lifecycle events of Activity/Fragment such as\n1 2 3 4  @OnLifecycleEvent(Lifecycle.Event.ON_CREATE) or @OnLifecycleEvent(Lifecycle.Event.ON_DESTROY) ...   Once you annotate the right method with the specific annotation, that method would be triggered at the specified lifecycle event state, during the execution of Activity/Fragment.\nLets have a look at what our AwesomeLibMain class look, after we have annotated the methods\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  import android.arch.lifecycle.Lifecycle; import android.arch.lifecycle.LifecycleObserver; import android.arch.lifecycle.OnLifecycleEvent; public class AwesomeLibMain implements LifecycleObserver { static final AwesomeLibMain ourInstance = new AwesomeLibMain(); public static AwesomeLibMain getInstance() { return ourInstance; } private AwesomeLibMain() { } @OnLifecycleEvent(Lifecycle.Event.ON_CREATE) public void init() { System.out.println( \u0026#34;Called From AwesomeLibMain Class, called onCreate() of Activity \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; init()\u0026#34;); } @OnLifecycleEvent(Lifecycle.Event.ON_START) public void LibOnStart() { System.out.println( \u0026#34;Called From AwesomeLibMain Class, called onStart() of Activity \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; LibOnStart()\u0026#34;); } @OnLifecycleEvent(Lifecycle.Event.ON_STOP) public void LibOnStop() { System.out.println( \u0026#34;Called From AwesomeLibMain Class, called onStop() of Activity \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; LibOnStop()\u0026#34;); } @OnLifecycleEvent(Lifecycle.Event.ON_RESUME) public void LibOnResume() { System.out.println( \u0026#34;Called From AwesomeLibMain Class, called onResume() of Activity \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; LibOnResume()\u0026#34;); } @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE) public void LibOnPause() { System.out.println( \u0026#34;Called From AwesomeLibMain Class, called onPause() of Activity \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; LibOnPause()\u0026#34;); } @OnLifecycleEvent(Lifecycle.Event.ON_DESTROY) public void cleanup() { System.out.println( \u0026#34;Called From AwesomeLibMain Class, called onDestroy() of Activity \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; cleanup()\u0026#34;); } }   as you can see I added more methods and annotated them to get triggered at specific lifecycle event state.\nBut we are not done here yet. This just tells which method will be triggered when a specific lifecycle event state is reached for the Activity/Fragment. What is still required is to add our AwesomeLibMain class as an Observer for the lifecycle of the desired Activity. Turns out it is a really simple step, as can be seen below\n Note: MainActivity here extends AppCompatActivity because we are using the latest support lib v26.1.0¬†, which now has AppCompatActivity implementing LifecycleOwner interface from Architecture Components.\nFrom android official docs: LifecycleOwner is a single method interface that denotes that the class has a Lifecycle. It has one method, getLifecycle(), which must be implemented by the class.\nIf you are using a version of support lib below v26.1.0 then MainActivity will need to extend LifecycleActivity and app module‚Äôs build.gradle will need to include to get access to LifecycleActivity.\nimplementation \u0026quot;android.arch.lifecycle:extensions:1.0.0-beta1\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // Add Lifecycle Observer  getLifecycle().addObserver(AwesomeLibMain.getInstance()); } @Override protected void onDestroy() { super.onDestroy(); // Remove Lifecycle Observer  getLifecycle().removeObserver(AwesomeLibMain.getInstance()); } }   so you basically needed to add it as an Observer for lifecycle in onCreate() of Activity via\n1 2  // Add Lifecycle Observer getLifecycle().addObserver(AwesomeLibMain.getInstance());   ‚Ä¶and then remove the Observer for lifecycle in onDestroy() of Activity via\n1 2  // Remove Lifecycle Observer getLifecycle().removeObserver(AwesomeLibMain.getInstance());   Thats it! No, really thats all there is. You have successfully integrated lifecycle arch components in your awesomelib and now it is observing Activity Lifecycle events and triggering the right methods at the right time, without requiring the app developer to worry about anything.\n Note: This is the only step app developer needs to do when going to use your android library in terms of integrating your library code in the activity, apart from adding it in the build.gradle dependency section. All methods will be triggered automatically when a said lifecycle event state is reached during the execution of the Activity/Fragment.\n What I have tried to explain here is more like a proof of concept, I am sure one can very easily implement it in an existing android library code and make use of the benefits lifecycle arch components bring along.\nFor people worried about adding a lot of method counts to their app, below is a snapshot of method counts (used Classyshark Tool) for the used arch component libs, awesomelib module and the sample app itself (from the sample app I have linked below)\nSimple rundown shows the method count for\n arch component libs‚Äì122 methods awesomelib-5 methods  So as you can see they are pretty light in terms of adding method count. Support library is part of the app module and something usually all apps nowadays have, so you are basically not shipping your android library with that. üòÖ\nAs mentioned at the start of this post, the code for above is available on github here.\nIf you have suggestions or maybe would like me to add something to the content here, please let me know.\n I gave a talk on this topic at Droidcon Berlin ‚Äô17, checkout the slides here.This post got featured in Android Weekly Issue 276! üòé\n ","description":"","id":65,"section":"posts","tags":["android","android-library"],"title":"Is your Android Library, Lifecycle-Aware?","uri":"https://crushingcode.nisrulz.com/posts/is-your-android-library-lifecycle-aware/"},{"content":" Droidcon Berlin \u0026lsquo;17, Berlin, Germany Abstract   As more and more people start building Android Libraries, the whole process of building a better API for developers is getting bloated and everyone is coming up with their own ideas. However, if android library developers follow a certain standard with a rationale they can avoid most of the pitfalls. Building an android library is easy, but building one that keeps in mind developer happiness is rare but definitely not hard. The session would cover how one can build android libraries taking in consideration to exposing more informative API, making sure the best resources are utilized efficiently and that one does not force the app developer with redundant dependencies and complexities.\n  Presentation  Video  Event   ","description":"","id":66,"section":"talks","tags":["android","android-library","best-practices"],"title":"Things I wish I knew when I started building Android libraries @Droidcon Berlin","uri":"https://crushingcode.nisrulz.com/talks/droidcon_berlin_2017/"},{"content":" Code \u0026amp; Coffee, Vancouver, Canada Abstract   A quick introduction of what Flutter is and what is required to start building apps with Flutter\n  Presentation  Video  Event   ","description":"","id":67,"section":"talks","tags":["flutter"],"title":"Delightful X-App Development with Flutter @Code \u0026 Coffee","uri":"https://crushingcode.nisrulz.com/talks/code_and_coffee_aug_2017/"},{"content":" DISCLAIMER: If you consider yourself a beginner, intermediate, expert or a ninja in the Android realm, this secret sauce still applies to you.\n TL;DR: Build Something. No really! I am not kidding here. Hear me out on this.\nThe secret to becoming better at Android development, with all the new shiny stuff being released every year and making you go through the fear of missing out and what not is just to build out something that‚Äôs functional, even before reading a blog post or documentation.\nIt is really very easy to say you read up the documentation and you have gone through a blog post that explains the intricate concepts/a new library introduced by either Google or some 3rd party developer/company. I am not saying it‚Äôs not required or a waste of time because it‚Äôs very important to understand the concepts and then proceed with the using the new and shiny library or a new concept you just came to know about. You SHOULD always understand the underlying concepts to keep yourself from misusing the API/framework/architecture approach.\nBut here is where I would like to pause and mention a different approach which has worked for me always and with people I have introduced this concept too. The concept isn‚Äôt anything new. It‚Äôs a simple extra step of approaching a new library/architecture in Android realm, which is to‚Ä¶\n..build a simple, isolated and bare bone example android app to see a working example of what your are trying to¬†learn. That‚Äôs all. I call this Example Driven Development(EDD) approachü§ì.\nThe reason this works out very well is that these simplified examples Android apps are devoid of any complexity you would have in your own apps. If you are like me who likes to see things working before jumping into implementing it in the complex app I am working on, this approach will be very interesting to you (unless of-course you are already aware of it and use it, in that case, jump to the bottom of this story üòÖ )\nThese simplified examples android apps also provide you opportunities to experiment with concept/library you are trying to implement as well as spot possible bugs or issues far before you would have done otherwise if you would have implemented it directly inside your complex Android app.\nSome people might argue that it is a time taking process and eventually a waste of time and energy because at the end of the day the example app is thrown out of the window and the concept/library has to be implemented into the android app you are working on.\nI strongly disagree to that point, with my own personal reasons to justify that (based on my experience). This might not be true for everyone, but I have found it to work for the majority of people I have suggested this approach. I believe such simplified example android apps are like\n Unit Tests, simple and focused to understand the functionality and working of the concept/library. Comments in code, they are there for you to comeback to, understand how the concept/library works and plays along with on the platform at the most basic level.  It wouldn‚Äôt make sense for me to advocate an approach if I can‚Äôt show how I use it for myself, correct?\nSo I happen to be following this approach for sometime now and it so happens some people in the community reached out to me to share the same with them. And thus Android Example came to exist as it is today‚Ä¶\n\n‚Ä¶I created this repo last year where I started putting in all the example apps I had built while working on a feature/library/concept as I was doing android development at work or while just learning something new for myself. Turns out it has grown quite big now with 100+ android examples (including sample apps from android libraries I have built myself)\nDo check it out, to get a taste of what I have been blabbering about up until now. Just jump in and build up one of the apps demonstrating concept/library implementation that you always wanted to understand and get your hands dirty hacking on the code!\nBetter still, contribute back to the repo with more (missing) simplified android examples or improving the ones that exist in the Github repo. Contributions of any size are always welcome.\nIf you still think that this approach is flawed, I am more than happy to hear about anything else that has worked for you.\nIf you have suggestions or maybe would like me to add something to the content here, please let me know.\n P.S: I did a write up sometime back about how I manage dependencies for such a huge number of example apps. If you are interested in that you can find that here\n If you have suggestions or maybe would like me to add something to the content here, please let me know.\n","description":"","id":68,"section":"posts","tags":["android","best-practices"],"title":"Want To Step Up Your Android Learning Game? You Need To Read This First","uri":"https://crushingcode.nisrulz.com/posts/want-to-step-up-your-android-learning-game-you-need-to-read-this-first/"},{"content":" Google Developers Group - Cloud Vancouver, Vancouver, Canada Presentation  Event   ","description":"","id":69,"section":"talks","tags":["android","kotlin ","firebase"],"title":"Google I/O '17 Recap: Android, Kotlin and Firebase @GDG Cloud Vancouver","uri":"https://crushingcode.nisrulz.com/talks/gdg_cv_2017/"},{"content":" Code \u0026amp; Coffee, Vancouver, Canada Abstract   Kotlin programming language is gaining popularity nowadays. It‚Äôs a modern language that gives more power in everyday routines.It‚Äôs a pragmatic language with a very low learning curve and can be quickly grasped by Java developers.\n  Presentation  Video  Event   ","description":"","id":70,"section":"talks","tags":["kotlin"],"title":"Hello 'Kotlin' World @Code \u0026 Coffee","uri":"https://crushingcode.nisrulz.com/talks/code_and_coffee_may_2017/"},{"content":" VanDev: Vancouver\u0026rsquo;s Software Developers Network, Vancouver, Canada Abstract   As more and more people start building Android Libraries, the whole process of building a better API for developers is getting bloated and everyone is coming up with their own ideas. However, if android library developers follow a certain standard with a rationale they can avoid most of the pitfalls. Building an android library is easy, but building one that keeps in mind developer happiness is rare but definitely not hard. The session would cover how one can build android libraries taking in consideration to exposing more informative API, making sure the best resources are utilized efficiently and that one does not force the app developer with redundant dependencies and complexities.\n  ### Presentation  Event   ","description":"","id":71,"section":"talks","tags":["android","android-library","best-practices"],"title":"Build.Better.¬≠Android.Libraries @VanDev","uri":"https://crushingcode.nisrulz.com/talks/vandev_2017/"},{"content":"   It all starts when some android developer tries to figure out a solution to a problem he/she is having while building their \u0026ldquo;Awesome Android App\u0026rdquo;. During the process, most developers would encounter a couple of issues and in tandem, to those, they would come up with possible solutions.\nNow here is a thing, if you are like me, who believes that if the problem was big enough for me to spend some time on it and there wasn‚Äôt an existing solution out there, I would abstract the whole solution in a modular manner, which eventually turns out to be an android library. Just so that whenever in future I encounter this problem again, I can reuse this solution easily.\nSo far, so good. So you have built the library and probably started using it completely privately or if you think someone else could make use of the same solution you release the code as an android library i.e.you open source the code. I believe (..or rather that is what it looks like..) at this point everyone thinks they are done.\nWRONG! This very point is where most people usually miss out that this android library code is going to be used by other developers that do not sit next to you and that to them this is just some android library they wish to use to solve a similar problem. The better your approach of designing the API the better the chances of making sure that the library will be used as it is intended to be and whoever is using it isn‚Äôt confused. It should be clear from the very start what needs to be done to start using the library.\nWhy does this happen? The devs that write these android libraries are usually the ones who don‚Äôt care about the API design when building one. At least the majority of them don‚Äôt. Not because they are indifferent but I think most of them are just beginners and there is no set rules that they can look up to be better at designing the API. I was in the same boat sometime back, so I can understand the frustration of not having a lot of information in this field.\nSo I have had my experiences and I happen to release some of the code as android libraries (which you can check out here). I have come up with a quick list of points which each and every developer who designs an API in the form of Android Library should keep in mind (some of them may apply to designing API in general too).\n Point to note here, my list isn‚Äôt exhaustive and I may not be covering everything. It covers things I have encountered and wished I knew it when I started and thus I will keep on updating this post as and when I learn with more experience in the future.\n Before we dive into anything let‚Äôs first answer the most basic questions that everyone would have regarding building Android SDK/Library. So here goes\nWhy would you create an android SDK/Library? Sure it is\u0026hellip;well, you do not have to create an SDK/library in all cases. It makes more sense to decide on building one based on the understanding of what value you bring to the table. Ask yourself the below\nIs there some existing solution that would solve the problem?\nIf your answer is Yes, then possible try and use that existing solution.\nSay that does not solve your specific problem, even in that scenario it is better to start by forking the code, modifying it to solve the problem and then using it versus starting from scratch.\n Bonus Points to you if you go ahead and submit a Pull Request to get the fix you made pushed into the existing library code so that the community can benefit from it.\n If your answer is No, then go ahead and build the android sdk/library. Share it with the world later on so that others can make use of it in their projects.\nWhat are the packaging options for your artifacts? Even before you start building your library you need to decide on how do you want to deliver your artifacts to developers.\nLet me start here by describing some terms which we might use in the post here. To begin with let me describe what is an artifact first,\n In general software terms, an \u0026ldquo;artifact\u0026rdquo; is something produced by the software development process, whether it be software related documentation or an executable file.\nIn Maven terminology, the artifact is the resulting output of the maven build, generally a jar , war , aar or other executable files.\n Let‚Äôs look at the options you have\n Library Project: Code that you have to checkout and link into your project. It is the most flexible one as you can modify the code once you have it in your code, but also introduces issues such as being in sync with upstream changes. JAR: Java ARchive is a package file format typically used to aggregate many Java class files and associated metadata into one file for distribution. AAR: Android ARchive is similar to JAR with added functionality. Unlike JAR files, AAR files can contain Android resources and a manifest file, which allows you to bundle in shared resources like layouts and drawable in addition to Java classes and methods.  We have the artifact, Now what? Where does one host these artifacts? Not really\u0026hellip;\nTurns out you have a couple of options here too, each having its own pros and cons. Let‚Äôs take a look at each\nLocal AAR If you happen to be very specific about not wanting to put your android library artifact into any repository, you can generate your local aar file and use that directly. Read this stackoverflow answer to understand how to do that.\nIn a gist is you need to put the aar file in the libs directory (create it if needed), then, add the following code in your build.gradle :\n1 2 3 4 5 6 7 8  dependencies { compile(name:\u0026#39;nameOfYourAARFileWithoutExtension\u0026#39;, ext:\u0026#39;aar\u0026#39;) } repositories{ flatDir{ dirs \u0026#39;libs\u0026#39; } }   ..what comes with this is that now whenever you want to share your android library you are passing around your aar file(‚Ä¶which is not the best way to share your android library).\n Avoid doing this as much as you can, since it is prone to a lot of problems the biggest one being manageability and maintainability of the code base.\nAnother issue with this approach is you cannot make sure that the users of this artifact are in sync with the latest code.\nNot to mention the whole process is lengthy and prone to human error, just to integrate the library in an android project.\n Local/Remote Maven Repositories What if you wanted to use the android library privately?\nThe solution for that is to deploy your own instance of artifactory (read about how to do that here) or using Github or Bitbucket repository as your own maven repository (read about how to do that here).\n Again this is specific to you using your android library privately. If you want to share this with others its not the approach you wanna stick to.\n First issue that this approach has is that your artifact is in an private repository, to give access to this library you have to give access to the private repository which could be a security issue.\nSecond issue is that to use your android library one would need to include an extra line in their root build.gradle file\n1 2 3 4 5 6  allprojects { repositories { ... maven { url \u0026#39;http://url.to_your_hosted_artifactory_instance.maven_repository\u0026#39; } } }   ..which to be fair is an extra step and we are all here to make the process simpler. It is easier on the creator part to push the android library out quickly but adds an extra step for the users to use the library code.\nMaven Central, Jcenter or JitPack Now the easiest way to push it out immediately is via JitPack. So you would want to do that. JitPack takes your code from a public git repository, checks out the latest release code, builds it to generate the artifacts and later publishes to their self hosted maven repository.\nHowever the issue at hand is same as the one for local/remote maven repositories that users of your android library would need to include an extra line in their root build.gradle file\n1 2 3 4 5 6  allprojects { repositories { ... maven { url \u0026#39;https://www.jitpack.io\u0026#39; } } }   You can read about how to publish your android library to JitPack here.\nThe other option you have is of Maven Central or Jcenter.\nPersonally I would suggest you to stick to Jcenter as it well documented and better managed. It is also the default repository that is looked up for dependencies in Android projects (‚Ä¶unless someone changed it).\nIf you publish to Jcenter, bintray the company behind it gives you the option to sync with Maven Central from within their publishing platform. Once published its as simple as adding the below line to your build.gradle file to use the library in any android project\n1 2 3  dependencies { compile \u0026#39;com.github.nisrulz:awesomelib:1.0\u0026#39; }   You can read about how to publish your android library to Jcenter here.\nWith all those basic questions out of the way, let us look at things one should take care of while building an Android SDK/Library\nAvoid multiple arguments Every android library has to be usually initialized with some arguments and to do that you would usually be passing a set of arguments to either a constructor or have an init function to setup your library. Whenever doing that consider the below\nPassing more than 2‚Äì3 arguments to your init() function is bound to cause more headaches than provide ease of use.\nJust because its hard to remember the exact mapping of these arguments and the order in which they are declared in the library code.It also is prone to more mistakes as anyone can make a mistake of passing int value in a String field or vice versa.\n1 2 3 4 5  // DONOT DO THIS void init(String apikey, int refresh, long interval, String type); // DO this void init(ApiSecret apisecret);   where ApiSecret is an Entity Class, declared as below\n1 2 3 4 5 6 7 8 9 10 11 12  public class ApiSecret{ String apikey; int refresh; long interval; String type; // constructor  /* you can define proper checks(such as type safety) and * conditions to validate data before it gets set */ // setter and getters }   Or you can also use Builder Pattern as an alternative approach to the above.\nYou can read more about Builder Pattern here. JOSE LUIS ORDIALES talks in depth about how to implement it in your code, take a look here.\nEase of use When building your android library, keep in mind the usability of the library and the methods you expose. It should be\n  Intuitive\nFor everything thats happening in the android library code , there should be some feedback either in the logs or in the view. Depends on what kind of an android library is being built. If it does something that cannot be comprehended easily, the android library basically ‚Äúdoes not work‚Äù in the language of devs. It should do what the user of android library expects it to do without having to look up the documentation.\n  Consistent\nThe code for the android library should be well thought and should not change drastically between versions. Follow semantic versioning.\n  Easy to use, Hard to misuse\nIt should be easily understandable in terms of implementation and its usage in the first sight itself. The exposed public methods should have enough validation checks to make sure people cannot misuse its functionality other than what it was coded and intended for.Provide sane defaults and handle scenarios when dependencies are not present.\n  In short‚Ä¶\nMinimize Permissions In the current times, when everyone just wants to jump the road and ask as many permissions, you should pause and think about do you really need that extra permission. Take care of these points especially\n Minimize your permissions as much as you can. Use Intents to let dedicated apps do the work for you and return the processed result. Enable and disable your features based off if you have the permission for it. Do not let your code crash just because you do not have the said permission. If at all , you must educate the user well before requesting the permission and that why its required. If possible have a fallback functionality if the permission isn‚Äôt approved.  This is how you check if you have a said permission granted or not:\n1 2 3 4  public boolean hasPermission(Context context, String permission) { int result = context.checkCallingOrSelfPermission(permission); return result == PackageManager.PERMISSION_GRANTED; }   Some of the devs would say that they really need that specific permission, what to do in that case. Well, your library code should be generic for all types of apps that need the specific functionality. If you can provide hooks such as functions to let users of your android library pass the data you need the dangerous permission for. In that way, you do not force the devs to require a permission they do not want to. In absence of the permission provide a fallback implementation. Simple.\n1 2 3 4 5 6  /* Requiring GET_ACCOUNTS permission (as a requisite to use the * library) is avoided here by providing a function which lets the * devs to get it on their own and feed it to a function in the * library. */ MyAwesomeLibrary.getEmail(\u0026#34;username@emailprovider.com\u0026#34;);   Minimize Requisites We have all been there. We have a specific functionality that requires that the device has a certain feature. The usual way you would approach this is by defining the below in your manifest file\n1  \u0026lt;uses-feature android:name=\u0026#34;android.hardware.bluetooth\u0026#34; /\u0026gt;   ..the problem with this is that when this is defined in the android library code, this would get merged into the app manifest file during the manifest-merger phase of build and thus hide the app in Play Store for devices that do not have the bluetooth unit (this is something the Play Store does as filtering). So basically an app that was earlier visible to a larger audience would now be visible to a smaller audience, just cause you added that to your library code.\nWell, that‚Äôs not we want, do we? Nope. So how do we solve this.\nWell what you need to do is not include that uses-feature in your manifest file for the android library but rather check for the feature during runtime in your code as below\n1 2 3 4  String feature = PackageManager.FEATURE_BLUETOOTH; public boolean isFeatureAvailable(Context context, String feature) { return context.getPackageManager().hasSystemFeature(feature); }   .. this way there is no entry in the manifest and once it merges into the app, it won‚Äôt let the app get filtered in the Play Store.\nAs an added feature though if the feature is not available you can just disable the functionality in your library code and have some fallback functionality in place. It is a Win- Win for both the android dev who built the library and the dev who integrates the lib in their app.\nSupport different versions _How many are out there exactly?_ If you have a feature that‚Äôs available in a certain version of android, you should do the check for that in code and disable the feature if the version is lower than supported.\nAs a rule of thumb support the full spectrum of versions via defining in minSdkVersion and targetSdkVersion. What you should do internally to your library code is check for the android version at runtime and enable/disable the feature or use a fallback.\n1 2 3 4  // Method to check if the Android Version on device is greater than or equal to Marshmallow. public boolean isMarshmallow(){ return Build.VERSION.SDK_INT\u0026gt;= Build.VERSION_CODES.M; }   Do not log in production _Just DO NOT._ Almost every time I am asked to test an app or an android library project the first thing that I have seen is that they log everything up in the open, in their release code.\nAs a rule of thumb, never log in production. You should use build-variants with timber to help you in the process to separate logging info in production vs debug builds. A simple solution can be to provide a debuggable flag that the devs can flip to enable/disable logging from your android library\n1 2 3 4 5  // In code boolean debuggable = false; MyAwesomeLibrary.init(apisecret,debuggable); // In build.gradle debuggable = true   Do not crash silently and fail fast I have seen this a lot of times now. Some of the devs would not log their errors and exception in logcat! Which basically adds a headache to the users of the android library when they are trying to debug the code. In tandem to the last tip about not logging in production, you must understand that exceptions and errors need to be logged irrespective of being in debug or production. If you do not want to log in production, at least provide a functionality of enabling logs via passing some flag when you initialize your library. i.e\n1 2 3 4 5 6 7 8 9 10 11 12  void init(ApiSecret apisecret,boolean debuggable){ ... try{ ... }catch(Exception ex){ if(debuggable){ // This is printed only when debuggable is true  ex.printStackTrace(); } } .... }   It is important that your android library fails immediately and shows an exception to the user of your android library instead of being hung up on doing something. Avoid writing code which would block the Main Thread.\nDegrade gracefully in an event of error What I mean by this is that when say your android library code fails, try to have a check so that the code would not crash the app instead only the functionality provided by your library code is disabled.\nCatch specific exceptions Continuing with the last tip, you might notice that in my last code snippet I am using a try-catch statement. Catch statement specifically catches all Exception as its a base class. There is no specific distinction between one exception vs the other one. So what one must do is define specific types of Exception as per the requirement at hand. i.e NUllPointerException, SocketTimeoutException, IOException, etc.\nHandle poor network conditions _‚Ä¶this gets on my nerves, seriously!_ If the android library you wrote deals with making network calls, a very simple thing that usually goes unnoticed is that you should always consider a case of what happens if the network is slow or non-responsive.\nWhat I have observed is that library code developers assume that the network calls being made will always go through. A good example will be if your android library fetches some config file from the server to initialize itself. Now when developing the library the devs assume that the config file will always get downloaded. What they forget is that on a flaky network, the library code will not be able to download the config file and hence would crash the whole codebase. If simple checks and a strategy to handle such situations are built right into the android library code, it saves quite a number of people the headaches they would have otherwise.\nWhenever possible batch your network calls and avoid multiple calls. This also saves a lot of battery, read here\nReduce the amount of data you transfer over the network by moving away from JSON and XML to Flatbuffers.\nRead more about managing network here\nReluctance to include large libraries as dependencies This one goes without much explanation. As most of fellow Android Devs would be knowing, there is a method count limit of 65K methods for android app code. Now say if you have a transitive dependency on a large library, you would introduce two undesirable effects to the android app your library is being included\n You will considerably increase the method count of the android app, even though your own library codebase has a low method count footprint since you would transitively download the larger library and thus it will contribute to the method count too. If the method count hits the 65K limit, just because of your library code that transitively downloaded the larger library, the app developer will be forced to get into the lands of multi-dexing. Trust me on this, no one wants to get into the multi-dexing world.\nIn such a scenario, your library has introduced a bigger problem than solving the initial problem. So most probably your library will be replaced by some other library that does not add to the method count or basically that takes care everything in a better way.  Do not require dependencies unless you very much have to Now this rule is something that I think everyone knows, right? Do not bloat your android libraries with dependencies you do not need. But the point to note here is that even if you need dependencies you do not have to make the users of the library download it transitively. i.e the dependency does not not need to be bundled with your android library.\nWell, then the question arises as to how do we use it if it is not bundled with our library?\nWell the simple answer is you ask your users to provide that dependency to you during compile time. What this means is that not every user might need the functionality which requires the dependency. And for those users, if you cannot find the dependency as provided to you, you just disable the functionality in your code. But for those who need it, they will provide you the dependency, by including it in their build.gradle .\nHow to achieve this ? Check in classpath\n1 2 3 4 5 6 7 8 9  private boolean hasOKHttpOnClasspath() { try { Class.forName(\u0026#34;com.squareup.okhttp3.OkHttpClient\u0026#34;); return true; } catch (ClassNotFoundException ex) { ex.printStackTrace(); } return false; }   Next, you can use provided(Gradle v2.12 and below) or compileOnly(Gradle v2.12+)(Read here for complete information), so as to be able to get hold of the classes defined by the dependency during compile time.\n1 2 3 4 5 6  dependencies { // for gradle version 2.12 and below  provided \u0026#39;com.squareup.okhttp3:okhttp:3.6.0\u0026#39; // or for gradle version 2.12+  compileOnly \u0026#39;com.squareup.okhttp3:okhttp:3.6.0\u0026#39; }    A word of caution here, you can only use this functionality of requiring a dependency if its a complete java dependency. i.e if its an android library you want to include at compile time, you can not reference its transitive libs as well as resources which need to be present before compilation. A pure java dependency, on the other hand, has only java classes and they are the only ones that would be added to classpath during the compilation process.\n Try not to hog the startup _no kidding‚Ä¶_ What I mean by this is that, as soon as the app starts up try not to initialize your android library greedily. What that would tend to do is that it will increase the startup time for the App itself, even though the app does simply nothing at startup except off course initialize your android library.\nThe solution to such a problem is to do all work of initializing off the main thread i.e in a new thread, async. Better if you use Executors.newSingleThreadExecutor() and keep the number of thread to just one.\nAnother solution would be to initialize components of your android library on demand i.e Load them up/initialize them only when they are needed.\nRemove functionality and features gracefully Do not remove your public functions between versions as that would lead the builds of many users of your android library break and they would be clueless as to why did that even happen.\nSolution: Deprecate the functions by marking them @Deprecated and then define a roadmap of their removal in future versions.\nMake your code Testable Making sure you have tests in your code isn‚Äôt actually a rule to follow. You should be doing this everywhere and for every project app or library without saying.\nTest your library code by making use of Mocks, avoiding final classes, not having static methods, etc.\nWriting code with interfaces around your public API also makes your android library capable of swapping implementations easily and in turn makes the code more testable.i.e you can provide mock implementations easily when testing.\nDocument Everything! Being the creator of the android library you would know about your code, but the people who are going to use it won‚Äôt know about it unless you expect them to figure out by reading your source code (you should never need that).\nDocument your library well including every detail about how to use it and detailing every feature you have implemented.\n Create a Readme.md file and place it at the root of your repository. Have javadoc comments in your code, covering all public functions.\nThey should cover and explain  Purpose of the public method The arguments passed Return type   Bundle a sample app which demonstrates a working example of how the library and its features are used. Make sure you keep a detailed change log for your changes. A good place to do that would be to add the information right in your release section for the specific version tag.  _Screenshot of Github Releases section for Sensey android library_ ‚Ä¶and here is the link to releases section for Sensey\nProvide a most minimalistic Sample App This goes without saying. Always provide the most minimalistic Sample app with your library code, as that is the first thing other devs will checkout to understand a working example of using your android library.\nThe simpler it is the easier it is to understand. Making the sample app look fancy and code complex would only undermine the actual goal of the sample app, that is to provide a working example of using your android library.\nConsider putting up a License Most of the time developers forget about the Licensing piece. This is one factor that decides the adoption of your android library.\nSay you decided to license your android library in a restrictive manner i.e Using GPL license, would mean that whoever uses your library and makes modification will have to contribute back to your codebase in order to keep using the android library. Putting such restrictions hampers the adoption of android libraries and developers tend to avoid such codebase.\nThe solution to this is that you stick to more open licenses such as MIT or Apache 2.\nRead about licensing at this simple site and about need of copyright in your code here\nLast but not the least, get feedback Yeah, you heard that right! Your android library was built to cater to your needs initially. Once you put it out for others to use, you will come to know a lot of issues in it. Hear out your fellow devs and gather feedback. Act on it considering and weighing on the functionality to introduce or fix while maintaining the goals of the android library intact.\nSummary In short, you need to take care of the below points while building\n Avoid multiple arguments Ease of use Minimize permissions Minimize requisites Support different versions Do not log in production Do not crash silently and fail fast Degrade gracefully in an event of error Catch specific exceptions Handle poor network conditions Reluctance to include large libraries as dependencies Do not require dependencies unless you very much have to Try not to hog the startup Remove features and functionalities gracefully Make your code testable Document everything Provide a most minimalistic sample app Consider putting up a license Get feedback, lots of them  As a rule of thumb follow the rule of SPOIL-ing your Library\n Simple‚Ää‚Äî‚ÄäBriefly and Clearly expressed Purposeful‚Ää‚Äî‚ÄäHaving or showing resolve OpenSource‚Ää‚Äî‚ÄäUniversal Access, Free license Idiomatic‚Ää‚Äî‚ÄäNatural to the native environment Logical‚Ää‚Äî‚ÄäClear, Sound Reasoning  I read this sometime back in a presentation by some author I cannot recall. I took note of it as it makes a lot of sense and provides a clear picture in a very concise manner. If you know who the author is, please comment it and I will add his link and give due credit.\nEnding Thoughts I hope this post helps fellow android devs in building better android libraries. Android Community benefits extensively from using android libraries published daily by fellow android devs and if everyone starts to take care of their API design process keeping in mind the end user (other android developers) we would all be a step closer to an even better ecosystem as a whole.\nThese guidelines are compiled on my experience of developing android libraries. I would love to know your views on the pointers mentioned above. Please leave a comment, and let me know!\nIf you have suggestions or maybe would like me to add something to the content here, please let me know.\n","description":"","id":72,"section":"posts","tags":["android","android-library","best-practices"],"title":"Things I wish I knew when I started building Android SDK/Libraries","uri":"https://crushingcode.nisrulz.com/posts/things-i-wish-i-knew-when-i-started-building-android-sdk-libraries/"},{"content":"While working on various projects, there have been times when I have had to implement various gesture-based events. Every time I have had to do that I had to write the whole code for getting the SensorManager and getting access to the SensorEvent, plus the extra logic to detect the gesture. At first, it was just fine to do that since I was a beginner around that time. Then soon I got weary of the whole boilerplate. Around this time I started looking for a solution like an android library which would help me avoid all that boilerplate as well as enable me to maintain my code properly.\nProblem Well, the problem at hand is basically the boilerplate code and the need to maintain your code. Duplicating code across projects and remembering the logic for each gesture was bound to end up in one of the projects in some form of error. It was no doubt inefficient and very repetitive. I was looking for a solution to all this because as Software Engineers we all strive to automate tasks or remove the need for duplicating code. As Douglas Crockford has said\n ‚ÄúCode reuse is the Holy Grail of Software Engineering.‚Äù\n What was disappointing was that everything available was either too complex in terms of implementation or was very limiting.\n..and that‚Äôs when I decided to write my own Android Library, Sensey.\nSensey was born out of a need to be able to make Gesture Detection in android as simple as it can get. Not everyone needs to look up x, y, z values of Accelerometer or Azimuth, Pitch and Roll values of Orientation Sensor*. There are other devs who only wish to detect if a certain Gesture was detected or not (period).\nSo when I set out to build Sensey, I had a very clear mindset that I want it to be exactly that‚Ää‚Äî‚Ääsimple and clean.\nWhen I first wrote Sensey, it wasn‚Äôt perfect. But it did the job well for me. Since I couldn‚Äôt find the solution for myself in the first place, I guessed (or assumed) that at least a few devs in the community would be in the same boat as me and thus from the start I was sure to make it open sourced (You can check it out on Github).\nI recently released the version 1.6.0 of Sensey and you can tell that it has come a long way from what it was in version 1.0. Let‚Äôs walk through the process of integrating Sensey.It is super simple to integrate Sensey in your current android project.\nSimply add the below to your build.gradle file\n1  compile \u0026#39;com.github.nisrulz:sensey:1.6.0\u0026#39;   ..sync your gradle and then initialize Sensey in your activity\n1  Sensey.getInstance().init(context);   That‚Äôs it! Sensey at this point is integrated into your app. Now based on what kind of Gesture you want to detect, you will need to start and stop detectors provided by Sensey.\nSay for the sake of a simple example, if we wanted to detect a Shake Gesture. All you need to do is\n Create an instance of ShakeListener  1 2 3 4 5 6 7 8  ShakeDetector.ShakeListener shakeListener=new ShakeDetector.ShakeListener() { @Override public void onShakeDetected() { // Shake detected, do something  } @Override public void onShakeStopped() { // Shake stopped, do something  } };   Now to start listening for Shake gesture, pass the instance shakeListener to startShakeDetection() function\n1  Sensey.getInstance().startShakeDetection(shakeListener);   To stop listening for Shake gesture, pass the instance shakeListener to stopShakeDetection() function\n1  Sensey.getInstance().stopShakeDetection(shakeListener);   Yup, that‚Äôs about all it takes to know if a shake gesture was performed and when it stopped.\nLet‚Äôs check out the complete list of gesture detectors Sensey provides\nFlip Detector Sensey can detect if your device facing up or facing down. Check out the implementation here.\nLight Detector Sensey can detect if your device in a position where it is receiving any light or not. Check out the implementation here\nOrientation Detector Sensey can detect if your device‚Äôs top side is up or bottom side is up. It can tell if your device‚Äôs left side is up vs right side being up. Check out the implementation here.\nProximity Detector Sensey can detect if there is an object in the proximity of the device i.e either it is far or near to the device. Check out the implementation here.\nShake Detector Detects a Shake gesture performed on the device and also when the gesture stops.Check out the implementation here.\nWave Detector This one is a simple implementation. It uses proximity sensor with timing to detect if a hand wave gesture is performed in front of the device screen. Check out the implementation here.\nChop Detector Added in release 1.6.0 this one is brand new. It allows you to detect if a Chop gesture is performed with the device. Check out the implementation here.\nWrist Twist Detector Added in release 1.6.0 this one is another brand new detector. This one allows you to detect if the wrist was twisted in a circular manner while holding the device. Check out the implementation here.\nMovement Detector Another brand new detector added in release 1.6.0, it allows you to know if the device was moved or not. Once moved, it will also detect when the device becomes stationary. Check out the implementation here.\nSound Level Detector Another brand new detector added in release 1.6.0, it allows you to measure the loudness of sound in the environment around the device (calculated on a scale of dB i.e decibel).Check out the implementation here.\nPinch Scale Detector Sensey can use this detector to know if the user is executing a pinch scale in or out gesture on the touch screen. It will also be able to detect when the scale gesture was stopped. Check out the implementation here.\nTouch Type Detector This one can do a lot of things, you can choose which one to use or not to use. It can detect when someone on the device screen does the following:\n Single Tap Double Tap Two Finger Tap Three Finger Tap Scroll Up, Down, Left or Right Swipe Left or Right Long Press  Check out the implementation here.\nPhew! That‚Äôs a lot of gesture detectors packed inside one android library. Well, the list will keep on growing when more gestures get implemented in future releases. The core focus though would always remain the same,\n simplicity over complexity and ease of use.\n Who is it for For people who simply want to detect gesture as an event.\nWho is it not for For anyone who wishes to get more advance and wants to tap into the raw SensorEvent values.\nThat said, the android library isn‚Äôt perfect and I would love it if you can try it out and file issues on Github to make it better.\nCheck out Sensey on Github (Star the repo if you find it useful)\nIf you have suggestions or maybe would like me to add something to the content here, please let me know.\n","description":"","id":73,"section":"posts","tags":["android","android-library","sensor"],"title":"I could not find a simple Gesture Detection android library, so I built one","uri":"https://crushingcode.nisrulz.com/posts/i-could-not-find-a-simple-gesture-detection-android-library-so-i-built-one/"},{"content":"Most of us are engineers and at the end of the day humans. So basically we all are bound to make mistakes. As an Engineer we make such mistakes in code quite often and even if we do not admit it , they do exist. How many times have you published your code to a public VCS such as Github/Bitbucket with the credentials and then pulled down the repository only to reset the whole history and re-publish the new repository with the credentials cleaned out.\nPretty common, eh ? From what I have experienced it turns out, thats what most of the devs do. However if I told you that you can clean the credentials out and still keep the git history ! Sounds awesome right ? Thats coz it is !\nSo how does one do it ? I will be demonstrating a very simple example of a scenario I recently came across and how I solved it.\nIt can however be applied to various other use cases. You can extend it to remove complete files even üôÑ\nThe Problem We all have the license block in our code when pushing code to Github (If you don‚Äôt have one , then make sure you do have one from now onwards). It looks like below\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  /* * Copyright (C) 2016 Nishant Srivastava * * Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */   I use a single machine to code for my full time job and my own open source work (..almost like everyone) and I have preset my Android Studio to include the license block everywhere, but here is the catch, it is setup to add the license block of the company I work for (..thats coz its my full time job). It looks like this\n1 2 3 4 5 6 7  /* * Copyright (c) 2015 - 2016 CompanyName, Inc. * * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. * All Rights Reserved * Unauthorized copying of this file, via any medium is strictly prohibited */   I tend to add my own license when working with my own open source work after work hours and I have never got it messed up , up until recently. I recently pushed one of the .java class of one my android libraries to Github üò± üò± üò± üò±\nNow thats a bummer üò© to see your git history messed up as it was something that was not intended and I did not want to reset my repository. (..which would mean that I would lose all stars and issue).\nThe Solution ü§ì One tool : BFG Repo-Cleaner, from the tool‚Äôs homepage itself\n Removes large or troublesome blobs like git-filter-branch does, but faster.\n Yeah, thats all you need to cleanup your repo. What this tool does is that it searches for text inside your git history and replaces it with another version and creates a new commit and removes the old commits. But the order and history is still maintained. Pretty neat , eh ? I know :)\nSo here is how we clean our git history of unwanted data.\n  Download the latest release of bfg tool\n  Once its downloaded, navigate to the folder you have downloaded it and create a text file named replace.txt (as a matter of fact you can name it whatever you want. I like to name it as replace.txt)\n  Edit the content of the replace.txt file created as below\nCopyright (c) 2015 - 2016 CompanyName, Inc.==\u0026gt;Copyright (C) 2016 Nishant Srivastava where the syntax followed is text to replace==\u0026gt;text to replace with.\nNotice that there are no spaces right before and after the operator ==\u0026gt;\n More ways of defining how to replace text in this stackoverflow ans.\n   Now go ahead clone a mirror of your project repo.\n1  git clone ‚Äî mirror https://github.com/username/your-project.git     Once mirrored, now you need to run the command as below to clean your git history\n1  java -jar bfg-\u0026lt;latest_version\u0026gt;.jar --replace-text replace.txt -fi *.java your-project.git/     Next clean the reference logs and optimize the project again\n1  cd your-project.git/ git reflog expire --expire=now --all \u0026amp;\u0026amp; git gc --prune=now --aggressive     Next when done, push your changes to Github\n1  git push     DONE. That is all there is.\nOk, not really. Here is what you might encounter after you do a git push. Depending on your project size, you can get a lot of output.\nHere is what a successful overwrite of a branch would look like:\n+ 1289ad8‚Ä¶bee1ea4 master -\u0026gt; master (forced update) Unfortunately, you might also see something like this:\n! [remote rejected] refs/pull/53/head -\u0026gt; refs/pull/53/head (deny updating a hidden ref)  As mentioned in this issue,\nThe refs beginning ‚Äòrefs/pull' are synthetic read-only refs created by GitHub - you can\u0026rsquo;t update (and therefore \u0026lsquo;clean\u0026rsquo;) them, because they reflect branches that may well actually come from other repositories - ones that submitted pull-requests to you.\nSo, while you‚Äôve pushed all your real refs, the pull requests don‚Äôt get updated\nIn simple words Github also saves branches after you merged, closed and deleted them. You have no way to modify those branches that are owned by Github. The only way you can really remove them is by deleting the repository. And keep in mind that you also lose all stars, issues and so on when deleting a project. Which will be a bummer, you don‚Äôt want to do that, do you ?\n So how do you solve this , well you need to mirror your repo without the Github Pull Request in Step 4.\n In short, simply replace the catch-all refspec above with two more specific specs to just include all heads and tags, but not the pulls, and all the remote pull refs will no longer make it into your bare mirror\n Goto your-project.git folder and run git config -e . Next replace\nfetch = +refs/*:refs/* with\nfetch = +refs/heads/*:refs/heads/* fetch = +refs/tags/*:refs/tags/* fetch = +refs/change/*:refs/change/* This should solve your issue.\nAlso be careful because everyone who cloned or forked your project still has access to the original data. So thats that ü§î\nIf you want to find more about bfg , go ahead and read their awesome doc\nIf you have suggestions or maybe would like me to add something to the content here, please let me know.\n","description":"","id":74,"section":"posts","tags":["git"],"title":"Rewriting The History","uri":"https://crushingcode.nisrulz.com/posts/rewriting-the-history/"},{"content":"   Lets face it we all have been there , trying to fiddle with managing our emulators and dev devices. And at max we would do is try to manually manage it. Let me make this clear I am not talking about tests here as that\u0026rsquo;s all related to the code. My focus here is on managing the device/emulator that\u0026rsquo;s paired with your dev environment/system (..and to your IDE - Android Studio , if you still use Eclipse you are simply oblivious to the joys of coding in Android [here is a long blank stare from me to you] ).\nTechnically there is a tool called ADB (Android Debug Bridge) which maintains your connection with your device/emulator and the dev environment/system.\nFrom the wikipedia, it\u0026rsquo;s described as\n adb is the command line tool provided in the Android SDK package. adb stands for Android Debug Bridge which allows you to communicate with an emulator instance or connected Android-powered device to:\n Manage the state of an emulator or device. Run shell commands on a device. Manage port forwarding on an emulator or device. Copy files to/from an emulator or device.   Ok\u0026hellip; that sounds something of use but not convincing enough for you to try and play with it yet. Let me try and put forward some of the problem as a dev you are facing everyday (..and yet no one admits to them whenever it comes up in a conversation üôÑ..) and how can we solve this.\nUninstalling an app Oh yeah ..you are used to hitting Run in the IDE (or the keyboard shortcut for the same) and BOOM the apk installs in the device. But what do you do to uninstall the apk ? [Rolling eyes] ohh yeah I know ..you will open up your device/emulator and manually uninstall the app by dragging it to the trash bin in the home screen and hit yes when prompted to uninstall it. Hard ain\u0026rsquo;t it ? Yeah it is.\nADB can make it as simple as executing just a command\n1  adb uninstall \u0026lt;package_name\u0026gt;   if you wish to keep the data and cache directory intact but uninstall the app just add -k as an option to the command\n1  adb uninstall [-k] \u0026lt;package_name\u0026gt;    [ ] means its an optional parameter\n Of Course you can install an app too via\n1  adb install [-r] [-s] \u0026lt;package_name\u0026gt;   the options available to the command are\n -r : reinstall the app, keeping its data -s : install on SD card instead of internal storage  That looks neat.\nDirect ADB commands to specific devices when you have multiple of those connected Ok this one is my favorite üôÉ\nSo here is the thing. You have like 5-6 devices connected to your dev environment and now you want to do some work with a specific device at a time. Piece of üç∞\nEasy you say, right ? Like you can just fire up your Android Studio and execute the app in some specific device.\nNot so early üòÖ. Let me complete. You want to execute commands in a certain order üôÑ ..yeah it isn\u0026rsquo;t easy ar you thought before , eh ü§î\nFor our example here let\u0026rsquo;s assume we have like 3 devices and 2 emulators running, named as device_1, device_2, device_3, emu_1, emu_2.\nOur end goal is to be able to execute some adb command on the these devices/emulator in order such as\n emu_1 device_3 device_1 device_2 emu_2  Cool ? Now first of all let me give you the magic commands to handle this situation. Lets look at what\u0026rsquo;s available to us\n1  adb -d \u0026lt;command\u0026gt;   What this will do is it will directs command to the only connected USB device. Naice üôÇ\n You can also use adb -e \u0026lt;command\u0026gt; to directs command to the only connected Emulator\n But we wanna go a step ahead and orchestrate commands in a pattern (..by writing a bash script, obviously). But to do that I need to specifically direct commands to the device I want to control.\n1  adb -s \u0026lt;device_id\u0026gt; \u0026lt;command\u0026gt;    Get the device id by using adb devices\n Now we are talking üòé. Now the only thing I gotta do is create a bash script something like this\n1 2 3 4 5 6 7  #!/bin/bash  adb -s \u0026lt;emu_1_id\u0026gt; \u0026lt;some_command\u0026gt; adb -s \u0026lt;device_3_id\u0026gt; \u0026lt;some_command\u0026gt; adb -s \u0026lt;device_1_id\u0026gt; \u0026lt;some_command\u0026gt; adb -s \u0026lt;device_2_id\u0026gt; \u0026lt;some_command\u0026gt; adb -s \u0026lt;emu_2_id\u0026gt; \u0026lt;some_command\u0026gt;    where \u0026lt;some_command\u0026gt; does not have to be the same.\n ..and\n save it as execute_cmds_as_symphony.sh make it executable by running chmod +x execute_cmds_as_symphony.sh execute it by running ./execute_cmds_as_symphony.sh.  That\u0026rsquo;s all there is. Everytime you wanna run it like this just run the bash script ü§ì üòé\nThat\u0026rsquo;s like creating a symphony with your devices , except for the fact it\u0026rsquo;s not ..gonna be a symphony in the first place. And its just code executingü§î But you get my point , rightüòÖ\nConnect wirelessly with your device Read my post \u0026ldquo;Life without wires : ADB over WiFi\u0026rdquo; to learn how to set it up.\nDevice does not show up in the Android Studio deploy list There are times when the device would not show up in your IDE. Possible issue could be that adb is not responding.\nTo fix that simply kill the server and start it again.\n1 2 3 4 5  # Kill the server if it is running adb kill-server # Start the server adb start-server    I have seen that you also need to uncheck and then check ADB Integration inside Android Studio as an extra step.\n   To get Device Information 1 2 3 4 5 6 7 8  # Prints about the current state of the device : offline | bootloader | device adb get-state # Prints the serial number of the device adb get-serialno # Prints the device path adb get-devpath   Copy file to/from device/emulator You can advocate about trying to copy files from your device by opening up some software and then dragging and dropping things onto your desktop. But I am fan of automating things and the above mentioned method is completely fine if you are doing that for one file and only once or twice.\nIt changes when you wanted to do the same task again and again. When you want to automate things adb commands come in handy. You can even add them to a script and run it every time one of the task completes.\nTo push a file/dir to device\n1  adb push \u0026lt;local\u0026gt; \u0026lt;remote\u0026gt;   where \u0026lt;local\u0026gt; is file in your local system i.e my_image.png and \u0026lt;remote\u0026gt; is file location in device/emulator i.e /sdcard/Downloads/my_image.png\n1  adb push ~/Downloads/my_image.png /sdcard/Downloads/my_image.png   To pull a file/dir from device\n1  adb pull \u0026lt;remote\u0026gt; [\u0026lt;local\u0026gt;]   where \u0026lt;local\u0026gt; is file in your local system i.e my_image.png and \u0026lt;remote\u0026gt; is file location in device/emulator i.e /sdcard/Downloads/my_image.png\n1  adb pull /sdcard/Downloads/my_image.png my_image.png   Acting as a Developer utility-belt Generate Public/Private Key\n1  adb keygen \u0026lt;filename\u0026gt;    The private key is stored in \u0026lt;file\u0026gt;, and the public key is stored in .pub.\nAny existing files are overwritten.\n Get a bug report\n1 2 3 4 5  # Prints to the standard output adb bugreport # Writes to a file named bugreport.txt adb bugreport \u0026gt; bugreport.txt   Get list of all connected devices\n1  adb devices   Logging Of Course this is inbuilt into the IDE , but its worth knowing that it\u0026rsquo;s not just a window which you use in Android Studio, but so much more.\nLets check out its power when used from terminal\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  # Dumps log entries from 3 log buffers: main, events and radio adb logcat # Dumps log entries in long format adb logcat -v long # Dumps log entries into rotated log files on the device adb logcat -f /sdcard/Download/Android.log -r 1024 -n 8 # Dumps only error log entries generated from the \u0026#34;AndroidRuntime\u0026#34; process, including Java exceptions adb logcat AndroidRuntime:E *:S # Clears (flushes) the entire log and exits adb logcat -c # Dumps the log to the screen and exits adb logcat -d # Writes log message output to a file. The default is the \u0026#34;stdout - Standard Output\u0026#34; adb logcat -f \u0026lt;filename\u0026gt; # Prints the size of the specified log buffer and exits adb logcat -g   Logcat Format\nTo define the format of each log entry that is dumped , you need to set the output format for log messages\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  # The default is brief format adb logcat -v \u0026lt;format\u0026gt; # Display priority/tag and the PID of process issuing the message (the default format) adb logcat -v brief # Display PID with the log info  adb logcat -v process # Display the raw log message, with no other metadata fields adb logcat -v raw # Display the date, invocation time, priority/tag, and PID of the process issuing the message adb logcat -v time # Display the priority, tag, and the PID and TID of the thread issuing the message adb logcat -v thread # Display the date, invocation time, priority, tag, and the PID and TID of the thread issuing the message adb logcat -v threadtime # Display all metadata fields and separate messages with a blank lines adb logcat -v long   Filter your log data\nA few people would say that we can always use | grep \u0026quot;filter_text\u0026quot; appended to the adb logcat. Well you are right you can , but there are some neat tricks hidden in the actual implementation of logcat and you should look at them too.\n1  adb logcat \u0026lt;options\u0026gt; \u0026lt;process-tag\u0026gt;:\u0026lt;priority-code\u0026gt;    When filters are provided, the \u0026ldquo;logcat\u0026rdquo; command will dump log entries that are generated from specified processes with priorities higher than the specified code, plus all log entries that generated from unspecified processes.\nA wildcard character, \u0026ldquo;*\u0026rdquo;, can be used to represent all processes\n List of all priority codes that can be used in the \u0026ldquo;logcat\u0026rdquo; command:\n V - Verbose (lowest priority) D - Debug I - Info (default priority) W - Warning E - Error F - Fatal S - Silent (highest priority, on which nothing is ever printed)  To control the device This is pretty well know to people who are into Modding their device. But for people who aren\u0026rsquo;t going to mess with their device, here is what you can do with ADB\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # Remounts the /system partition on the device read-write adb remount # Reboots the device, optionally into the bootloader or recovery program adb reboot [bootloader|recovery] # Reboots the device into the bootloader adb reboot-bootloader # Restarts the adbd daemon with root permissions adb root # Restarts the adbd daemon listening on USB adb usb # Restarts the adbd daemon listening on TCP on the specified port adb tcpip \u0026lt;port\u0026gt;   Some other base functionality I am just going to list some more commands , just because well they exist! üòã\n1 2 3 4 5  # Show help about all commands for adb, check this to get info about more commands in adb adb help # Shows the version number for adb adb version   Comment/Suggestions always welcome.\nIf you would like to get more of such android tips and tricks, just hop onto my Android Tips \u0026amp; Tricks github repository. I keep updating it constantly.\nKeep on crushing code!ü§ì üòÅ\nI would like to mention that @pbreault wrote a plugin for Android Studio and Intellij IDEA called ADB Idea [Github], which allows you to do some of the common and straightforward interactions with ADB inside IntelliJ platform i.e Android Studio. Do check it out too üôÇ\n","description":"","id":75,"section":"posts","tags":["android","tools","adb"],"title":"Do you like to ADB?","uri":"https://crushingcode.nisrulz.com/posts/do-you-like-to-adb/"},{"content":" Google Developer Group New Delhi, New Delhi, India Abstract   Learn about how you can master various tools in Android to become an efficient and productive Android Dev,\n  Presentation  Event   ","description":"","id":76,"section":"talks","tags":["android","tools"],"title":"Mastering Tools for Android @GDG New Delhi","uri":"https://crushingcode.nisrulz.com/talks/gdgnd_8_oct_2016/"},{"content":" Google Developer Group New Delhi, New Delhi, India Abstract   Overview and demonstration of firebase and its services.\n  Presentation   ","description":"","id":77,"section":"talks","tags":["android","firebase"],"title":"Jumpstart Firebase @GDG New Delhi","uri":"https://crushingcode.nisrulz.com/talks/gdgnd_2_oct_2016/"},{"content":"   If I give you the code of an android app and ask you to provide me information regarding the android app like minSdkVersion, targetSdkVersion, permissions, configurations, almost anyone who knows how to code an android app would provide it to me in a few minutes. But what if I gave you an android apk file and then ask you to answer for the same ü§î Its tricky if you try to think at the very first instance.\nI actually ran into such a situation and even though I had known aapt tool for a long time, it didnot hit my head the very first instance when I had to get the permissions declared inside the apk. It was clear I needed to brush up the concepts and follow an efficient approach. This blog post will explain how to do so. Also helpful when you are trying to reverse lookup contents of any other app ü§ì\nOk, the most common way to approach this problem has to be this one\nGoing with the definition of an APK\n Android application package (APK) is the package file format used by the Android operating system for distribution and installation of mobile apps and middleware.\n\u0026hellip;APK files are a type of archive file, specifically in zip format packages based on the JAR file format, with .apk as the filename extension.\n ..hmm so its basically a ZIP format, so what I can do is rename the extension from .apk to .zip and I should be able extract the contents.\nCool, so we now see what the zip file contain and they are all available for inspection.\nWell at this point you would think that you have got access to all files so you can give me all the information right away. Well not so quick Mr.AndroidDev üò¨\nGo ahead try and open up the AndroidManifest.xml in some text editor to check out its content. This is what you would get\n..what it basically means is that the AndroidManifest.xml isn\u0026rsquo;t in human readable format anymore. So your chances of reading basic information regarding the apk from the AndroidManifest.xml goes down the drain üòû\n\u0026hellip;.\n\u0026hellip;\n..\n..Not really üòã There are tools to analyze the Android APK and there is one which has been there since the very beginning.\n I think its known to all the experinced devs but I am pretty sure a lot of budding as well as seasoned Android Devs have not even heard about it.\n The tool thats available as part of the Android Build Tool is\naapt - Android Asset Packaging Tool  This tool can be used to list, add and remove files in an APK file, package resources, crunching PNG files, etc.\n First of all, where exactly is this located ü§î\nGood question, its available as part of build tools in your android sdk.\n\u0026lt;path_to_android_sdk\u0026gt;/build-tools/\u0026lt;build_tool_version_such_as_24.0.2\u0026gt;/aapt ..ok so what can it actually do ? From the man pages of the tool itself\n aapt list - Listing contents of a ZIP, JAR or APK file. aapt dump - Dumping specific information from an APK file. aapt package - Packaging Android resources. aapt remove - Removing files from a ZIP, JAR or APK file. aapt add - Adding files to a ZIP, JAR or APK file. aapt crunch - Crunching PNG files.  We are interested in aapt list and aapt dump specifically as these are what will help us provide apk information.\nLets find information that we are looking for directly from the apk by running the aapt tool on it.\n ##### Get base information of the apk ```bash aapt dump badging app-debug.apk ``` \u0026gt; Result 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  package: name=\u0026#39;com.example.application\u0026#39; versionCode=\u0026#39;1\u0026#39; versionName=\u0026#39;1.0\u0026#39; platformBuildVersionName=\u0026#39;\u0026#39; sdkVersion:\u0026#39;16\u0026#39; targetSdkVersion:\u0026#39;24\u0026#39; uses-permission: name=\u0026#39;android.permission.WRITE_EXTERNAL_STORAGE\u0026#39; uses-permission: name=\u0026#39;android.permission.CAMERA\u0026#39; uses-permission: name=\u0026#39;android.permission.VIBRATE\u0026#39; uses-permission: name=\u0026#39;android.permission.INTERNET\u0026#39; uses-permission: name=\u0026#39;android.permission.RECORD_AUDIO\u0026#39; uses-permission: name=\u0026#39;android.permission.READ_EXTERNAL_STORAGE\u0026#39; application-label-af:\u0026#39;Example\u0026#39; application-label-am:\u0026#39;Example\u0026#39; application-label-ar:\u0026#39;Example\u0026#39; .. application-label-zu:\u0026#39;Example\u0026#39; application-icon-160:\u0026#39;res/mipmap-mdpi-v4/ic_launcher.png\u0026#39; application-icon-240:\u0026#39;res/mipmap-hdpi-v4/ic_launcher.png\u0026#39; application-icon-320:\u0026#39;res/mipmap-xhdpi-v4/ic_launcher.png\u0026#39; application-icon-480:\u0026#39;res/mipmap-xxhdpi-v4/ic_launcher.png\u0026#39; application-icon-640:\u0026#39;res/mipmap-xxxhdpi-v4/ic_launcher.png\u0026#39; application: label=\u0026#39;Example\u0026#39; icon=\u0026#39;res/mipmap-mdpi-v4/ic_launcher.png\u0026#39; application-debuggable launchable-activity: name=\u0026#39;com.example.application.MainActivity\u0026#39; label=\u0026#39;\u0026#39; icon=\u0026#39;\u0026#39; feature-group: label=\u0026#39;\u0026#39; uses-feature: name=\u0026#39;android.hardware.camera\u0026#39; uses-feature-not-required: name=\u0026#39;android.hardware.camera.autofocus\u0026#39; uses-feature-not-required: name=\u0026#39;android.hardware.camera.front\u0026#39; uses-feature-not-required: name=\u0026#39;android.hardware.microphone\u0026#39; uses-feature: name=\u0026#39;android.hardware.faketouch\u0026#39; uses-implied-feature: name=\u0026#39;android.hardware.faketouch\u0026#39; reason=\u0026#39;default feature for all apps\u0026#39; main other-activities supports-screens: \u0026#39;small\u0026#39; \u0026#39;normal\u0026#39; \u0026#39;large\u0026#39; \u0026#39;xlarge\u0026#39; supports-any-density: \u0026#39;true\u0026#39; locales: \u0026#39;af\u0026#39; \u0026#39;am\u0026#39; \u0026#39;ar\u0026#39; \u0026#39;az-AZ\u0026#39; \u0026#39;be-BY\u0026#39; \u0026#39;bg\u0026#39; \u0026#39;bn-BD\u0026#39; \u0026#39;bs-BA\u0026#39; \u0026#39;ca\u0026#39; \u0026#39;cs\u0026#39; \u0026#39;da\u0026#39; \u0026#39;de\u0026#39; \u0026#39;el\u0026#39; \u0026#39;en-AU\u0026#39; \u0026#39;en-GB\u0026#39; \u0026#39;en-IN\u0026#39; \u0026#39;es\u0026#39; \u0026#39;es-US\u0026#39; \u0026#39;et-EE\u0026#39; \u0026#39;eu-ES\u0026#39; \u0026#39;fa\u0026#39; \u0026#39;fi\u0026#39; \u0026#39;fr\u0026#39; \u0026#39;fr-CA\u0026#39; \u0026#39;gl-ES\u0026#39; \u0026#39;gu-IN\u0026#39; \u0026#39;hi\u0026#39; \u0026#39;hr\u0026#39; \u0026#39;hu\u0026#39; \u0026#39;hy-AM\u0026#39; \u0026#39;in\u0026#39; \u0026#39;is-IS\u0026#39; \u0026#39;it\u0026#39; \u0026#39;iw\u0026#39; \u0026#39;ja\u0026#39; \u0026#39;ka-GE\u0026#39; \u0026#39;kk-KZ\u0026#39; \u0026#39;km-KH\u0026#39; \u0026#39;kn-IN\u0026#39; \u0026#39;ko\u0026#39; \u0026#39;ky-KG\u0026#39; \u0026#39;lo-LA\u0026#39; \u0026#39;lt\u0026#39; \u0026#39;lv\u0026#39; \u0026#39;mk-MK\u0026#39; \u0026#39;ml-IN\u0026#39; \u0026#39;mn-MN\u0026#39; \u0026#39;mr-IN\u0026#39; \u0026#39;ms-MY\u0026#39; \u0026#39;my-MM\u0026#39; \u0026#39;nb\u0026#39; \u0026#39;ne-NP\u0026#39; \u0026#39;nl\u0026#39; \u0026#39;pa-IN\u0026#39; \u0026#39;pl\u0026#39; \u0026#39;pt\u0026#39; \u0026#39;pt-BR\u0026#39; \u0026#39;pt-PT\u0026#39; \u0026#39;ro\u0026#39; \u0026#39;ru\u0026#39; \u0026#39;si-LK\u0026#39; \u0026#39;sk\u0026#39; \u0026#39;sl\u0026#39; \u0026#39;sq-AL\u0026#39; \u0026#39;sr\u0026#39; \u0026#39;sr-Latn\u0026#39; \u0026#39;sv\u0026#39; \u0026#39;sw\u0026#39; \u0026#39;ta-IN\u0026#39; \u0026#39;te-IN\u0026#39; \u0026#39;th\u0026#39; \u0026#39;tl\u0026#39; \u0026#39;tr\u0026#39; \u0026#39;uk\u0026#39; \u0026#39;ur-PK\u0026#39; \u0026#39;uz-UZ\u0026#39; \u0026#39;vi\u0026#39; \u0026#39;zh-CN\u0026#39; \u0026#39;zh-HK\u0026#39; \u0026#39;zh-TW\u0026#39; \u0026#39;zu\u0026#39; densities: \u0026#39;160\u0026#39; \u0026#39;240\u0026#39; \u0026#39;320\u0026#39; \u0026#39;480\u0026#39; \u0026#39;640\u0026#39;    ##### Get list of permissions declared in the AndroidManifest of the apk ```bash aapt dump permissions app-debug.apk ``` \u0026gt; Result 1 2 3 4 5 6 7  package: com.example.application uses-permission: name=\u0026#39;android.permission.WRITE_EXTERNAL_STORAGE\u0026#39; uses-permission: name=\u0026#39;android.permission.CAMERA\u0026#39; uses-permission: name=\u0026#39;android.permission.VIBRATE\u0026#39; uses-permission: name=\u0026#39;android.permission.INTERNET\u0026#39; uses-permission: name=\u0026#39;android.permission.RECORD_AUDIO\u0026#39; uses-permission: name=\u0026#39;android.permission.READ_EXTERNAL_STORAGE\u0026#39;    ##### Get list of configurations for the apk ```bash aapt dump configurations app-debug.apk ``` \u0026gt; Result 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  large-v4 xlarge-v4 night-v8 v11 v12 v13 w820dp-v13 h720dp-v13 sw600dp-v13 v14 v17 v18 v21 ldltr-v21 v22 v23 port land mdpi-v4 ldrtl-mdpi-v17 hdpi-v4 ldrtl-hdpi-v17 xhdpi-v4 ldrtl-xhdpi-v17 xxhdpi-v4 ldrtl-xxhdpi-v17 xxxhdpi-v4 ldrtl-xxxhdpi-v17 ca af .. sr b+sr+Latn ... sv iw sw bs-rBA fr-rCA lo-rLA ... kk-rKZ uz-rUZ   ..also try out these\n# Print the resource table from the APK. aapt dump resources app-debug.apk # Print the compiled xmls in the given assets. aapt dump xmltree app-debug.apk # Print the strings of the given compiled xml assets. aapt dump xmlstrings app-debug.apk # List contents of Zip-compatible archive. aapt list -v -a app-debug.apk .. as you can see you can easily get the information without even going through the process of unzipping the apk, but by using the aapt tool directly on the apk.\nThere is more that you can do , taking more info from the man pages of the aapt tool\n1 2 3 4 5 6 7 8  aapt r[emove] [-v] file.{zip,jar,apk} file1 [file2 ...] Delete specified files from Zip-compatible archive. aapt a[dd] [-v] file.{zip,jar,apk} file1 [file2 ...] Add specified files to Zip-compatible archive. aapt c[runch] [-v] -S resource-sources ... -C output-folder ... Do PNG preprocessing and store the results in output folder.   ..I will let you explore these on your own üôÇ\nComment/Suggestions always welcome.\nReference Link\n Got featured in AndroidWeekly Issue 224, thank you for the love\n If you would like to get more of such android tips and tricks, just hop onto my Android Tips \u0026amp; Tricks github repository. I keep updating it constantly.\nKeep on crushing code!ü§ì üòÅ\n","description":"","id":78,"section":"posts","tags":["android","tools"],"title":"Whats in the APK?","uri":"https://crushingcode.nisrulz.com/posts/whats-in-the-apk/"},{"content":"   Agree or not agree, but on an average consensus pretty much every android dev goes through the loop of Update Dependencies.Code.Repeat. for each of his/her android project. Its frustrating, a waste of time and super annoying when you would want to have the same version across all projects.\nOne of such situations that I recently got into was trying to keep all my apps under Android-Examples repository on github updated. As you can see it the repository has multiple small and simple examples of completely functional android apps. Keeping all of them updated was becoming a hard task whenever a new version of android-gradle-plugin, support library or google play services would be released.\nInitially I would go on to update each app in the repository and then commiting it back. As you can see it wasn\u0026rsquo;t the most efficient way to do it. So sometime back I decided that I am going to put an end to this process and make all version configurations common to all apps and thus escape the Update Dependencies.Code.Repeat. loop of hell.\nSo now that I had decided to not update each app individually, I decided to look at my options. The obvious one here was looking at Gradle that supported variables.\nNow we all might have done this for support-library , where we define a variable inside our module\u0026rsquo;s build.gradle and then reference it as below\n1 2 3 4 5 6  def supportLibVer = \u0026#34;24.2.0\u0026#34; .. dependencies { compile \u0026#34;com.android.support:appcompat-v7:$supportLibVer\u0026#34; }   So what I have done here is basically\n  Defined a variable named supportLibVer with the value 24.2.0 using def keyword.\n  Next referenced it by using it in the compile statement as $supportLibVer\n Note that the surrounding quote is a double quote \u0026quot; and not a single quote.\n   Now this approach is basically using a Local Variable , which means that this variable works in the scope of the build.gradle file it is defined in.\nWe want to externalize the variable from outside the build.gradle file of the module, so as to provide values to all modules of the project.\nGradle\u0026rsquo;s Extra properties comes to the rescue for this.\nThe way we use them is by moving our varibales to an ext block inside the project\u0026rsquo;s root build.gradle file and referencing it as below\nProject\u0026rsquo;s root build.gradle file\n1 2 3  ext { supportLibVer = \u0026#34;24.2.0\u0026#34; }   Now reference it in all/required modules as below\n1 2 3 4  .. dependencies { compile \u0026#34;com.android.support:appcompat-v7:$rootProject.ext.supportLibVer\u0026#34; }    Notice that referencing variable is changed now to $rootProject.ext.supportLibVer\n ..hmm looks like we are going somewhere with this. So till now we have been able to externalize the variables so as to facilitate common values to the multiple modules inside a particluar project.\nBut my requirement was a step ahead than this. I wanted to provide common values to all projects inside my repository and not just to one particular project. So I needed to provide an external gradle file (that I place at the root of the folder which contains all my projects) with all ext variables defined in it , something like this [dependencies.gradle]\n1 2 3 4 5 6 7 8 9 10 11  ext { androidPluginVer = \u0026#34;2.1.3\u0026#34; compileSdkVer = 24 buildToolsVer = \u0026#34;24.0.2\u0026#34; minSdkVer = 9 targetSdkVer = 24 supportLibVer = \u0026#34;24.2.0\u0026#34; googlePlayServicesVer = \u0026#34;9.4.0\u0026#34; }   But how do I make them available to each sub-module inside each of my projects?\nI had to dig the gradle docs and buried deep inside is a section that talks about it, called Subproject Configuration.\nSo after some practical experimentation i figured out how I can use it to facilitate the ext variables to sub-modules of each project.\nThis is what I did next in each Project\u0026rsquo;s root build.gradle, I added a subprojects configuration section just below allprojects configuration section and added a apply from: statement to apply my external gradle file to each sub-module.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  // Top-level build file where you can add configuration options common to all sub-projects/modules. buildscript { ... } allprojects { .. } // This is added to apply the gradle file to each module under the project subprojects { apply from: \u0026#39;../../dependencies.gradle\u0026#39; } ..   What this did was that it made my external variables, defined in dependencies.gradle files available in the scope of each module in each of my projects now and I could now reference them simply as\n1 2 3 4  .. dependencies { compile \u0026#34;com.android.support:appcompat-v7:$supportLibVer\u0026#34; }   Good. Now this makes life so much easy and now I can provide common values to all the dependencies.\nBut wait, if you would try to provide a variable and facilitate the version for android-gradle-plugin, you would see that this wont work!\nWell thats a bummer, as I needed to make that as a common variable too.\nSo after much experimentation, I figured out it was because when we define the subprojects configuration , it doesnot apply to the root project\u0026rsquo;s build.gradle. Hmm, this is news as we had almost solved the problem.\nSo the way I solved this is by applying the dependencies.gradle to the buildscript section directly inside the root build.gradle for each Project. So now each project\u0026rsquo;s root build.gradle script became as below\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  // Top-level build file where you can add configuration options common to all sub-projects/modules. buildscript { // This is added to apply the gradle file to facilitate providing variable values to root build.gradle of the project  apply from: \u0026#39;../dependencies.gradle\u0026#39; .. dependencies { classpath \u0026#34;com.android.tools.build:gradle:$androidPluginVer\u0026#34; .. } } allprojects { .. } // This is added to apply the gradle file to each module under the project subprojects { apply from: \u0026#39;../../dependencies.gradle\u0026#39; } ..   Here is a functional root build.gradle script from one of the project of my repository itself and Here is a functional module build.gradle script from the same project of my repository itself. You can see I extended the idea to start externalizing the variable for buildToolsVersion and compileSdkVersion too :D\nGreat! Now we only need to change the values inside the dependencies.gradle file and hey presto! when ever I would be loading up any of the projects , they will reference the values from this file and would automagically be working of the most udpated version.\nYou can checkout the Android-Examples repository to see a fully functional model of this approach.\nPhew, thats all for this time. Hoping it will solve any similar problems, as this approach can be definitely be extended.\n Got featured in AndroidWeekly Issue 221, thank you for the love\n If you have suggestions or maybe would like me to add something to the content here, please let me know.\n","description":"","id":79,"section":"posts","tags":["android","gradle"],"title":"Update Dependencies-Code-Repeat","uri":"https://crushingcode.nisrulz.com/posts/update-dependencies-code-repeat/"},{"content":" Udacity Community Delhi NCR, New Delhi, India Abstract   Deliver the best performance across a range of connections, data plans, and devices.\n  Presentation  Event   ","description":"","id":80,"section":"talks","tags":["android"],"title":"Building Apps for Billions @Udacity Community","uri":"https://crushingcode.nisrulz.com/talks/gdgnd_aug_2016/"},{"content":"Ok so you already know how to build your android library and publish it to JCenter/MavenCentral. This post is third in parts of a series.\nP.S. : If you dont know how to , go ahead and have a look\n Guide to publishing your Android Library via Jcenter/Bintray Guide to publishing your Android Library via MavenCentral Guide to publishing your Android Library via JitPack  The very first question that people would have is\nWhat is JitPack As per their website\n Easy to use package repository for Git. Publish your JVM and Android libraries\n So basically JitPack builds Git projects on demand and provides you with ready-to-use artifacts (jar, aar).\nWhy would I use it instead of JCenter or MavenCentral ? Publishing to MavenCentral or JCenter is a well set process which involves people to go through steps in order to let their artifacts be hosted on these repositories. The process also involves you to wait for a certain few hours to get everything synced up.\nOn the other hand JitPack is the most simplest way of publishing the artifacts. There is no need to go through project build and upload steps. All you need to do is\n Push your project to GitHub Tag a release Head over to JitPack and request to publish the release.  \u0026hellip;and thats it. You have your library code available in just few minutes.\nIt just works! Cool , isn\u0026rsquo;t it!\nI will walk you through the process to help understand the process in a more practical mannner.\nThe first step that you need is to create and build your Android \u0026ldquo;Awesome\u0026rdquo; Library, which can be read in the first post of this series here. If you have not done so , then please go ahead and read it up. Once done comeback here to read further.\nAssuming you already have your Android \u0026ldquo;Awesome\u0026rdquo; Library built , I will jump directly to steps involved in publishing your library to JitPack\nPublishing your Android \u0026ldquo;Awesome\u0026rdquo; Library  Once project is synced, add the android-maven-gradle-plugin to classpath in build.gradle file at root project level.  1 2 3 4 5 6 7  dependencies { classpath \u0026#39;com.android.tools.build:gradle:2.1.2\u0026#39; .. .. // Setup the android-maven-gradle-plugin in the classpath  classpath \u0026#39;com.github.dcendents:android-maven-gradle-plugin:1.3\u0026#39; ..     Next, apply the android-maven-gradle-plugin to the build.gradle file at library module level. Also add the group variable.\n1 2 3 4 5  apply plugin: \u0026#39;com.android.library\u0026#39; // Required plugin in library module  apply plugin: \u0026#39;com.github.dcendents.android-maven\u0026#39; // Replace nisrulz with \u0026lt;your_github_username\u0026gt;  group=\u0026#39;com.github.nisrulz\u0026#39;     Create a release TAG in git\n  git tag -a 1.0 -m \u0026quot;v1.0\u0026quot; git push origin 1.0   Once everything is pushed and the release TAG is also pushed, goto https://www.jitpack.io/#username/reponame where replace username with your github username and reponame with the reponame of the android project.\n  Select the release you would like to share by clicking the ‚ÄòGet It‚Äô button next to the list of releases of your repository.\n  Using your Android \u0026ldquo;Awesome\u0026rdquo; Library in other projects   Next the same page at Jitpack would show you how to use the library in your other android projects. Something like below\nSelectable code\n1 2 3 4 5 6 7  repositories { jcenter() maven { url ‚Äúhttps://jitpack.io‚Äù } } dependencies { implementation \u0026#39;com.github.nisrulz:awesomelib:1.0\u0026#39; }     Let the world know of your AwesomeLib\n Add a readme that explains how to integrate and use your Awesome library Add a license block. Also include the JitPack badge provided by jitpack in your readme\n Promote your lib on social media so that others can know about it. Always add a working sample app in your project that demonstrates your library in use. Add screenshots if possible in your readme.    The code for the AwesomeLibrary and this guide itself is open sourced and available on github\nStar it or just fork it to use it.\nAnd thats it for this series. I hope it helps people to deploy their android libraries for the world to use.\nIf you have suggestions or maybe would like me to add something to the content here, please let me know.\nHave fun crushing code :D\n","description":"","id":81,"section":"posts","tags":["android","android-library","maven"],"title":"Guide to publishing your Android Library via JitPack","uri":"https://crushingcode.nisrulz.com/posts/publish-your-android-library-via-jitpack/"},{"content":"If you come from the java world, you would already be knowing about MavenCentral in a big way. MavenCentral is the central repository which hosts all the maven artifacts and one can reference them from anywhere in the world. Android artifacts can also be hosted on MavenCentral in a similar manner. Here I am going to document the process to publish an android library to MavenCentral, as I followed it.\nThis post is second in parts of a series. If you didnot read the others in series , go have a look\n Guide to publishing your Android Library via Jcenter/Bintray Guide to publishing your Android Library via MavenCentral Guide to publishing your Android Library via JitPack  The first step need you to create and build your Android \u0026ldquo;Awesome\u0026rdquo; Library and can be read in the first post of this series here. If you have not done so , then please go ahead and read it up.\nAssuming you already have your Android \u0026ldquo;Awesome\u0026rdquo; Library built , I will jump directly to steps involved in publishing your library to MavenCentral\nPublishing your Android \u0026ldquo;Awesome\u0026rdquo; Library Setup GPG and generate yourself a key.\n  Now list your gpg keys\n1  $ gpg --list-keys    There the first line will be like pub XXXXX/YYYYYYYY . Remember that ‚ÄòYYYYYYYY‚Äô part, it‚Äôs you key ID.\n   Next, publish your keys\n1 2  $ gpg --keyserver hkp://keyserver.ubuntu.com --send-keys YYYYYYYY $ gpg --keyserver hkp://pgp.mit.edu --send-keys YYYYYYYY     To ensure your keys were published\n1 2  $ gpg --keyserver hkp://pgp.mit.edu --search-keys username@example.com # Use your email     Setup Sonatype account\n Create a JIRA account on Sonatype\n  and Login\n  Once you are logged in, create a new issue\n  Fill out the form as below\n Project : Community Support - Open source Issue Type : New Project Group Id : com.github.github_username Project URL : https://github.com/github_username/project_name SCM url : https://github.com/github_username/project_name.git Username : sonatype_username Already Synced to Central : No    Next hit Create. After that, it can take up to 2 business days to process your issue. Then you will receive a confirmation that your configuration has been prepared and you can publish your library.\n IMPORTANT : Do not deploy until after you have received an e-mail notice indicating that the ticket is Resolved.\n   Update gradle.properties on your local machine at location ~/.gradle/gradle.properties and include\n NEXUS_USERNAME=sonatype_username NEXUS_PASSWORD=sonatype_password signing.keyId=gpg_key_id signing.password=gpg_password signing.secretKeyRingFile=/Users/username/.gnupg/secring.gpg org.gradle.daemon=true    IMPORTANT: Steps for setting up your sonatype account up till here are required only once. The steps after these are required whenever publishing your android library, even if its a new one. Just remember to configure it well in your gradle.properties\n Add the plugin by Chris Banes to your library\u0026rsquo;s build.gradle.  NOTE: Below is a fork of the original script written by Chris Banes.\n 1  apply from: \u0026#39;https://raw.github.com/nisrulz/gradle-mvn-push/master/gradle-mvn-push.gradle\u0026#39;   and define the required variables in the gradle.properties.\n# Properties used by gradle maven-push plugin VERSION_NAME=1.0.0 VERSION_CODE=1 POM_NAME=\u0026lt;Library_Name\u0026gt; POM_ARTIFACT_ID=\u0026lt;library_name_smallcaps\u0026gt; POM_DESCRIPTION=\u0026lt;library_description\u0026gt; POM_URL=https://github.com/\u0026lt;username\u0026gt;/\u0026lt;repo_name\u0026gt; POM_SCM_URL=https://github.com/\u0026lt;username\u0026gt;/\u0026lt;repo_name\u0026gt; POM_SCM_CONNECTION=scm:git@github.com:\u0026lt;username\u0026gt;/\u0026lt;repo_name\u0026gt;.git POM_SCM_DEV_CONNECTION=scm:git@github.com:\u0026lt;username\u0026gt;/\u0026lt;repo_name\u0026gt;.git   Run in terminal to publish your artifacts\n1  ./gradlew build clean uploadArchive     Login into Nexus Repository Console and search for your package name.\n  Next\n  Close the staged artifact.[wait]\n  Release the closed artifact (keep drop artifact selected).[wait]\n  Wait for some hours before everything gets synced with MavenCentral.\n  Using your Android \u0026ldquo;Awesome\u0026rdquo; Library in other projects Your code is available through MavenCentral if you have received the mail with confirmation\nYou can use the lib now as follows\n1 2 3  dependencies { implementation \u0026#39;\u0026lt;group_name\u0026gt;:\u0026lt;artifact_name\u0026gt;:1.0\u0026#39; }   i.e for the sample lib in this repo , awesomelib\n1 2 3  dependencies { implementation \u0026#39;com.github.nisrulz:awesomelib:1.0\u0026#39; }     Let the world know of your AwesomeLib\n  Add a readme that explains how to integrate and use your Awesome library Add a license block as in this repo Also include a badge of MavenCentral in your readme Promote your lib on social media so that others can know about it. Always add a working sample app in your project that demonstrates your library in use. Add screenshots if possible in your readme.     The code for the AwesomeLibrary and this guide itself is open sourced and available on github\nStar it or just fork it to use it.\n","description":"","id":82,"section":"posts","tags":["android","android-library","maven"],"title":"Guide to publishing your Android Library via MavenCentral","uri":"https://crushingcode.nisrulz.com/posts/publish-your-android-library-via-mavencentral/"},{"content":" NOTE: Jcenter has been sunset. It is encouraged to publish to MavenCentral.\nYou checkout the other guide: Guide to publishing your Android Library via MavenCentral\n Developers are a different kind of people altogether. They tend to be lazy but strive to be super efficient at the same time.\nA lot of this can be seen in the Android world where a certain library pops up everyday to solve a specific problem or to make the complex processes simpler.\nI have a certain knack for re-using code blocks just to avoid repeative tasks and to facilitate this I usually end up converting those codeblocks into an android library.\n But what if I wanted to share my android library with the world?\n Well in a nutshell the steps to follow would be as below :\n  First of all I need to open source the andorid library, which should be easy as you can push it to Github or any other public git repository.\n  Next I need to push the android library as a maven artifact (aar/jar with a POM) to all of the or one of the below central repositories\n JCenter/Bintray Maven Central Jitpack    We will walkthrough the process of publishing to each if these central repositories in the upcoming posts of this series.\nFor now lets lookup the steps to publish your android library to JCenter/Bintray.\nCreating your Android \u0026ldquo;Awesome\u0026rdquo; Library  You can skip to the next part if you already have this built\n   Create an Android project or open an existing one in Android Studio\n  Init the project with git and also create a repo on Github for the same. Each step here onwards represent a commit and should be pushed to github.\n  Create and add a new module and choose Android Library.\n Goto File\u0026gt;New\u0026gt;New Module.. and select Android Library.\n     Implement your library code inside the library module you created in the last step.\n  Next add the library module as a dependency to the app module.\n  Goto File\u0026gt;Project Structure.. Select app module in the sidebar Select the Dependencies tab At the bottom is a + icon, click that and select Module dependency and select your library module. Press apply or ok.     Publishing your Android \u0026ldquo;Awesome\u0026rdquo; Library  Once project is synced, add the required plugins to classpath in build.gradle file at root project level, as shown below  1 2 3 4 5 6 7 8 9  dependencies { classpath \u0026#39;com.android.tools.build:gradle:2.1.3\u0026#39; .. .. // Required plugins added to classpath to facilitate pushing to Jcenter/Bintray  classpath \u0026#39;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7\u0026#39; classpath \u0026#39;com.github.dcendents:android-maven-gradle-plugin:1.4.1\u0026#39; .. }    Next, apply the bintray and install plugins at the bottom of build.gradle file at library module level. Also add the ext variable with required information as shown below  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  apply plugin: \u0026#39;com.android.library\u0026#39; ext { bintrayRepo = \u0026#39;maven\u0026#39; bintrayName = \u0026#39;awesomelib\u0026#39; // Has to be same as your library module name  publishedGroupId = \u0026#39;com.github.nisrulz\u0026#39; libraryName = \u0026#39;AwesomeLib\u0026#39; artifact = \u0026#39;awesomelib\u0026#39; // Has to be same as your library module name  libraryDescription = \u0026#39;Android Library to make any text into Toast with Awesome prepended to the text\u0026#39; // Your github repo link  siteUrl = \u0026#39;https://github.com/nisrulz/UploadToBintray\u0026#39; gitUrl = \u0026#39;https://github.com/nisrulz/UploadToBintray.git\u0026#39; githubRepository= \u0026#39;nisrulz/UploadToBintray\u0026#39; libraryVersion = \u0026#39;1.0\u0026#39; developerId = \u0026#39;nisrulz\u0026#39; developerName = \u0026#39;Nishant Srivastava\u0026#39; developerEmail = \u0026#39;nisrulz@gmail.com\u0026#39; licenseName = \u0026#39;The Apache Software License, Version 2.0\u0026#39; licenseUrl = \u0026#39;http://www.apache.org/licenses/LICENSE-2.0.txt\u0026#39; allLicenses = [\u0026#34;Apache-2.0\u0026#34;] } .. .. // Place it at the end of the file  apply from: \u0026#39;https://raw.githubusercontent.com/nisrulz/JCenter/master/installv1.gradle\u0026#39; apply from: \u0026#39;https://raw.githubusercontent.com/nisrulz/JCenter/master/bintrayv1.gradle\u0026#39;    Edit your local.properties  bintray.user=\u0026lt;your_bintray_username\u0026gt; bintray.apikey=\u0026lt;your_bintray_apikey\u0026gt;  NOTE : bintray.user and bintray.apikey have to be in local.properties specifically or else you will get error later regarding the user and apikey values not available to the bintrayUpload gradle task as below\n No value has been specified for property 'apiKey'. No value has been specified for property 'user'.   Now lets setup Bintray before we can push our artifact to it.\n  Register for an account on bintray.com and click the activation email they send you.\n  Add a new Maven repository and click Create New Package\n  You should now have a maven repository. For instance:\nhttps://bintray.com/nisrulz/maven\n  Now once you have your maven repo setup , click on Edit\n![edit](/images/posts/uploadtojcenter/edit.jpeg)  and see that you have selected the option GPG sign uploaded files using Bintray's public/private key pair. and then click Update.\n    Once everything is configured, run the below in your terminal in your root of the project\n  1  ./gradlew clean build install bintrayUpload     Now once your project is up on bintray, simply hit Add to Jcenter button to sync with JCenter.\n  Using your Android \u0026ldquo;Awesome\u0026rdquo; Library in other projects  Your code is available through the private repo at bintray  1 2 3 4 5 6 7  repositories { jcenter() maven { url \u0026#39;https://dl.bintray.com/\u0026lt;bintray_username\u0026gt;/maven\u0026#39; } } dependencies { implementation \u0026#39;com.github.\u0026lt;bintray_username\u0026gt;:\u0026lt;library_module\u0026gt;:1.0\u0026#39; }   i.e for the sample lib in this repo , awesomelib\n1 2 3 4 5 6 7  repositories { jcenter() maven { url \u0026#39;https://dl.bintray.com/nisrulz/maven\u0026#39; } } dependencies { implementation \u0026#39;com.github.nisrulz:awesomelib:1.0\u0026#39; }     Your code is available through JCenter if you have received the mail with confirmation\n  Few things to note when you received the final email.\n  Goto your maven repo at bintray and verify that you have Jcenter under the Linked to section\n  Now you would also want to sync the artifact to MavenCentral, for that you need to hit the Maven Central tab and sync\n  Once you hit sync you would see as below. Wait for few hours for the sync to occur.\n  You can use the lib now as follows\n1 2 3  dependencies { implementation \u0026#39;com.github.\u0026lt;bintray_username\u0026gt;:\u0026lt;library_module\u0026gt;:1.0\u0026#39; }   i.e for the sample lib in this repo , awesomelib\n1 2 3  dependencies { implementation \u0026#39;com.github.nisrulz:awesomelib:1.0\u0026#39; }     Let the world know of your AwesomeLib\n  Add a readme that explains how to integrate and use your Awesome library Add a license block as in this repo Also include the Bintray badge provided by Bintray in your readme\n Promote your lib on social media so that others can know about it. Always add a working sample app in your project that demonstrates your library in use. Add screenshots if possible in your readme.     The code for the AwesomeLibrary and this guide itself is open sourced and available on github\nThe bintray and install plugins are also available on github. You may fork it and use it in your namespace.\nStar it or just fork it to use it.\nThis post is first in parts of a series\n Guide to publishing your Android Library via Jcenter/Bintray Guide to publishing your Android Library via MavenCentral Guide to publishing your Android Library via JitPack  ","description":"","id":83,"section":"posts","tags":["android","android-library","maven"],"title":"Guide to publishing your Android Library via Jcenter/Bintray","uri":"https://crushingcode.nisrulz.com/posts/publish-your-android-library-via-jcenter/"},{"content":" Devfest'16, New Delhi, India Abstract   Learn about battery consumption on Android and how to avoid it when building your apps.\n  Presentation  Event   ","description":"","id":84,"section":"talks","tags":["android"],"title":"Sipping on Battery Juice @Devfest'16 New Delhi","uri":"https://crushingcode.nisrulz.com/talks/devfest_newdelhi_2016/"},{"content":"I am pretty sure you would agree to the fact that the usual javadoc is not a something everyone likes. The colors are what makes it superrrrrrr boring. Yeah , I actually despise those weird colors and the fact that its been around for so long , made me think how to solve this. Also if you try looking it up on the internet there aren\u0026rsquo;t any solutions that basically solved this in a programmatic way.\nWell look no more\u0026hellip;. TADAAAAAAA !!\nIntroducing Javadoc-Themer (..insert suppperrr happy smiley here).\n So what does this do actually ? Well it basically makes it easy for you to control what colors your generated javadoc uses.\nUsing Javadoc-Themer you can choose the colors for each part of your javadoc and generate a stylesheet of it. Next you provide the stylesheet as an argument while generating your javadocs and there you have a better looking javadoc (^_^)\nRefer to How to section in the Javadoc-Themer for more information.\nHere is a comparison of both\nThe code for Javadoc-Themer is open sourced on github and you can find the webapp here\nStar it, fork it or simply use it to build better looking javadocs.\n","description":"","id":85,"section":"posts","tags":["tools","opensource"],"title":"Fun Project : Javadoc-Themer","uri":"https://crushingcode.nisrulz.com/posts/a-splash-of-colors-to-your-boring-javadocs/"},{"content":"If I were to ask a question to a room filled with android developers\n \u0026ldquo;How many of you have been in that place of sheer helplessness and panic when your gradle build fails because of a version conflict in dependencies?\u0026quot;\n ..I am pretty sure a lot of them would raise their hand or agree to being in that state and the very first action would be to hop onto stackoverflow and search for possible solutions in this type of a situation.\nWe all have been there and we all have experienced it. The problem is a result of each library following a completely different development lifecycle and using a different version of a public api, which by far all means is not the problem which needs to be rectified.\nYou can\u0026rsquo;t just ask all android library developers/team maintaining it to update the library to use either the lastest or some specific version of a dependency just because it works with another library and/or is causing a conflict when you have both of them in your project.\nSo what exactly are the options available to us..\nI stumbled upon such a situation sometime back in the last month or so and as the whole journey to fix this type of conflict was suprisingly less documented on the web , here is my record of how I solved it.\nNow the process I followed may not be the best one out there but it sure did led me to hunt down the solution along with digging out some pretty neat tricks possible using Gradle Build System.\nBefore we begin lets get acquinted with some terms we would be using a lot in this whole writeup.\n gradle - Build system for android dependency - Libraries such as support libraries in your build.gradle transitive dependency - Libraries on which dependencies defined in your project depend on conflict - incompatible or at variance/clash gradlew - gradle wrapper  The important term here for us (in regards to our problem of conflicting dependencies) is transitive dependency.\nYou see when you have multiple dependencies defined in your build.gradle, you can never be sure of what do those dependencies further depend on.\nLets take a simple example\nSay you have 3 android libraries defined under your build.gradle for the app , namely libA, libB and libC.\n1 2 3 4 5 6 7 8  dependencies { compile fileTree(dir: \u0026#39;libs\u0026#39;, include: [\u0026#39;*.jar\u0026#39;]) compile \u0026#39;com.company1.sdk:libA:1.0.2\u0026#39; compile \u0026#39;com.company2.sdk:libB:2.0.3\u0026#39; compile \u0026#39;com.company3.sdk:libC:3.0.4\u0026#39; }   Now for you as an android dev the only dependencies in view are libA, libB and libC. You have no idea what these android libraries furthur depend upon.\nThe situation which might cause a conflict would be if libA depends on say libD (version 4.0.4) and libC depends on say libD (version 4.0.2).\nNow by default Gradle would resolve to the latest version of libD. But this is where the problem actually lies.\nYou see when you build your code it only says there is conflict in the libD dependency. Thats all.\nSo how do you hunt it down.\nwell there are a few ways you can do that, the easiest one uses the gradle wrapper.\nSTEP 1 Look for all android dependencies being downloaded as part of the build process.\n1  ./gradlew androidDependencies   ..you should get a graph like this\n1 2 3 4 5 6 7 8  ... release +--- com.company1.sdk:libA:1.0.2 | +--- com.company4.sdk:libD:4.0.4 +--- com.company2.sdk:libB:2.0.3 | +--- com.company3.sdk:libA:3.0.4 +--- com.company4.sdk:libD:4.0.2   ..hmm..its becoming a bit more clear now. We can see which version of transitive dependencies are being pulled by which dependency.\nSo what exactly happened here?\nThe declared dependencies inside your build.gradle file actually download some more libraries on their own since its integral to their functioning. Transitive dependency defined for a declared library could conflict with another transitive dependeny defined for another declared library in version.\nWhats wrong here, you ask ? When a library was written to work with older version of the transitive dependency then it will basically break if provided with a higher version of the same, probably because the API changed or some classes were removed/renamed (between version updates)from what it was coded to reference and work with.\nWell if you are able to find your problem then you can jump to the solution directly, but if you are still looking for answers then read on.\nLooks like you are still in trouble!\nConsidering that you still cannot find the conflicting dependencies and their versions and assuming that its not conflicting from a dependency declared in the build.gradle file but (..probably) introduced by some gradle-plugin defined, we will do a more verbose checkup which is what STEP 2 is about\nSTEP 2 Check the complete stacktrace of the build process using --info and --stacktrace flags passed as arguments\n1  ./gradlew build --info --stacktrace   This should give you a complete log of everything and where exactly the build failed.You can find out the version conflicts and a lot more details in this step.\nIn my case this was the very case where I was having a conflict on annotations library introduced by the findbugs gradle plugin.\nWell, ok so this is a problem we have got. Whats the solution ? how do you go against the default behaviour of gradle and resolve to a lower version when a conflict occurs ?\nSOLUTION Well this is where the flexibility of Gradle comes into view. This is not commonly known but is a very useful functionality tucked away into the api docs for gradle.\nThe very first thing that you should do is, enable failOnVersionConflict flag in gradle on version conflicts.\n1 2 3 4 5  configurations.all { resolutionStrategy.failOnVersionConflict() }   This should give you more idea about where in your code are version conflicts occuring which were getting implicitly resolved by gradle.\nSecondly, you can force gradle to resolve to the lower version\n1 2 3 4  configurations.all { resolutionStrategy.force \u0026#39;com.company4.sdk:libD:4.0.2\u0026#39; }   This changes the default behaviour of gradle.\nBut wait! Resoltion strategy is still causing parts of the same dependency to conflict. HELP!\nWell only in that condition you should try and completely replace the whole module.\nHo do you do it ? by including the below into your build.gradle file.\n1 2 3 4 5 6 7  // add dependency substitution rules configurations.all { resolutionStrategy.dependencySubstitution { // Substitute one module dependency for another  substitute module(\u0026#39;com.company4.sdk:libD:4.0.4\u0026#39;) with module(\u0026#39;com.company4.sdk:libD:4.0.2\u0026#39;) } }    NOTE : dependencySubstitution is an incubating functionality and may change in a future version of Gradle\nAs of writting this post the latest Gradle Version is 2.13 in which this is available.\n Thats pretty neat , isn\u0026rsquo;t it.\nI am pretty sure this would enable you to find the conflicts and solve it too.\nThis also goes with the disclaimer that trying to resolve dependency conflicts this way is not the preferred way. You should always try to be using the latest version of the dependencies as well as maintain your library to use the same. This post basically defines the process to enable you to try and figure out why your build is failing and how to bypass it for the time being.\nIf you have suggestions or maybe would like me to add something to the content here, please let me know.\nReference : Gradle Docs\n","description":"","id":86,"section":"posts","tags":["gradle","issue"],"title":"The curious case of dependency conflicts","uri":"https://crushingcode.nisrulz.com/posts/the-curious-case-of-dependency-conflicts/"},{"content":"The world of artifacts and the way they make the life of a developer simpler, fascinates me to a great extent.\nFor the same reason I have gone through a lot of good articles online, which explain how the whole process works. However most of the documentation is either not up to date or lacks proper explanation. Personally all I care about is how does it work and how can I make it simpler. Hence I set out to try and implement the whole process on my own.\nWe have already covered in Part-1 of this series the process of how to create a maven repository hosted on github and this part builds upon that.\nThe next part is actually the simpler step - To consume these artifacts which are hosted on a maven repository in your android project.\nThe basic steps required are as follows :\n  Step 1   Goto your maven repository on github and open up your releases folder via the browser.\n  Step 2   Copy the URL in the address bar. It should look like below\nhttps://github.com/\u0026lt;username\u0026gt;/\u0026lt;mavenrepo\u0026gt;/tree/master/releases   Step 3   Now replace the tree word in the url with raw\n``` # From https://github.com/\u0026lt;username\u0026gt;/\u0026lt;mavenrepo\u0026gt;/tree/master/releases # to https://github.com/\u0026lt;username\u0026gt;/\u0026lt;mavenrepo\u0026gt;/raw/master/releases # and copy this new url. ```    Step 4   Now goto your Android Project and open up your build.gradle file for the module where you want to include the artifact (i.e app/library).\n  Step 5   Now copy the below to the build.gradle file with the appropriate url for the maven repository as obtained in Step-3.\nrepositories { maven { url \u0026quot;https://github.com/\u0026lt;username\u0026gt;/\u0026lt;mavenrepo\u0026gt;/raw/master/releases\u0026quot; } }   Step 6   Next , add the dependency as you would normally\ndependencies { implementation 'com.github.\u0026lt;username\u0026gt;:\u0026lt;artifact_name\u0026gt;:\u0026lt;version\u0026gt;' } where \u0026lt;version\u0026gt; has to be of the form \u0026lt;major\u0026gt;.\u0026lt;minor\u0026gt;.\u0026lt;patch\u0026gt; i.e 1.0.0\nIn Summary You just learned how to use artifacts from your own github account as a maven repository and in essence bypassed the complexity of getting artifacts into the Maven Central/Jcenter.\nFor reference you can have a look at my own maven repository on github\nHowever as you would see this is a very limiting way of accessing artifacts.\nThe developer is supposed to include your maven url under repository section which is \u0026hellip;a bit of extra work , right ?\nAs a developer we are all very lazy. We want to cut this extra work down to only compiling our artifact as a dependency with a single line of code\ncompile 'com.github.\u0026lt;username\u0026gt;:\u0026lt;artifact_name\u0026gt;:\u0026lt;version\u0026gt;' Well this is where Maven Central/Jcenter step in.\nA lot of information on them in the next part of this series.\nTill then keep calm and crush c.o.d.e !\n","description":"","id":87,"section":"posts","tags":["maven","android","android-library"],"title":"Own a maven repository, like a boss! ‚Äì Part 2","uri":"https://crushingcode.nisrulz.com/posts/own-a-maven-repository-like-a-bosspart-2/"},{"content":" Google Developer Group New Delhi, New Delhi, India Abstract   Learn about android libraries and how to build one for yourself.\n  Presentation  Event   ","description":"","id":88,"section":"talks","tags":["android","android-library"],"title":"An-Droid 101 - Developing Libraries @GDG New Delhi","uri":"https://crushingcode.nisrulz.com/talks/gdgnd_feb_2016/"},{"content":"Have you ever thought how the central repository works like Maven Central or JCenter?\nIs it possible to own one for yourself?\nDo you want to host your artifacts in your own private repository?\nIf your answer is YES, well you are in the right place. I am going to walk you through basic steps involved in setting up your own maven repository where you can publish your artifacts, using all but your terminal, git and a public remote repository hosting service of your choice ( i.e Github or Bitbucket ).\nFor those of you who want to jump into the code right away , here is the gist\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  ### Create Maven Repository # Create a directory named mavenrepo mkdir mavenrepo # Move into the dir cd mavenrepo # Initialise with git git init # Add remote repo git remote add origin git@github.com:\u0026lt;username\u0026gt;/\u0026lt;mavenrepo\u0026gt;.git # Create releases and snapshots dir  mkdir releases snapshots # Create README.md under each dir touch releases/README.md touch snapshots/README.md # Git add all files git add . # Git commit with a msg git commit -m \u0026#34;Initial Setup\u0026#34; # Push to remote git push origin master ### Generating maven artifacts mvn clean org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file \\ -DgroupId=com.company.id -DartifactId=artificat-id -Dversion=1.0.0 \\ -DpomFile=pom.xml -Dpackaging=aar -Dfile=artifact.aar \\ -DlocalRepositoryPath=./mavenrepo/releases/aar \\ -DgeneratePom=true -DcreateChecksum=true ### Adding and pushing artifacts to remote maven repo git add . git commit -m \u0026#34;\u0026lt;artifact\u0026gt; v1.0.0 added\u0026#34; git push origin master   For the rest of you who want a complete explanation, lets dive in..\nTerminology Before we start, I want you to get acquainted with some of the terminology:\nArtifacts : An artifact is a file, usually a JAR, that gets deployed to a Maven repository. A Maven build produces one or more artifacts, such as a compiled JAR and a ‚Äúsources‚Äù JAR. Each artifact has a group ID (usually a reversed domain name, like com.example.foo), an artifact ID (just a name), and a version string. The three together uniquely identify the artifact. A project‚Äôs dependencies are specified as artifacts.\nMaven : A tool that can be used for building and managing any Java-based project.(more info)\n I would like to mention that having your artifacts in the Maven Central and JCenter has a plethora of advantages which you will never be able to get when using the below method.\nLets just say its just another method to host and publish your artifacts without having to go through the process of publishing it to central repository.\n Prerequisites\n  git (Install guide)\n  maven (Install guide)\n  Bitbucket or Github account\n  JAR/AAR/WAR file to be published to your maven repository\n  ‚Ä¶.Okay‚Ä¶if you made it till this point, everything is going to be a piece of cake from here onwards :P promise :)\nSteps Step 1 : Fire up your terminal/command prompt\nStep 2 : Create a directory where you will sync your maven artifacts to, lets say its called mavenrepo\nmkdir mavenrepo and change into the mavenrepo directory\ncd mavenrepo Step 3 : Once inside the directory, initialize it with git\ngit init Step 4 : Create a repository named mavenrepo (git remote) at Github/Bitbucket and add it to your mavenrepo (git local) directory as a remote repository named origin ( here i am adding a github repo)\ngit remote add origin https://github.com/\u0026lt;username\u0026gt;/mavenrepo.git  Note : you can get the url from Github under the settings tab when at your repository page\n Step 5 : Create 2 directories under mavenrepo, namely releases and snapshots\nmkdir releases snapshots Step 6 : Create README.md under each sub directory, releases and snapshots\nNote: This step is required since git will not push empty directories, so we add empty README.md files :)\ntouch releases/README.md touch snapshots/README.md Step 7 : Stage all the changed files under git, using the below command\ngit add . Step 8 : Commit with a message\ngit commit -m \u0026quot;Initial Setup\u0026quot; Step 9 : Push to origin\ngit push origin master Thats It!\nYou have a working maven repository :D\nOkay, this is cool ‚Ä¶I have a working maven repository ..hmm..but something is missing ‚Ä¶.wait a second, where is the artifact that i would be pushing to this maven repository ??\nTo be specific, how do i generate the maven artifact ?\nSimple,\nGenerating a maven artifact Step 10 : Generate a maven artifact using the below command in terminal/command prompt (provided you already have the maven installed)\nmvn clean org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file \\ -DgroupId=com.company.id -DartifactId=artificatid -Dversion=1.0.0 \\ -Dpackaging=aar -Dfile=artifact.aar -DlocalRepositoryPath=./mavenrepo/releases/aar \\ -DgeneratePom=true -DcreateChecksum=true thats a lot to take in but thats just one single command that does it all.\nLets break it down into parts:\n mvn Maven build tool command clean Command that attempts to clean a project‚Äôs working directory of the files that were generated at build-time org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file Command to install the artifact into the maven repository via using a specific maven plugin, here being v2.5.2 -DgroupId Specify your package name here i.e.com.company.id -DartifactId Specify the name of the artifact -Dversion Specify the version of the artifact -Dpackaging Specify the packaging type of the artifact i.e jar/aar/war -Dfile Specify here the specific name of the jar/aar/war you are pushing as a maven artifact -DlocalRepositoryPath Specify the path to your mavenrepo (git local) i.e.  ./mavenrepo/releases/aar  -DgeneratePom Set it to true to generate a POM file -DcreateChecksum Set it to true to generate the checksum files  Step 11 : Once you are done generating the maven artifacts and they are deployed under the specific folder ( releases/snapshots), just stage them, commit and push it to your remote repo‚Ä¶\ngit add . git commit -m \u0026quot;\u0026lt;artifact\u0026gt; v1.0.0 added\u0026quot; git push origin master Repeat Steps 10-11 every time you want to publish a maven artifact to your own maven repository.\nWhats Next Thats it for Part 1. In the next part we will see how to use this maven repository in our android application to reference libraries into our project with the help of gradle.\nTill then have fun crushing code :D\n","description":"","id":89,"section":"posts","tags":["maven","android","android-library"],"title":"Own a maven repository, like a boss! ‚Äì Part 1","uri":"https://crushingcode.nisrulz.com/posts/own-a-maven-repository-like-a-bosspart-1/"},{"content":"JACK \u0026amp; JILL are part of the new tool chain for android and in the words of Android Developer Blog\n they are designed to improve build times and simplify development by reducing dependencies on other tools\n In case you are curious, JACK stands for Java Android Compiler Kit and JILL stands for Jack Intermediate Library Linker.\nWoa ..woa..wooaaaa ..thats sounds too technical ..lets slow this down, right.\nJACK \u0026amp; JILL were released as an experimental tool chain in the Android SDK 21.1.1 and recently got minor bug fixes in the recent release of Android SDK 21.1.2\nSo what exactly are they for ?\nJACK basically compiles your Java code directly to a .dex Dalvik Executable.\nJILL on the other hand translates any libraries you are referencing to a new Jack library file (.jack).\nWhats the difference ?\nGlad you asked :)\nThe usual process of android compilation process is\n Use the standard javac compiler to convert the source code to Java bytecode Feed this bytecode to dex compiler to get the Dalvik bytecode  JACK eliminates the conversion to Java bytecode step and directly converts source code to Dalvik bytecode. During the same time it also handles any requested code minification (shrinking and/or obfuscation), previously handled by Proguard and then perform repackaging too.\nNow all this time, JACK was working on you source code, right!\nWhat if you have a library being referenced in the form of say a JAR?\nJILL takes care of that, by converting all libraries to Jack Library File (.jack) which can easily be merged by JACK during compilation into object code.\nBasically the Android Gradle plugin and JACK collect any .jack library files, along with your source code, and compiles them into a set of dex files and further assembles them into an APK.\nThe complete process explained in a diagram\nWhy all the hassle for compiler ?\nGoogle believes in optimizing the whole process of compilation of android apps. The faster that happens the better, maybe involve incremental compilation for the same(still under development)! :D\nAlso due to the Oracle-Google dispute over using java , Google probably wants to move away from using javac and have its own compiler in place to convert source code to dalvik bytecode.\nHow do you use the tool chain in your apps ?\nGood question! At the moment JACK \u0026amp; JILL are both in experimental phase.\nSo you specifically need to enable them in your build.gradle i.e. you need to set useJack = true\n1 2 3 4 5 6 7 8 9  android { ... buildToolsRevision \u0026#39;24.0.1\u0026#39; defaultConfig { // Enable the experimental Jack build tools.  useJack = true } ... }   More Info at Android Tools Project Site\nDownside ? As of now these support only Java 7 i.e no support for Java 8 :(\nNo Annotation processing :(\nThats it for now.\nReferences\n Android Developer Blog Android Tools Project Site  ","description":"","id":90,"section":"posts","tags":["tools","android"],"title":"Meet JACK \u0026 JILL , Android‚Äôs experimental toolchain","uri":"https://crushingcode.nisrulz.com/posts/meet-jack-and-jill-androids-experimental-toolchain/"},{"content":"Tired of being tied to your laptop/desktop while debugging your android apps ?\nWell let me break it to you ‚Äì You are NOT the FIRST person bugged by this issues.\nIts a common practice to tether your device via a USB cable to the host machine and debug android apps.Well here is something for you that is going to set you free. Yes literally. You can run adb over WiFi (period)\nYes , you read that right! Thats the secret solution(‚Ä¶ok not secret.. :p ) and setting it up is a piece of cake :P\nMost people ask me why another post on this, well if you googled it you would come across a lot of information regarding the same but most of it is outdated or you would be using hit-and-trial method to get it working. I did some research on my own and found a way to get it working in the below steps.\nI will walk you through the process of doing so in the most easiest way.\nAll you need is a USB cable (for the initial setup) and have your laptop/desktop and the devices connected to the same network (work on 99% cases)\n  Connect your mobile device via USB and make sure usb debugging is on (you can do that via the developer options in your device).\nAlso connect to your Wifi.\n  Open up the Terminal , provided you have the adb set in your PATH, type the following\nadb devices this would list your device as connected over the USB\n  To enable the wifi-debug-mode\nadb tcpip 5555   Get your DEVICE-IP-ADDRESS\nadb shell netcfg | grep 'wlan0' you will get something like this\nwlan0 UP 192.168.2.23/24 0x00001043 cc:c3:ea:ef:12:11 where 192.168.2.23 is your DEVICE-IP-ADDRESS\nOR\nyou can navigate to Settings \u0026gt; About phone \u0026gt; Status on your device, to view the IP address of your phone.\n  IMPORTANT : Remove USB cable\n  Connect your device by typing in the below in the terminal\nadb connect DEVICE-IP-ADDRESS:5555   To confirm the connection just made, type in the terminal\nadb devices this should list your device as connected over the particular DEVICE-IP-ADDRESS\nAnd you are done. Run/Debug your apps from your IDE in wireless mode. Let the magic of wire-free-life begin.\n  Did I mention that to switch back to USB mode you simply type in the below command in terminal\nadb usb   Things to Note:   If you move into a different workspace and change WiFi networks, you simply repeat steps 5 and 6 . The steps 1 to 5 are used to set your device into wifi-debug mode.\n  The device will exit the wifi-debug mode when it restarts. So if your device restarts unfortunately, you will have to start over (from steps 1 to 6). So if you keep an eye on your battery and do not restart your device, you can live without cables for weeks.\n  Reference:\nInfo about ADB\n","description":"","id":91,"section":"posts","tags":["adb","android","tools"],"title":"Life without wires : ADB over WiFi","uri":"https://crushingcode.nisrulz.com/posts/life-without-wires-adb-over-wifi/"},{"content":" Google Developer Group New Delhi, New Delhi, India Abstract   Materialized Instantly\n  Presentation   ","description":"","id":92,"section":"talks","tags":["android"],"title":"Materialized Instantly @GDG New Delhi","uri":"https://crushingcode.nisrulz.com/talks/gdgnd_mar_2015/"},{"content":" Google Developer Group New Delhi, New Delhi, India Abstract   Kickstart Android App Development\n  Presentation   ","description":"","id":93,"section":"talks","tags":["android"],"title":"Kickstart Android App Development @GDG New Delhi","uri":"https://crushingcode.nisrulz.com/talks/gdgnd_feb_2015/"},{"content":" Google Developer Group New Delhi, New Delhi, India Abstract   Kickstart into Android Wear World\n  Presentation  Event   ","description":"","id":94,"section":"talks","tags":["android","android-wear"],"title":"Kickstart Android Wear @GDG New Delhi","uri":"https://crushingcode.nisrulz.com/talks/gdgnd_oct_2014/"},{"content":" Google Developer Group New Delhi, New Delhi, India Abstract   Basic intro of node.js\n  Presentation   ","description":"","id":95,"section":"talks","tags":["nodejs"],"title":"Introduction to Node.JS @Mindfire Solutions","uri":"https://crushingcode.nisrulz.com/talks/gdgnd_oct_2013/"},{"content":"Hi there üëãüèº, I\u0026rsquo;m  üìÉ About me  üë®üèª‚Äçüíª Software Engineer. üë®üèª‚Äçüî¨ Experimenting with technologies. ü§ó Open-source enthusiast. üß∞ Automate-All-Things-Person. üïπ Retro gamer üì´ Reach me [at] nisrulz.com  ‚ú® What I\u0026rsquo;ve been dabbling in  Giving talks/sessions Writing blog posts [at] Crushing C.O.D.E and Raywenderlich.com Writing/reviewing books Developing/Writing code for  Wearable\u0026rsquo;s Firmware Mobile SDK for enablintg DSP on device  Technology featured in Techcrunch, Business Today and Live Mint. Pulblished Patents   Multiple Mobile SDKs for solving problems on Android platform Android applications Web app to generate Mobile App\u0026rsquo;s Privacy Policy/Terms \u0026amp; Conditions      Github Stats  üë®üèª‚Äçüíª¬†You can support me in maintaining my open source work by buying me a coffee or sponsoring me on GitHub¬†ü§ó\n  ","description":"Nishant Srivastava","id":96,"section":"","tags":null,"title":"About","uri":"https://crushingcode.nisrulz.com/about/"}]