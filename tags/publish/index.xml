<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Publish on Crushing C.O.D.E</title>
    <link>https://crushingcode.github.io/tags/publish/</link>
    <description>Recent content in Publish on Crushing C.O.D.E</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - Nishant Srivastava</copyright>
    <lastBuildDate>Fri, 29 Jul 2016 10:54:24 +0200</lastBuildDate>
    
	<atom:link href="https://crushingcode.github.io/tags/publish/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Guide to publishing your Android Library via JitPack</title>
      <link>https://crushingcode.github.io/publish-your-android-library-via-jitpack/</link>
      <pubDate>Fri, 29 Jul 2016 10:54:24 +0200</pubDate>
      
      <guid>https://crushingcode.github.io/publish-your-android-library-via-jitpack/</guid>
      <description>Ok so you already know how to build your android library and publish it to JCenter/MavenCentral. This post is third in parts of a series.
P.S. : If you dont know how to , go ahead and have a look
 Guide to publishing your Android Library via Jcenter/Bintray Guide to publishing your Android Library via MavenCentral Guide to publishing your Android Library via JitPack  The very first question that people would have is</description>
    </item>
    
    <item>
      <title>Guide to publishing your Android Library via MavenCentral</title>
      <link>https://crushingcode.github.io/publish-your-android-library-via-mavencentral/</link>
      <pubDate>Sun, 17 Jul 2016 10:54:24 +0200</pubDate>
      
      <guid>https://crushingcode.github.io/publish-your-android-library-via-mavencentral/</guid>
      <description>If you come from the java world, you would already be knowing about MavenCentral in a big way. MavenCentral is the central repository which hosts all the maven artifacts and one can reference them from anywhere in the world. Android artifacts can also be hosted on MavenCentral in a similar manner. Here I am going to document the process to publish an android library to MavenCentral, as I followed it.</description>
    </item>
    
    <item>
      <title>Guide to publishing your Android Library via Jcenter/Bintray</title>
      <link>https://crushingcode.github.io/publish-your-android-library-via-jcenter/</link>
      <pubDate>Tue, 12 Jul 2016 10:54:24 +0200</pubDate>
      
      <guid>https://crushingcode.github.io/publish-your-android-library-via-jcenter/</guid>
      <description>Developers are a different kind of people altogether. They tend to be lazy but strive to be super efficient at the same time. A lot of this can be seen in the Android world where a certain library pops up everyday to solve a specific problem or to make the complex processes simpler.
I have a certain knack for re-using code blocks just to avoid repeative tasks and to facilitate this I usually end up converting those codeblocks into an android library.</description>
    </item>
    
  </channel>
</rss>