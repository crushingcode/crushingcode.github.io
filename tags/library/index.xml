<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Library on Crushing C.O.D.E</title>
    <link>http://crushingcode.github.io/tags/library/index.xml</link>
    <description>Recent content in Library on Crushing C.O.D.E</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2015</copyright>
    <atom:link href="http://crushingcode.github.io/tags/library/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>I could not find a simple Gesture Detection android library, so I built one</title>
      <link>http://crushingcode.github.io/i-could-not-find-a-simple-gesture-detection-android-library-so-i-built-one/</link>
      <pubDate>Sun, 12 Feb 2017 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/i-could-not-find-a-simple-gesture-detection-android-library-so-i-built-one/</guid>
      <description>

&lt;p&gt;While working on various projects, there have been times when I have had to implement various gesture-based events. Every time I have had to do that I had to write the whole code for getting the &lt;code&gt;SensorManager&lt;/code&gt; and getting access to the &lt;code&gt;SensorEvent&lt;/code&gt;, plus the extra logic to detect the gesture. At first, it was just fine to do that since I was a beginner around that time. Then soon I got weary of the whole boilerplate. Around this time I started looking for a solution like an android library which would help me avoid all that boilerplate as well as enable me to maintain my code properly.&lt;/p&gt;

&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;Well, the problem at hand is basically the boilerplate code and the need to maintain your code. Duplicating code across projects and remembering the logic for each gesture was bound to end up in one of the projects in some form of error. It was no doubt inefficient and very repetitive. I was looking for a solution to all this because as Software Engineers we all strive to automate tasks or remove the need for duplicating code. As Douglas Crockford has said&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Code reuse is the Holy Grail of Software Engineering.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What was disappointing was that everything available was either too complex in terms of implementation or was very limiting.
&lt;strong&gt;..and that’s when I decided to write my own Android Library, Sensey.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/i-could-not-find-a-simple-gesture-detection-android-library-so-i-built-one/header.png&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sensey&lt;/strong&gt; was born out of a need to be able to make Gesture Detection in android as simple as it can get. Not everyone needs to look up &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; values of &lt;strong&gt;&lt;em&gt;Accelerometer&lt;/em&gt;&lt;/strong&gt; or &lt;code&gt;Azimuth&lt;/code&gt;, &lt;code&gt;Pitch&lt;/code&gt; and &lt;code&gt;Roll&lt;/code&gt; values of &lt;strong&gt;&lt;em&gt;Orientation Sensor&lt;/em&gt;&lt;/strong&gt;*. There are other devs who only wish to detect if a certain Gesture was detected or not (period).&lt;/p&gt;

&lt;p&gt;So when I set out to build &lt;strong&gt;Sensey&lt;/strong&gt;, I had a very clear mindset that I want it to be exactly that — simple and clean.
When I first wrote Sensey, it wasn’t perfect. But it did the job well for me. Since I couldn’t find the solution for myself in the first place, I guessed (or assumed) that at least a few devs in the community would be in the same boat as me and thus from the start I was sure to make it open sourced (&lt;a href=&#34;https://github.com/nisrulz/sensey&#34;&gt;You can check it out on Github&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/i-could-not-find-a-simple-gesture-detection-android-library-so-i-built-one/sampleapp.png&#34; alt=&#34;sample app&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I recently released the version &lt;code&gt;1.6.0&lt;/code&gt; of &lt;strong&gt;Sensey&lt;/strong&gt; and you can tell that it has come a long way from what it was in version &lt;code&gt;1.0&lt;/code&gt;. Let’s walk through the process of integrating Sensey.It is super simple to integrate Sensey in your current android project.&lt;/p&gt;

&lt;p&gt;Simply add the below to your build.gradle file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;compile &#39;com.github.nisrulz:sensey:1.6.0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..sync your gradle and then initialize Sensey in your activity&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Sensey.getInstance().init(context);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! Sensey at this point is integrated into your app. Now based on what kind of Gesture you want to detect, you will need to start and stop detectors provided by Sensey.&lt;/p&gt;

&lt;p&gt;Say for the sake of a simple example, if we wanted to detect a Shake Gesture. All you need to do is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create an instance of ShakeListener&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ShakeDetector.ShakeListener shakeListener=new ShakeDetector.ShakeListener() {
    @Override public void onShakeDetected() {
       // Shake detected, do something
   }
   @Override public void onShakeStopped() {
       // Shake stopped, do something
   }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now to start listening for Shake gesture, pass the instance &lt;code&gt;shakeListener&lt;/code&gt; to &lt;code&gt;startShakeDetection()&lt;/code&gt; function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Sensey.getInstance().startShakeDetection(shakeListener);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To stop listening for Shake gesture, pass the instance &lt;code&gt;shakeListener&lt;/code&gt; to &lt;code&gt;stopShakeDetection()&lt;/code&gt; function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Sensey.getInstance().stopShakeDetection(shakeListener);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yup, that’s about all it takes to know if a shake gesture was performed and when it stopped.&lt;/p&gt;

&lt;p&gt;Let’s check out the complete list of gesture detectors Sensey provides&lt;/p&gt;

&lt;h4 id=&#34;flip-detector&#34;&gt;Flip Detector&lt;/h4&gt;

&lt;p&gt;Sensey can detect if your device facing up or facing down. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#flip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;light-detector&#34;&gt;Light Detector&lt;/h4&gt;

&lt;p&gt;Sensey can detect if your device in a position where it is receiving any light or not. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#light&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;orientation-detector&#34;&gt;Orientation Detector&lt;/h4&gt;

&lt;p&gt;Sensey can detect if your device’s top side is up or bottom side is up. It can tell if your device’s left side is up vs right side being up. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#orientation&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;proximity-detector&#34;&gt;Proximity Detector&lt;/h4&gt;

&lt;p&gt;Sensey can detect if there is an object in the proximity of the device i.e either it is far or near to the device. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#proximity&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;shake-detector&#34;&gt;Shake Detector&lt;/h4&gt;

&lt;p&gt;Detects a Shake gesture performed on the device and also when the gesture stops.Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#shake&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;wave-detector&#34;&gt;Wave Detector&lt;/h4&gt;

&lt;p&gt;This one is a simple implementation. It uses proximity sensor with timing to detect if a hand wave gesture is performed in front of the device screen. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#wave&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;chop-detector&#34;&gt;Chop Detector&lt;/h4&gt;

&lt;p&gt;Added in release 1.6.0 this one is brand new. It allows you to detect if a Chop gesture is performed with the device. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#chop&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;wrist-twist-detector&#34;&gt;Wrist Twist Detector&lt;/h4&gt;

&lt;p&gt;Added in release 1.6.0 this one is another brand new detector. This one allows you to detect if the wrist was twisted in a circular manner while holding the device. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#wristtwist&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;movement-detector&#34;&gt;Movement Detector&lt;/h4&gt;

&lt;p&gt;Another brand new detector added in release 1.6.0, it allows you to know if the device was moved or not. Once moved, it will also detect when the device becomes stationary. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#movement&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;sound-level-detector&#34;&gt;Sound Level Detector&lt;/h4&gt;

&lt;p&gt;Another brand new detector added in release 1.6.0, it allows you to measure the loudness of sound in the environment around the device (calculated on a scale of dB i.e decibel).Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#soundlevel&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;pinch-scale-detector&#34;&gt;Pinch Scale Detector&lt;/h4&gt;

&lt;p&gt;Sensey can use this detector to know if the user is executing a pinch scale in or out gesture on the touch screen. It will also be able to detect when the scale gesture was stopped. Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#pinchscale&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;touch-type-detector&#34;&gt;Touch Type Detector&lt;/h4&gt;

&lt;p&gt;This one can do a lot of things, you can choose which one to use or not to use. It can detect when someone on the device screen does the following:
- Single Tap
- Double Tap
- Two Finger Tap
- Three Finger Tap
- Scroll Up, Down, Left or Right
- Swipe Left or Right
- Long Press&lt;/p&gt;

&lt;p&gt;Check out the implementation &lt;a href=&#34;https://github.com/nisrulz/sensey/wiki/Usage#touchtype&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Phew! That’s a lot of gesture detectors packed inside one android library. Well, the list will keep on growing when more gestures get implemented in future releases. The core focus though would always remain the same,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;simplicity over complexity and ease of use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;who-is-it-for&#34;&gt;Who is it for&lt;/h3&gt;

&lt;p&gt;For people who simply want to detect gesture as an event.&lt;/p&gt;

&lt;h3 id=&#34;who-is-it-not-for&#34;&gt;Who is it not for&lt;/h3&gt;

&lt;p&gt;For anyone who wishes to get more advance and wants to tap into the raw SensorEvent values.&lt;/p&gt;

&lt;p&gt;That said, the android library isn’t perfect and I would love it if you can try it out and file &lt;a href=&#34;https://github.com/nisrulz/sensey/issues&#34;&gt;issues&lt;/a&gt; on Github to make it better.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nisrulz/sensey&#34;&gt;Check out Sensey on Github (Star the repo if you find it useful)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have suggestions, please let me know in the comment section.&lt;/p&gt;

&lt;p&gt;Checkout my &lt;a href=&#34;https://github.com/nisrulz&#34;&gt;Github&lt;/a&gt; or simply follow me on &lt;a href=&#34;https://twitter.com/nisrulz&#34;&gt;Twitter&lt;/a&gt; and keep on crushing code!🤓 😁&lt;/p&gt;

&lt;p&gt;P.S. : This post is also published on &lt;a href=&#34;https://android.jlelse.eu/i-could-not-find-a-simple-gesture-detection-android-library-so-i-built-one-334c0a307c16&#34;&gt;medium.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guide to publishing your Android Library via JitPack</title>
      <link>http://crushingcode.github.io/publish-your-android-library-via-jitpack/</link>
      <pubDate>Fri, 29 Jul 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/publish-your-android-library-via-jitpack/</guid>
      <description>

&lt;p&gt;Ok so you already know how to build your android library and publish it to JCenter/MavenCentral. This post is third in parts of a series.&lt;/p&gt;

&lt;p&gt;P.S. : If you dont know how to , go ahead and have a look&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jcenter/&#34;&gt;Guide to publishing your Android Library via Jcenter/Bintray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-mavencentral/&#34;&gt;Guide to publishing your Android Library via MavenCentral&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;Guide to publishing your Android Library via JitPack&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The very first question that people would have is&lt;/p&gt;

&lt;h3 id=&#34;what-is-jitpack&#34;&gt;What is JitPack&lt;/h3&gt;

&lt;p&gt;As per their &lt;a href=&#34;https://www.jitpack.io/&#34;&gt;website&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Easy to use package repository for Git. Publish your JVM and Android libraries&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So basically JitPack builds Git projects on demand and provides you with ready-to-use artifacts (jar, aar).&lt;/p&gt;

&lt;h3 id=&#34;why-would-i-use-it-instead-of-jcenter-or-mavencentral&#34;&gt;Why would I use it instead of JCenter or MavenCentral ?&lt;/h3&gt;

&lt;p&gt;Publishing to MavenCentral or JCenter is a well set process which involves people to go through steps in order to let their artifacts be hosted on these repositories. The process also involves you to wait for a certain few hours to get everything synced up.&lt;/p&gt;

&lt;p&gt;On the other hand JitPack is the most simplest way of publishing the artifacts. There is no need to go through project build and upload steps. All you need to do is&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Push your project to GitHub&lt;/li&gt;
&lt;li&gt;Tag a &lt;code&gt;release&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Head over to JitPack and request to publish the &lt;code&gt;release&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;hellip;and thats it. You have your library code available in just few minutes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It just works! Cool , isn&amp;rsquo;t it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I will walk you through the process to help understand the process in a more practical mannner.&lt;/p&gt;

&lt;p&gt;The first step that you need is to create and build your Android &amp;ldquo;Awesome&amp;rdquo; Library, which can be read in the &lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jcenter/&#34;&gt;first post of this series here&lt;/a&gt;. If you have not done so , then please go ahead and read it up. Once done comeback here to read further.&lt;/p&gt;

&lt;p&gt;Assuming you already have your Android &amp;ldquo;Awesome&amp;rdquo; Library built , I will jump directly to steps involved in publishing your library to JitPack&lt;/p&gt;

&lt;h5 id=&#34;publishing-your-android-awesome-library&#34;&gt;Publishing your Android &amp;ldquo;Awesome&amp;rdquo; Library&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Once project is synced, add the &lt;code&gt;android-maven-gradle-plugin&lt;/code&gt; to &lt;code&gt;classpath&lt;/code&gt; in &lt;code&gt;build.gradle&lt;/code&gt; file at &lt;strong&gt;root project&lt;/strong&gt; level.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
  classpath &#39;com.android.tools.build:gradle:2.1.2&#39;
  ..
  ..
  // Setup the android-maven-gradle-plugin in the classpath
  classpath &#39;com.github.dcendents:android-maven-gradle-plugin:1.3&#39;
  ..
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next, apply the &lt;code&gt;android-maven-gradle-plugin&lt;/code&gt; to the &lt;code&gt;build.gradle&lt;/code&gt; file at &lt;strong&gt;library module&lt;/strong&gt; level. Also add the group variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt; apply plugin: &#39;com.android.library&#39;
 // Required plugin in library module
 apply plugin: &#39;com.github.dcendents.android-maven&#39;
 // Replace nisrulz with &amp;lt;your_github_username&amp;gt;
 group=&#39;com.github.nisrulz&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a release TAG in git&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git tag -a 1.0 -m &amp;quot;v1.0&amp;quot;
git push origin 1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once everything is pushed and the release TAG is also pushed, goto &lt;code&gt;https://www.jitpack.io/#username/reponame&lt;/code&gt; where replace &lt;code&gt;username&lt;/code&gt; with your github username and &lt;code&gt;reponame&lt;/code&gt; with the reponame of the android project.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the release you would like to share by clicking the ‘Get It’ button next to the list of releases of your repository.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojitpack/sc1.jpeg&#34; alt=&#34;screenshot1&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;using-your-android-awesome-library-in-other-projects&#34;&gt;Using your Android &amp;ldquo;Awesome&amp;rdquo; Library in other projects&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Next the same page at Jitpack would show you how to use the library in your other android projects. Something like below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojitpack/sc2.jpeg&#34; alt=&#34;screenshot1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Selectable code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;  repositories {
      jcenter()
      maven { url “https://jitpack.io” }
  }
  dependencies {
      compile &#39;com.github.nisrulz:awesomelib:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Let the world know of your &lt;strong&gt;AwesomeLib&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Add a readme that explains how to integrate and use your Awesome library&lt;/li&gt;
&lt;li&gt;Add a license block.&lt;/li&gt;
&lt;li&gt;Also include the JitPack badge provided by jitpack in your readme
&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojitpack/badge.jpeg&#34; alt=&#34;badge&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Promote your lib on social media so that others can know about it.&lt;/li&gt;
&lt;li&gt;Always add a working sample app in your project that demonstrates your library in use.&lt;/li&gt;
&lt;li&gt;Add screenshots if possible in your readme.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code for the AwesomeLibrary and this guide itself is open sourced and available on &lt;a href=&#34;https://github.com/nisrulz/UploadToJitpack&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Star it or just fork it to use it.&lt;/p&gt;

&lt;p&gt;And thats it for this series. I hope it helps people to deploy their android libraries for the world to use.&lt;/p&gt;

&lt;p&gt;Have fun crushing code :D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guide to publishing your Android Library via MavenCentral</title>
      <link>http://crushingcode.github.io/publish-your-android-library-via-mavencentral/</link>
      <pubDate>Sun, 17 Jul 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/publish-your-android-library-via-mavencentral/</guid>
      <description>

&lt;p&gt;If you come from the java world, you would already be knowing about MavenCentral in a big way. MavenCentral is the central repository which hosts all the maven artifacts and one can reference them from anywhere in the world. Android artifacts can also be hosted on MavenCentral in a similar manner. Here I am going to document the process to publish an android library to MavenCentral, as I followed it.&lt;/p&gt;

&lt;p&gt;This post is second in parts of a series. If you didnot read the others in series , go have a look&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jcenter/&#34;&gt;Guide to publishing your Android Library via Jcenter/Bintray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;Guide to publishing your Android Library via MavenCentral&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jitpack/&#34;&gt;Guide to publishing your Android Library via JitPack&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first step need you to create and build your Android &amp;ldquo;Awesome&amp;rdquo; Library and can be read in the &lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jcenter/&#34;&gt;first post of this series here&lt;/a&gt;. If you have not done so , then please go ahead and read it up.&lt;/p&gt;

&lt;p&gt;Assuming you already have your Android &amp;ldquo;Awesome&amp;rdquo; Library built , I will jump directly to steps involved in publishing your library to MavenCentral&lt;/p&gt;

&lt;h5 id=&#34;publishing-your-android-awesome-library&#34;&gt;Publishing your Android &amp;ldquo;Awesome&amp;rdquo; Library&lt;/h5&gt;

&lt;p&gt;Setup &lt;a href=&#34;http://blog.ghostinthemachines.com/2015/03/01/how-to-use-gpg-command-line/&#34;&gt;GPG&lt;/a&gt; and generate yourself a key.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now list your gpg keys&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ gpg --list-keys
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;There the first line will be like pub XXXXX/YYYYYYYY &lt;date&gt;. Remember that ‘YYYYYYYY’ part, it’s you key ID.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Next, publish your keys&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ gpg --keyserver hkp://keyserver.ubuntu.com --send-keys YYYYYYYY
  $ gpg --keyserver hkp://pgp.mit.edu --send-keys YYYYYYYY
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To ensure your keys were published&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ gpg --keyserver hkp://pgp.mit.edu --search-keys
  username@example.com # Use your email
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setup Sonatype account&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a JIRA account on &lt;a href=&#34;https://issues.sonatype.org/secure/Signup!default.jspa&#34;&gt;Sonatype&lt;/a&gt;
&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/signup.jpeg&#34; alt=&#34;signup&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and Login
  &lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/login.jpeg&#34; alt=&#34;login&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Once you are logged in, &lt;a href=&#34;https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;amp;pid=10134&#34;&gt;create a new issue&lt;/a&gt;
&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/create.jpeg&#34; alt=&#34;create&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill out the form as below&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project : Community Support - Open source&lt;/li&gt;
&lt;li&gt;Issue Type : New Project&lt;/li&gt;
&lt;li&gt;Group Id : com.github.github_username&lt;/li&gt;
&lt;li&gt;Project URL : &lt;a href=&#34;https://github.com/github_username/project_name&#34;&gt;https://github.com/github_username/project_name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SCM url : &lt;a href=&#34;https://github.com/github_username/project_name.git&#34;&gt;https://github.com/github_username/project_name.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Username : sonatype_username&lt;/li&gt;
&lt;li&gt;Already Synced to Central : No&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/createissue.jpeg&#34; alt=&#34;createissue&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/createissue2.jpeg&#34; alt=&#34;createissue2&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next hit &lt;strong&gt;Create&lt;/strong&gt;. After that, it can take up to 2 business days to process your issue. Then you will receive a confirmation that your configuration has been prepared and you can publish your library.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; : Do not deploy until after you have received an e-mail notice indicating that the ticket is Resolved.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/approved.jpeg&#34; alt=&#34;approved&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Update &lt;code&gt;gradle.properties&lt;/code&gt; on your local machine  at location &lt;code&gt;~/.gradle/gradle.properties&lt;/code&gt; and include&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; NEXUS_USERNAME=sonatype_username
 NEXUS_PASSWORD=sonatype_password
 signing.keyId=gpg_key_id
 signing.password=gpg_password
 signing.secretKeyRingFile=/Users/username/.gnupg/secring.gpg
 org.gradle.daemon=true
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;IMPORTANT: Steps for setting up your sonatype account up till here are required only once. The steps after these are required whenever publishing your android library, even if its a new one. Just remember to configure it well in your gradle.properties&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;add-the-plugin-by-chris-banes-to-your-library-s-build-gradle&#34;&gt;Add the plugin by Chris Banes to your library&amp;rsquo;s &lt;code&gt;build.gradle&lt;/code&gt;.&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE:  Below is a &lt;a href=&#34;https://github.com/nisrulz/gradle-mvn-push&#34;&gt;fork&lt;/a&gt; of the &lt;a href=&#34;https://github.com/chrisbanes/gradle-mvn-push&#34;&gt;original script&lt;/a&gt; written by Chris Banes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;apply from: &#39;https://raw.github.com/nisrulz/gradle-mvn-push/master/gradle-mvn-push.gradle&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and define the required variables in the &lt;code&gt;gradle.properties&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Properties used by gradle maven-push plugin
VERSION_NAME=1.0.0
VERSION_CODE=1
POM_NAME=&amp;lt;Library_Name&amp;gt;
POM_ARTIFACT_ID=&amp;lt;library_name_smallcaps&amp;gt;

POM_DESCRIPTION=&amp;lt;library_description&amp;gt;
POM_URL=https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;
POM_SCM_URL=https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;
POM_SCM_CONNECTION=scm:git@github.com:&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;.git
POM_SCM_DEV_CONNECTION=scm:git@github.com:&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;.git
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Run in terminal to publish your artifacts&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  ./gradlew build clean uploadArchive
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Login into &lt;a href=&#34;https://oss.sonatype.org/#stagingRepositories&#34;&gt;Nexus Repository Console&lt;/a&gt; and search for your package name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/nexusrepo.jpeg&#34; alt=&#34;nexusrepo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/close.jpeg&#34; alt=&#34;close&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Close the staged artifact.[wait]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Release the closed artifact (keep drop artifact selected).[wait]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Wait for some hours before everything gets synced with MavenCentral.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;using-your-android-awesome-library-in-other-projects&#34;&gt;Using your Android &amp;ldquo;Awesome&amp;rdquo; Library in other projects&lt;/h5&gt;

&lt;p&gt;Your code is available through MavenCentral if you have received the mail with confirmation&lt;/p&gt;

&lt;p&gt;You can use the lib now as follows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
    compile &#39;&amp;lt;group_name&amp;gt;:&amp;lt;artifact_name&amp;gt;:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;i.e for the sample lib in this repo , &lt;code&gt;awesomelib&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
      compile &#39;com.github.nisrulz:awesomelib:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Let the world know of your &lt;strong&gt;AwesomeLib&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Add a readme that explains how to integrate and use your Awesome library&lt;/li&gt;
&lt;li&gt;Add a license block as in this repo&lt;/li&gt;
&lt;li&gt;Also include a badge of MavenCentral in your readme&lt;/li&gt;
&lt;li&gt;Promote your lib on social media so that others can know about it.&lt;/li&gt;
&lt;li&gt;Always add a working sample app in your project that demonstrates your library in use.&lt;/li&gt;
&lt;li&gt;Add screenshots if possible in your readme.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The code for the AwesomeLibrary and this guide itself is open sourced and available on &lt;a href=&#34;https://github.com/nisrulz/UploadToMavenCentral&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Star it or just fork it to use it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guide to publishing your Android Library via Jcenter/Bintray</title>
      <link>http://crushingcode.github.io/publish-your-android-library-via-jcenter/</link>
      <pubDate>Tue, 12 Jul 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/publish-your-android-library-via-jcenter/</guid>
      <description>

&lt;p&gt;Developers are a different kind of people altogether. &lt;strong&gt;They tend to be lazy but strive to be super efficient at the same time&lt;/strong&gt;.
A lot of this can be seen in the Android world where a certain library pops up everyday to solve a specific problem or  to make the complex processes simpler.&lt;/p&gt;

&lt;p&gt;I have a certain knack for re-using code blocks just to avoid repeative tasks and to facilitate this I usually end up converting those codeblocks into an android library.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But what if I wanted to share my android library with the world?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well in a nutshell the steps to follow would be as below :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all I need to open source the andorid library, which should be easy as you can push it to &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; or any other public git repository.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next I need to push the android library as a maven artifact (aar/jar with a POM) to all of the or one of the below central repositories&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bintray.com/&#34;&gt;JCenter/Bintray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://search.maven.org/&#34;&gt;Maven Central&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jitpack.io/&#34;&gt;Jitpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will walkthrough the process of publishing to each if these central repositories in the upcoming posts of this series.&lt;/p&gt;

&lt;p&gt;For now lets lookup the steps to publish your android library to JCenter/Bintray.&lt;/p&gt;

&lt;h5 id=&#34;creating-your-android-awesome-library&#34;&gt;Creating your Android &amp;ldquo;Awesome&amp;rdquo; Library&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;You can skip to the next part if you already have this built&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Create an Android project or open an existing one in &lt;a href=&#34;https://en.wikipedia.org/wiki/Android_Studio&#34;&gt;Android Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Init the project with git and also create a repo on Github for the same. Each step here onwards represent a commit and should be pushed to github.&lt;/li&gt;
&lt;li&gt;Create and add a new module and choose &lt;code&gt;Android Library&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Goto &lt;code&gt;File&amp;gt;New&amp;gt;New Module..&lt;/code&gt; and select &lt;code&gt;Android Library&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/newmodule.jpeg&#34; alt=&#34;newmodule&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/newlib.jpeg&#34; alt=&#34;newlib&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/newlibinfo.jpeg&#34; alt=&#34;newlibinfo&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement your library code inside the library module you created in the last step.&lt;/li&gt;
&lt;li&gt;Next add the library module as a dependency to the app module.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Goto &lt;code&gt;File&amp;gt;Project Structure..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;app&lt;/code&gt; module in the sidebar&lt;/li&gt;
&lt;li&gt;Select the &lt;code&gt;Dependencies&lt;/code&gt; tab&lt;/li&gt;
&lt;li&gt;At the bottom is a &lt;code&gt;+&lt;/code&gt; icon, click that and select &lt;code&gt;Module dependency&lt;/code&gt; and select your &lt;code&gt;library&lt;/code&gt; module.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;ok&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/project.jpeg&#34; alt=&#34;project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/prjstruct.jpeg&#34; alt=&#34;prjstruct&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/addmodule.jpeg&#34; alt=&#34;addmodule&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;publishing-your-android-awesome-library&#34;&gt;Publishing your Android &amp;ldquo;Awesome&amp;rdquo; Library&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Once project is synced, add the required plugins to classpath in &lt;code&gt;build.gradle&lt;/code&gt; file at root project level, as shown below&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt; dependencies {
    classpath &#39;com.android.tools.build:gradle:2.1.3&#39;
    ..
    ..
    // Required plugins added to classpath to facilitate pushing to Jcenter/Bintray
    classpath &#39;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7&#39;
    classpath &#39;com.github.dcendents:android-maven-gradle-plugin:1.4.1&#39;
    ..
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Next, apply the &lt;code&gt;bintray&lt;/code&gt; and &lt;code&gt;install&lt;/code&gt; plugins at the bottom of build.gradle file at library module level. Also add the ext variable with required information as shown below&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt; apply plugin: &#39;com.android.library&#39;

 ext {
   bintrayRepo = &#39;maven&#39;
   bintrayName = &#39;awesomelib&#39;   // Has to be same as your library module name

   publishedGroupId = &#39;com.github.nisrulz&#39;
   libraryName = &#39;AwesomeLib&#39;
   artifact = &#39;awesomelib&#39;     // Has to be same as your library module name

   libraryDescription = &#39;Android Library to make any text into Toast with Awesome prepended to the text&#39;

   // Your github repo link
   siteUrl = &#39;https://github.com/nisrulz/UploadToBintray&#39;
   gitUrl = &#39;https://github.com/nisrulz/UploadToBintray.git&#39;
   githubRepository= &#39;nisrulz/UploadToBintray&#39;

   libraryVersion = &#39;1.0&#39;

   developerId = &#39;nisrulz&#39;
   developerName = &#39;Nishant Srivastava&#39;
   developerEmail = &#39;nisrulz@gmail.com&#39;

   licenseName = &#39;The Apache Software License, Version 2.0&#39;
   licenseUrl = &#39;http://www.apache.org/licenses/LICENSE-2.0.txt&#39;
   allLicenses = [&amp;quot;Apache-2.0&amp;quot;]
 }

 ..
 ..

 // Place it at the end of the file
 apply from: &#39;https://raw.githubusercontent.com/nisrulz/JCenter/master/installv1.gradle&#39;
 apply from: &#39;https://raw.githubusercontent.com/nisrulz/JCenter/master/bintrayv1.gradle&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Edit your &lt;code&gt;local.properties&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;bintray.user=&amp;lt;your_bintray_username&amp;gt;
bintray.apikey=&amp;lt;your_bintray_apikey&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE : &lt;code&gt;bintray.user&lt;/code&gt; and &lt;code&gt;bintray.apikey&lt;/code&gt; have to be in &lt;code&gt;local.properties&lt;/code&gt; specifically or else you will get error later regarding the user and apikey values not available to the bintrayUpload gradle task as below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;No value has been specified for property &#39;apiKey&#39;.
No value has been specified for property &#39;user&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now lets setup Bintray before we can push our artifact to it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Register for an account on &lt;a href=&#34;https://bintray.com/&#34;&gt;bintray.com&lt;/a&gt; and click the activation email they send you.&lt;/li&gt;
&lt;li&gt;Add a new Maven repository and click &lt;strong&gt;Create New Package&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;You should now have a maven repository. For instance:
&lt;code&gt;https://bintray.com/nisrulz/maven&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now once you have your maven repo setup , click on &lt;strong&gt;Edit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/edit.jpeg&#34; alt=&#34;edit&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and see that you have selected the option &lt;code&gt;GPG sign uploaded files using Bintray&#39;s public/private key pair.&lt;/code&gt; and then click &lt;strong&gt;Update&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/gpg.jpeg&#34; alt=&#34;gpg&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once everything is configured, run the below in your terminal in your root of the project&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;./gradlew clean build install bintrayUpload
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Now once your project is up on bintray, simply hit &lt;strong&gt;Add to Jcenter&lt;/strong&gt; button to sync with JCenter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/addtojcenter.jpeg&#34; alt=&#34;addtojcenter&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;using-your-android-awesome-library-in-other-projects&#34;&gt;Using your Android &amp;ldquo;Awesome&amp;rdquo; Library in other projects&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Your code is available through the private repo at bintray&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;repositories {
   jcenter()
   maven { url &#39;https://dl.bintray.com/&amp;lt;bintray_username&amp;gt;/maven&#39; }
}
dependencies {
  compile &#39;com.github.&amp;lt;bintray_username&amp;gt;:&amp;lt;library_module&amp;gt;:1.0&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;i.e for the sample lib in this repo , &lt;code&gt;awesomelib&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;repositories {
   jcenter()
   maven { url &#39;https://dl.bintray.com/nisrulz/maven&#39; }
}
dependencies {
  compile &#39;com.github.nisrulz:awesomelib:1.0&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Your code is available through JCenter if you have received the mail with confirmation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/finalmail.jpeg&#34; alt=&#34;finalmail&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Few things to note when you received the final email.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Goto your maven repo at bintray and verify that you have Jcenter under the &lt;strong&gt;Linked to&lt;/strong&gt; section&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/linked.jpeg&#34; alt=&#34;linked&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now you would also want to sync the artifact to &lt;a href=&#34;https://search.maven.org/&#34;&gt;MavenCentral&lt;/a&gt;, for that you need to hit the &lt;strong&gt;Maven Central&lt;/strong&gt; tab and sync&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/synctomaven.jpeg&#34; alt=&#34;synctomaven&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you hit sync you would see as below. Wait for few hours for the sync to occur.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/syncstatus.jpeg&#34; alt=&#34;syncstatus&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can use the lib now as follows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
    compile &#39;com.github.&amp;lt;bintray_username&amp;gt;:&amp;lt;library_module&amp;gt;:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;i.e for the sample lib in this repo , &lt;code&gt;awesomelib&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
      compile &#39;com.github.nisrulz:awesomelib:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Let the world know of your &lt;strong&gt;AwesomeLib&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Add a readme that explains how to integrate and use your Awesome library&lt;/li&gt;
&lt;li&gt;Add a license block as in this repo&lt;/li&gt;
&lt;li&gt;Also include the Bintray badge provided by Bintray in your readme
&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/badge.jpeg&#34; alt=&#34;badge&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Promote your lib on social media so that others can know about it.&lt;/li&gt;
&lt;li&gt;Always add a working sample app in your project that demonstrates your library in use.&lt;/li&gt;
&lt;li&gt;Add screenshots if possible in your readme.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The code for the AwesomeLibrary and this guide itself is open sourced and available on &lt;a href=&#34;https://github.com/nisrulz/UploadToBintray&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;bintray&lt;/code&gt; and &lt;code&gt;install&lt;/code&gt; plugins are also available on &lt;a href=&#34;https://github.com/nisrulz/JCenter&#34;&gt;github&lt;/a&gt;. You may fork it and use it in your namespace.&lt;/p&gt;

&lt;p&gt;Star it or just fork it to use it.&lt;/p&gt;

&lt;p&gt;This post is first in parts of a series&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;Guide to publishing your Android Library via Jcenter/Bintray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-mavencentral/&#34;&gt;Guide to publishing your Android Library via MavenCentral&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jitpack/&#34;&gt;Guide to publishing your Android Library via JitPack&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>