<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Crushing C.O.D.E</title>
    <link>http://crushingcode.github.io/tags/android/</link>
    <description>Recent content in Android on Crushing C.O.D.E</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2015</copyright>
    <lastBuildDate>Sat, 24 Sep 2016 10:54:24 +0200</lastBuildDate>
    <atom:link href="http://crushingcode.github.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Whats in the APK?</title>
      <link>http://crushingcode.github.io/whats-in-the-apk/</link>
      <pubDate>Sat, 24 Sep 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/whats-in-the-apk/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/header.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If I give you the code of an android app and ask you to provide me information regarding the android &lt;strong&gt;app&lt;/strong&gt; like  &lt;code&gt;minSdkVersion&lt;/code&gt;, &lt;code&gt;targetSdkVersion&lt;/code&gt;, permissions, configurations, almost anyone who knows how to code an android app would provide it to me in a few minutes. But what if I gave you an android &lt;strong&gt;apk&lt;/strong&gt; file and then ask you to answer for the same 🤔 Its tricky if you try to think at the very first instance.&lt;/p&gt;

&lt;p&gt;I actually ran into such a situation and even though I had known &lt;code&gt;aapt&lt;/code&gt; tool for a long time, it didnot hit my head the very first instance when I had to get the permissions declared inside the &lt;code&gt;apk&lt;/code&gt;. It was clear I needed to brush up the concepts and follow an efficient approach. This blog post will explain how to do so. Also helpful when you are trying to reverse lookup contents of any other app 🤓&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Ok, the most common way to approach this problem has to be this one&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Going with the definition of an &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Android_application_package&#34;&gt;APK&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Android application package (APK)&lt;/strong&gt; is the package file format used by the Android operating system for distribution and installation of mobile apps and middleware.&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;strong&gt;APK&lt;/strong&gt; files are a type of archive file, specifically in &lt;strong&gt;zip&lt;/strong&gt; format packages based on the JAR file format, with .apk as the filename extension.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/apk.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;..hmm so its basically a &lt;em&gt;&lt;strong&gt;ZIP&lt;/strong&gt;&lt;/em&gt; format, so what I can do is rename the extension from &lt;strong&gt;.apk&lt;/strong&gt; to &lt;strong&gt;.zip&lt;/strong&gt; and I should be able extract the contents.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/rename.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/zip.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cool, so we now see what the zip file contain and they are all available for inspection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/contents.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Well at this point you would think that you have got access to all files so you can give me all the information right away. Well not so quick Mr.AndroidDev 😬&lt;/p&gt;

&lt;p&gt;Go ahead try and open up the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; in some text editor to check out its content. This is what you would get&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/androidmanifest.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;..what it basically means is that the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; isn&amp;rsquo;t in human readable format anymore. So your chances of reading basic information regarding the apk from the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; goes down the drain 😞&lt;/p&gt;

&lt;p&gt;&amp;hellip;.&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;..&lt;/p&gt;

&lt;p&gt;..Not really 😋 There are tools to analyze the Android APK and there is one which has been there since the very beginning.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think its known to all the experinced devs but I am pretty sure a lot of budding as well as seasoned Android Devs have not even heard about it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The tool thats available as part of the Android Build Tool is&lt;/p&gt;

&lt;h4 id=&#34;aapt-android-asset-packaging-tool&#34;&gt;&lt;strong&gt;&lt;code&gt;aapt&lt;/code&gt;&lt;/strong&gt; -  Android Asset Packaging Tool&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;This tool can be used to list, add and remove files in an APK file, package resources, crunching PNG files, etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First of all, where exactly is this located 🤔&lt;/p&gt;

&lt;p&gt;Good question, its available as part of build tools in your android sdk.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;path_to_android_sdk&amp;gt;/build-tools/&amp;lt;build_tool_version_such_as_24.0.2&amp;gt;/aapt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..ok so what can it actually do ? From the &lt;code&gt;man&lt;/code&gt; pages of the tool itself&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aapt list&lt;/code&gt; - Listing contents of a ZIP, JAR or APK file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aapt dump&lt;/code&gt; - Dumping specific information from an APK file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aapt package&lt;/code&gt; - Packaging Android resources.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aapt remove&lt;/code&gt; - Removing files from a ZIP, JAR or APK file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aapt add&lt;/code&gt; - Adding files to a ZIP, JAR or APK file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aapt crunch&lt;/code&gt; - Crunching PNG files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are interested in &lt;code&gt;aapt list&lt;/code&gt; and &lt;code&gt;aapt dump&lt;/code&gt; specifically as these are what will help us provide &lt;code&gt;apk&lt;/code&gt; information.&lt;/p&gt;

&lt;p&gt;Lets find information that we are looking for directly from the &lt;code&gt;apk&lt;/code&gt; by running the &lt;code&gt;aapt&lt;/code&gt; tool on it.&lt;/p&gt;

&lt;hr&gt;

&lt;h5 id=&#34;get-base-information-of-the-apk&#34;&gt;Get base information of the apk&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aapt dump badging app-debug.apk 
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result&#34;&gt;&amp;gt; Result&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;package: name=&#39;com.example.application&#39; versionCode=&#39;1&#39; versionName=&#39;1.0&#39; platformBuildVersionName=&#39;&#39;
sdkVersion:&#39;16&#39;
targetSdkVersion:&#39;24&#39;
uses-permission: name=&#39;android.permission.WRITE_EXTERNAL_STORAGE&#39;
uses-permission: name=&#39;android.permission.CAMERA&#39;
uses-permission: name=&#39;android.permission.VIBRATE&#39;
uses-permission: name=&#39;android.permission.INTERNET&#39;
uses-permission: name=&#39;android.permission.RECORD_AUDIO&#39;
uses-permission: name=&#39;android.permission.READ_EXTERNAL_STORAGE&#39;
application-label-af:&#39;Example&#39;
application-label-am:&#39;Example&#39;
application-label-ar:&#39;Example&#39;
..
application-label-zu:&#39;Example&#39;
application-icon-160:&#39;res/mipmap-mdpi-v4/ic_launcher.png&#39;
application-icon-240:&#39;res/mipmap-hdpi-v4/ic_launcher.png&#39;
application-icon-320:&#39;res/mipmap-xhdpi-v4/ic_launcher.png&#39;
application-icon-480:&#39;res/mipmap-xxhdpi-v4/ic_launcher.png&#39;
application-icon-640:&#39;res/mipmap-xxxhdpi-v4/ic_launcher.png&#39;
application: label=&#39;Example&#39; icon=&#39;res/mipmap-mdpi-v4/ic_launcher.png&#39;
application-debuggable
launchable-activity: name=&#39;com.example.application.MainActivity&#39;  label=&#39;&#39; icon=&#39;&#39;
feature-group: label=&#39;&#39;
  uses-feature: name=&#39;android.hardware.camera&#39;
  uses-feature-not-required: name=&#39;android.hardware.camera.autofocus&#39;
  uses-feature-not-required: name=&#39;android.hardware.camera.front&#39;
  uses-feature-not-required: name=&#39;android.hardware.microphone&#39;
  uses-feature: name=&#39;android.hardware.faketouch&#39;
  uses-implied-feature: name=&#39;android.hardware.faketouch&#39; reason=&#39;default feature for all apps&#39;
main
other-activities
supports-screens: &#39;small&#39; &#39;normal&#39; &#39;large&#39; &#39;xlarge&#39;
supports-any-density: &#39;true&#39;
locales: &#39;af&#39; &#39;am&#39; &#39;ar&#39; &#39;az-AZ&#39; &#39;be-BY&#39; &#39;bg&#39; &#39;bn-BD&#39; &#39;bs-BA&#39; &#39;ca&#39; &#39;cs&#39; &#39;da&#39; &#39;de&#39; &#39;el&#39; &#39;en-AU&#39; &#39;en-GB&#39; &#39;en-IN&#39; &#39;es&#39; &#39;es-US&#39; &#39;et-EE&#39; &#39;eu-ES&#39; &#39;fa&#39; &#39;fi&#39; &#39;fr&#39; &#39;fr-CA&#39; &#39;gl-ES&#39; &#39;gu-IN&#39; &#39;hi&#39; &#39;hr&#39; &#39;hu&#39; &#39;hy-AM&#39; &#39;in&#39; &#39;is-IS&#39; &#39;it&#39; &#39;iw&#39; &#39;ja&#39; &#39;ka-GE&#39; &#39;kk-KZ&#39; &#39;km-KH&#39; &#39;kn-IN&#39; &#39;ko&#39; &#39;ky-KG&#39; &#39;lo-LA&#39; &#39;lt&#39; &#39;lv&#39; &#39;mk-MK&#39; &#39;ml-IN&#39; &#39;mn-MN&#39; &#39;mr-IN&#39; &#39;ms-MY&#39; &#39;my-MM&#39; &#39;nb&#39; &#39;ne-NP&#39; &#39;nl&#39; &#39;pa-IN&#39; &#39;pl&#39; &#39;pt&#39; &#39;pt-BR&#39; &#39;pt-PT&#39; &#39;ro&#39; &#39;ru&#39; &#39;si-LK&#39; &#39;sk&#39; &#39;sl&#39; &#39;sq-AL&#39; &#39;sr&#39; &#39;sr-Latn&#39; &#39;sv&#39; &#39;sw&#39; &#39;ta-IN&#39; &#39;te-IN&#39; &#39;th&#39; &#39;tl&#39; &#39;tr&#39; &#39;uk&#39; &#39;ur-PK&#39; &#39;uz-UZ&#39; &#39;vi&#39; &#39;zh-CN&#39; &#39;zh-HK&#39; &#39;zh-TW&#39; &#39;zu&#39;
densities: &#39;160&#39; &#39;240&#39; &#39;320&#39; &#39;480&#39; &#39;640&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h5 id=&#34;get-list-of-permissions-declared-in-the-androidmanifest-of-the-apk&#34;&gt;Get list of permissions declared in the AndroidManifest of the apk&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aapt dump permissions app-debug.apk
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result-1&#34;&gt;&amp;gt; Result&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;package: com.example.application
uses-permission: name=&#39;android.permission.WRITE_EXTERNAL_STORAGE&#39;
uses-permission: name=&#39;android.permission.CAMERA&#39;
uses-permission: name=&#39;android.permission.VIBRATE&#39;
uses-permission: name=&#39;android.permission.INTERNET&#39;
uses-permission: name=&#39;android.permission.RECORD_AUDIO&#39;
uses-permission: name=&#39;android.permission.READ_EXTERNAL_STORAGE&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h5 id=&#34;get-list-of-configurations-for-the-apk&#34;&gt;Get list of configurations for the apk&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aapt dump configurations app-debug.apk
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result-2&#34;&gt;&amp;gt; Result&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;large-v4
xlarge-v4
night-v8
v11
v12
v13
w820dp-v13
h720dp-v13
sw600dp-v13
v14
v17
v18
v21
ldltr-v21
v22
v23
port
land
mdpi-v4
ldrtl-mdpi-v17
hdpi-v4
ldrtl-hdpi-v17
xhdpi-v4
ldrtl-xhdpi-v17
xxhdpi-v4
ldrtl-xxhdpi-v17
xxxhdpi-v4
ldrtl-xxxhdpi-v17
ca
af
..
sr
b+sr+Latn
...
sv
iw
sw
bs-rBA
fr-rCA
lo-rLA
...
kk-rKZ
uz-rUZ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..also try out these&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Print the resource table from the APK.
aapt dump resources app-debug.apk

# Print the compiled xmls in the given assets.
aapt dump xmltree app-debug.apk

# Print the strings of the given compiled xml assets.
aapt dump xmlstrings app-debug.apk

# List contents of Zip-compatible archive.
aapt list -v -a  app-debug.apk    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. as you can see you can easily get the information without even going through the process of unzipping the &lt;code&gt;apk&lt;/code&gt;, but by using the &lt;code&gt;aapt&lt;/code&gt; tool directly on the &lt;code&gt;apk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is more that you can do , taking more info from the &lt;code&gt;man&lt;/code&gt; pages of the &lt;code&gt;aapt&lt;/code&gt; tool&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aapt r[emove] [-v] file.{zip,jar,apk} file1 [file2 ...]
  Delete specified files from Zip-compatible archive.
  
aapt a[dd] [-v] file.{zip,jar,apk} file1 [file2 ...]
  Add specified files to Zip-compatible archive.

aapt c[runch] [-v] -S resource-sources ... -C output-folder ...
  Do PNG preprocessing and store the results in output folder.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..I will let you explore these on your own 🙂&lt;/p&gt;

&lt;p&gt;Comment/Suggestions always welcome.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://elinux.org/Android_aapt&#34;&gt;Reference Link&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Got featured in &lt;a href=&#34;http://androidweekly.net/issues/issue-224&#34;&gt;AndroidWeekly Issue 224&lt;/a&gt;, thank you for the love&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you would like to get more of such android tips and tricks, just hop onto my &lt;strong&gt;&lt;a href=&#34;https://github.com/nisrulz/android-tips-tricks&#34;&gt;Android Tips &amp;amp; Tricks&lt;/a&gt;&lt;/strong&gt; github repository. I keep updating it constantly.&lt;/p&gt;

&lt;p&gt;Keep on crushing code!🤓 😁&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Update Dependencies.Code.Repeat.</title>
      <link>http://crushingcode.github.io/update-dependencies-code-repeat/</link>
      <pubDate>Sat, 03 Sep 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/update-dependencies-code-repeat/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/updatedependency/header.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agree or not agree, but on an average consensus pretty much every android dev goes through the loop of &lt;strong&gt;Update Dependencies.Code.Repeat.&lt;/strong&gt; for each of his/her android project. Its frustrating, a waste of time and super annoying when you would want to have the same version across all projects.&lt;/p&gt;

&lt;p&gt;One of such situations that I recently got into was trying to keep all my apps under &lt;strong&gt;&lt;a href=&#34;https://github.com/nisrulz/android-examples&#34;&gt;Android-Examples&lt;/a&gt;&lt;/strong&gt; repository on github updated. As you can see it the repository has multiple small and simple examples of completely functional android apps. Keeping all of them updated was becoming a hard task whenever a new version of android-gradle-plugin, support library or google play services would be released.&lt;/p&gt;

&lt;p&gt;Initially I would go on to update each app in the repository and then commiting it back. As you can see it wasn&amp;rsquo;t the most efficient way to do it. So sometime back I decided that I am going to put an end to this process and make all version configurations common to all apps and thus escape the &lt;strong&gt;Update Dependencies.Code.Repeat.&lt;/strong&gt; loop of hell.&lt;/p&gt;

&lt;p&gt;So now that I had decided to not update each app individually, I decided to look at my options. The obvious one here was looking at Gradle that supported variables.&lt;/p&gt;

&lt;p&gt;Now we all might have done this for &lt;code&gt;support-library&lt;/code&gt; , where we define a variable inside our module&amp;rsquo;s &lt;code&gt;build.gradle&lt;/code&gt; and  then reference it as below&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;def  supportLibVer = &amp;quot;24.2.0&amp;quot;
..
dependencies {
  compile &amp;quot;com.android.support:appcompat-v7:$supportLibVer&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what I have done here is basically&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Defined a variable named &lt;code&gt;supportLibVer&lt;/code&gt; with the value &lt;code&gt;24.2.0&lt;/code&gt; using &lt;code&gt;def&lt;/code&gt; keyword.&lt;/li&gt;
&lt;li&gt;Next referenced it by using it in the &lt;code&gt;compile&lt;/code&gt; statement as &lt;code&gt;$supportLibVer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the surrounding quote is a double quote &lt;code&gt;&amp;quot;&lt;/code&gt; and not a single quote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now this approach is basically using a &lt;a href=&#34;https://docs.gradle.org/current/userguide/writing_build_scripts.html#sec:local_variables&#34;&gt;Local Variable &lt;/a&gt;, which means that this variable works in the scope of the &lt;code&gt;build.gradle&lt;/code&gt; file it is defined in.&lt;/p&gt;

&lt;p&gt;We want to &lt;strong&gt;&lt;em&gt;externalize&lt;/em&gt;&lt;/strong&gt; the variable from outside the &lt;code&gt;build.gradle&lt;/code&gt; file of the module, so as to provide values to all modules of the project.
Gradle&amp;rsquo;s &lt;a href=&#34;https://docs.gradle.org/current/userguide/writing_build_scripts.html#sec:extra_properties&#34;&gt;Extra properties&lt;/a&gt; comes to the rescue for this.&lt;/p&gt;

&lt;p&gt;The way we use them is by moving our varibales to an &lt;code&gt;ext&lt;/code&gt; block inside the project&amp;rsquo;s root &lt;code&gt;build.gradle&lt;/code&gt; file and referencing it as below&lt;/p&gt;

&lt;p&gt;Project&amp;rsquo;s root &lt;code&gt;build.gradle&lt;/code&gt; file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;ext {
    supportLibVer = &amp;quot;24.2.0&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now reference it in all/required modules as below&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;..
dependencies {
  compile &amp;quot;com.android.support:appcompat-v7:$rootProject.ext.supportLibVer&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Notice that referencing variable is changed now to &lt;code&gt;$rootProject.ext.supportLibVer&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;..hmm looks like we are going somewhere with this. So till now we have been able to externalize the variables so as to facilitate common values to the multiple modules inside a particluar project.&lt;/p&gt;

&lt;p&gt;But my requirement was a step ahead than this. I wanted to provide common values to all projects inside my repository and not just to one particular project. So I needed to provide an external &lt;code&gt;gradle&lt;/code&gt; file (that I place at the root of the folder which contains all my projects) with all &lt;code&gt;ext&lt;/code&gt; variables defined in it , something like this [&lt;a href=&#34;https://github.com/nisrulz/android-examples/blob/master/dependencies.gradle&#34;&gt;dependencies.gradle&lt;/a&gt;]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;ext {
   androidPluginVer = &amp;quot;2.1.3&amp;quot;
   compileSdkVer = 24
   buildToolsVer = &amp;quot;24.0.2&amp;quot;

   minSdkVer = 9
   targetSdkVer = 24

   supportLibVer = &amp;quot;24.2.0&amp;quot;
   googlePlayServicesVer = &amp;quot;9.4.0&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But how do I make them available to each &lt;strong&gt;sub-module&lt;/strong&gt; inside each of my projects?&lt;/p&gt;

&lt;p&gt;I had to dig the gradle docs and buried deep inside is a section that talks about it, called &lt;a href=&#34;https://docs.gradle.org/current/userguide/multi_project_builds.html#sec:subproject_configuration&#34;&gt;Subproject Configuration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So after some practical experimentation i figured out how I can use it to facilitate the &lt;code&gt;ext&lt;/code&gt; variables to &lt;strong&gt;sub-modules&lt;/strong&gt; of each project.
This is what I did next in each Project&amp;rsquo;s root &lt;code&gt;build.gradle&lt;/code&gt;, I added a &lt;code&gt;subprojects&lt;/code&gt; configuration section just below &lt;code&gt;allprojects&lt;/code&gt; configuration section and added a &lt;code&gt;apply from:&lt;/code&gt; statement to apply my external gradle file to each sub-module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ...
}

allprojects {
    ..
}

// This is added to apply the gradle file to each module under the project
subprojects {
    apply from: &#39;../../dependencies.gradle&#39;
}
..

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this did was that it made my external variables, defined in &lt;code&gt;dependencies.gradle&lt;/code&gt; files available in the scope of each module in each of my projects now and I could now reference them simply as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;..
dependencies {
  compile &amp;quot;com.android.support:appcompat-v7:$supportLibVer&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good. Now this makes life so much easy and now I can provide common values to all the dependencies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But wait&lt;/strong&gt;, if you would try to provide a variable and facilitate the version for &lt;code&gt;android-gradle-plugin&lt;/code&gt;, you would see that this wont work!&lt;/p&gt;

&lt;p&gt;Well thats a bummer, as I needed to make that as a common variable too.&lt;/p&gt;

&lt;p&gt;So after much experimentation, I figured out it was because when we define the &lt;code&gt;subprojects&lt;/code&gt; configuration , it doesnot apply to the root project&amp;rsquo;s &lt;code&gt;build.gradle&lt;/code&gt;. Hmm, this is news as we had almost solved the problem.&lt;/p&gt;

&lt;p&gt;So the way I solved this is by applying the &lt;code&gt;dependencies.gradle&lt;/code&gt; to the &lt;code&gt;buildscript&lt;/code&gt; section directly inside the root &lt;code&gt;build.gradle&lt;/code&gt; for each Project. So now each project&amp;rsquo;s root &lt;code&gt;build.gradle&lt;/code&gt; script became as below&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    // This is added to apply the gradle file to facilitate providing variable values to root build.gradle of the project
    apply from: &#39;../dependencies.gradle&#39;
    ..
    dependencies {
        classpath &amp;quot;com.android.tools.build:gradle:$androidPluginVer&amp;quot;
        ..
    }
}


allprojects {
    ..
}

// This is added to apply the gradle file to each module under the project
subprojects {
    apply from: &#39;../../dependencies.gradle&#39;
}
..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nisrulz/android-examples/blob/master/ActivityLifecycle/build.gradle&#34;&gt;Here is a functional root &lt;code&gt;build.gradle&lt;/code&gt; script from one of the project of my repository itself&lt;/a&gt; and &lt;a href=&#34;https://github.com/nisrulz/android-examples/blob/master/ActivityLifecycle/app/build.gradle&#34;&gt;Here is a functional module &lt;code&gt;build.gradle&lt;/code&gt; script from the same project of my repository itself&lt;/a&gt;. You can see I extended the idea to start externalizing the variable for &lt;code&gt;buildToolsVersion&lt;/code&gt; and &lt;code&gt;compileSdkVersion&lt;/code&gt; too :D&lt;/p&gt;

&lt;p&gt;Great! Now we only need to change the values inside the &lt;code&gt;dependencies.gradle&lt;/code&gt; file and hey presto! when ever I would be loading up any of the projects , they will reference the values from this file and would automagically be working of the most udpated version.&lt;/p&gt;

&lt;p&gt;You can checkout the &lt;a href=&#34;https://github.com/nisrulz/android-examples&#34;&gt;Android-Examples&lt;/a&gt; repository to see a fully functional model of this approach.&lt;/p&gt;

&lt;p&gt;Phew, thats all for this time. Hoping it will solve any similar problems, as this approach can be definitely be extended.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Got featured in &lt;a href=&#34;http://androidweekly.net/issues/issue-221&#34;&gt;AndroidWeekly Issue 221&lt;/a&gt;, thank you for the love&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Comment/Suggest me a better approach, if you know one.&lt;/p&gt;

&lt;p&gt;Keep on crushing code!🤓 😁&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guide to publishing your Android Library via JitPack</title>
      <link>http://crushingcode.github.io/publish-your-android-library-via-jitpack/</link>
      <pubDate>Fri, 29 Jul 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/publish-your-android-library-via-jitpack/</guid>
      <description>

&lt;p&gt;Ok so you already know how to build your android library and publish it to JCenter/MavenCentral. This post is third in parts of a series.&lt;/p&gt;

&lt;p&gt;P.S. : If you dont know how to , go ahead and have a look&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jcenter/&#34;&gt;Guide to publishing your Android Library via Jcenter/Bintray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-mavencentral/&#34;&gt;Guide to publishing your Android Library via MavenCentral&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;Guide to publishing your Android Library via JitPack&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The very first question that people would have is&lt;/p&gt;

&lt;h3 id=&#34;what-is-jitpack&#34;&gt;What is JitPack&lt;/h3&gt;

&lt;p&gt;As per their &lt;a href=&#34;https://www.jitpack.io/&#34;&gt;website&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Easy to use package repository for Git. Publish your JVM and Android libraries&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So basically JitPack builds Git projects on demand and provides you with ready-to-use artifacts (jar, aar).&lt;/p&gt;

&lt;h3 id=&#34;why-would-i-use-it-instead-of-jcenter-or-mavencentral&#34;&gt;Why would I use it instead of JCenter or MavenCentral ?&lt;/h3&gt;

&lt;p&gt;Publishing to MavenCentral or JCenter is a well set process which involves people to go through steps in order to let their artifacts be hosted on these repositories. The process also involves you to wait for a certain few hours to get everything synced up.&lt;/p&gt;

&lt;p&gt;On the other hand JitPack is the most simplest way of publishing the artifacts. There is no need to go through project build and upload steps. All you need to do is&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Push your project to GitHub&lt;/li&gt;
&lt;li&gt;Tag a &lt;code&gt;release&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Head over to JitPack and request to publish the &lt;code&gt;release&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;hellip;and thats it. You have your library code available in just few minutes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It just works! Cool , isn&amp;rsquo;t it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I will walk you through the process to help understand the process in a more practical mannner.&lt;/p&gt;

&lt;p&gt;The first step that you need is to create and build your Android &amp;ldquo;Awesome&amp;rdquo; Library, which can be read in the &lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jcenter/&#34;&gt;first post of this series here&lt;/a&gt;. If you have not done so , then please go ahead and read it up. Once done comeback here to read further.&lt;/p&gt;

&lt;p&gt;Assuming you already have your Android &amp;ldquo;Awesome&amp;rdquo; Library built , I will jump directly to steps involved in publishing your library to JitPack&lt;/p&gt;

&lt;h5 id=&#34;publishing-your-android-awesome-library&#34;&gt;Publishing your Android &amp;ldquo;Awesome&amp;rdquo; Library&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Once project is synced, add the &lt;code&gt;android-maven-gradle-plugin&lt;/code&gt; to &lt;code&gt;classpath&lt;/code&gt; in &lt;code&gt;build.gradle&lt;/code&gt; file at &lt;strong&gt;root project&lt;/strong&gt; level.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
  classpath &#39;com.android.tools.build:gradle:2.1.2&#39;
  ..
  ..
  // Setup the android-maven-gradle-plugin in the classpath
  classpath &#39;com.github.dcendents:android-maven-gradle-plugin:1.3&#39;
  ..
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next, apply the &lt;code&gt;android-maven-gradle-plugin&lt;/code&gt; to the &lt;code&gt;build.gradle&lt;/code&gt; file at &lt;strong&gt;library module&lt;/strong&gt; level. Also add the group variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt; apply plugin: &#39;com.android.library&#39;
 // Required plugin in library module
 apply plugin: &#39;com.github.dcendents.android-maven&#39;
 // Replace nisrulz with &amp;lt;your_github_username&amp;gt;
 group=&#39;com.github.nisrulz&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a release TAG in git&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git tag -a 1.0 -m &amp;quot;v1.0&amp;quot;
git push origin 1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once everything is pushed and the release TAG is also pushed, goto &lt;code&gt;https://www.jitpack.io/#username/reponame&lt;/code&gt; where replace &lt;code&gt;username&lt;/code&gt; with your github username and &lt;code&gt;reponame&lt;/code&gt; with the reponame of the android project.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the release you would like to share by clicking the ‘Get It’ button next to the list of releases of your repository.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojitpack/sc1.jpeg&#34; alt=&#34;screenshot1&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;using-your-android-awesome-library-in-other-projects&#34;&gt;Using your Android &amp;ldquo;Awesome&amp;rdquo; Library in other projects&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Next the same page at Jitpack would show you how to use the library in your other android projects. Something like below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojitpack/sc2.jpeg&#34; alt=&#34;screenshot1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Selectable code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;  repositories {
      jcenter()
      maven { url “https://jitpack.io” }
  }
  dependencies {
      compile &#39;com.github.nisrulz:awesomelib:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Let the world know of your &lt;strong&gt;AwesomeLib&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Add a readme that explains how to integrate and use your Awesome library&lt;/li&gt;
&lt;li&gt;Add a license block.&lt;/li&gt;
&lt;li&gt;Also include the JitPack badge provided by jitpack in your readme
&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojitpack/badge.jpeg&#34; alt=&#34;badge&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Promote your lib on social media so that others can know about it.&lt;/li&gt;
&lt;li&gt;Always add a working sample app in your project that demonstrates your library in use.&lt;/li&gt;
&lt;li&gt;Add screenshots if possible in your readme.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code for the AwesomeLibrary and this guide itself is open sourced and available on &lt;a href=&#34;https://github.com/nisrulz/UploadToJitpack&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Star it or just fork it to use it.&lt;/p&gt;

&lt;p&gt;And thats it for this series. I hope it helps people to deploy their android libraries for the world to use.&lt;/p&gt;

&lt;p&gt;Have fun crushing code :D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guide to publishing your Android Library via MavenCentral</title>
      <link>http://crushingcode.github.io/publish-your-android-library-via-mavencentral/</link>
      <pubDate>Sun, 17 Jul 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/publish-your-android-library-via-mavencentral/</guid>
      <description>

&lt;p&gt;If you come from the java world, you would already be knowing about MavenCentral in a big way. MavenCentral is the central repository which hosts all the maven artifacts and one can reference them from anywhere in the world. Android artifacts can also be hosted on MavenCentral in a similar manner. Here I am going to document the process to publish an android library to MavenCentral, as I followed it.&lt;/p&gt;

&lt;p&gt;This post is second in parts of a series. If you didnot read the others in series , go have a look&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jcenter/&#34;&gt;Guide to publishing your Android Library via Jcenter/Bintray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;Guide to publishing your Android Library via MavenCentral&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Guide to publishing your Android Library via JitPack (..todo)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first step need you to create and build your Android &amp;ldquo;Awesome&amp;rdquo; Library and can be read in the &lt;a href=&#34;http://crushingcode.github.io/publish-your-android-library-via-jcenter/&#34;&gt;first post of this series here&lt;/a&gt;. If you have not done so , then please go ahead and read it up.&lt;/p&gt;

&lt;p&gt;Assuming you already have your Android &amp;ldquo;Awesome&amp;rdquo; Library built , I will jump directly to steps involved in publishing your library to MavenCentral&lt;/p&gt;

&lt;h5 id=&#34;publishing-your-android-awesome-library&#34;&gt;Publishing your Android &amp;ldquo;Awesome&amp;rdquo; Library&lt;/h5&gt;

&lt;p&gt;Setup &lt;a href=&#34;http://blog.ghostinthemachines.com/2015/03/01/how-to-use-gpg-command-line/&#34;&gt;GPG&lt;/a&gt; and generate yourself a key.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now list your gpg keys&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ gpg --list-keys
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;There the first line will be like pub XXXXX/YYYYYYYY &lt;date&gt;. Remember that ‘YYYYYYYY’ part, it’s you key ID.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Next, publish your keys&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ gpg --keyserver hkp://keyserver.ubuntu.com --send-keys YYYYYYYY
  $ gpg --keyserver hkp://pgp.mit.edu --send-keys YYYYYYYY
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To ensure your keys were published&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ gpg --keyserver hkp://pgp.mit.edu --search-keys
  username@example.com # Use your email
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setup Sonatype account&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a JIRA account on &lt;a href=&#34;https://issues.sonatype.org/secure/Signup!default.jspa&#34;&gt;Sonatype&lt;/a&gt;
&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/signup.jpeg&#34; alt=&#34;signup&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and Login
  &lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/login.jpeg&#34; alt=&#34;login&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Once you are logged in, &lt;a href=&#34;https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;amp;pid=10134&#34;&gt;create a new issue&lt;/a&gt;
&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/create.jpeg&#34; alt=&#34;create&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill out the form as below&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project : Community Support - Open source&lt;/li&gt;
&lt;li&gt;Issue Type : New Project&lt;/li&gt;
&lt;li&gt;Group Id : com.github.github_username&lt;/li&gt;
&lt;li&gt;Project URL : &lt;a href=&#34;https://github.com/github_username/project_name&#34;&gt;https://github.com/github_username/project_name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SCM url : &lt;a href=&#34;https://github.com/github_username/project_name.git&#34;&gt;https://github.com/github_username/project_name.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Username : sonatype_username&lt;/li&gt;
&lt;li&gt;Already Synced to Central : No&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/createissue.jpeg&#34; alt=&#34;createissue&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/createissue2.jpeg&#34; alt=&#34;createissue2&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next hit &lt;strong&gt;Create&lt;/strong&gt;. After that, it can take up to 2 business days to process your issue. Then you will receive a confirmation that your configuration has been prepared and you can publish your library.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; : Do not deploy until after you have received an e-mail notice indicating that the ticket is Resolved.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/approved.jpeg&#34; alt=&#34;approved&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Update &lt;code&gt;gradle.properties&lt;/code&gt; on your local machine  at location &lt;code&gt;~/.gradle/gradle.properties&lt;/code&gt; and include&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; NEXUS_USERNAME=sonatype_username
 NEXUS_PASSWORD=sonatype_password
 signing.keyId=gpg_key_id
 signing.password=gpg_password
 signing.secretKeyRingFile=/Users/username/.gnupg/secring.gpg
 org.gradle.daemon=true
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;IMPORTANT: Steps for setting up your sonatype account up till here are required only once. The steps after these are required whenever publishing your android library, even if its a new one. Just remember to configure it well in your gradle.properties&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;add-the-plugin-by-chris-banes-to-your-library-s-build-gradle&#34;&gt;Add the plugin by Chris Banes to your library&amp;rsquo;s &lt;code&gt;build.gradle&lt;/code&gt;.&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE:  Below is a &lt;a href=&#34;https://github.com/nisrulz/gradle-mvn-push&#34;&gt;fork&lt;/a&gt; of the &lt;a href=&#34;https://github.com/chrisbanes/gradle-mvn-push&#34;&gt;original script&lt;/a&gt; written by Chris Banes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;apply from: &#39;https://raw.github.com/nisrulz/gradle-mvn-push/master/gradle-mvn-push.gradle&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and define the required variables in the &lt;code&gt;gradle.properties&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Properties used by gradle maven-push plugin
VERSION_NAME=1.0.0
VERSION_CODE=1
POM_NAME=&amp;lt;Library_Name&amp;gt;
POM_ARTIFACT_ID=&amp;lt;library_name_smallcaps&amp;gt;

POM_DESCRIPTION=&amp;lt;library_description&amp;gt;
POM_URL=https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;
POM_SCM_URL=https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;
POM_SCM_CONNECTION=scm:git@github.com:&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;.git
POM_SCM_DEV_CONNECTION=scm:git@github.com:&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;.git
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Run in terminal to publish your artifacts&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  ./gradlew build clean uploadArchive
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Login into &lt;a href=&#34;https://oss.sonatype.org/#stagingRepositories&#34;&gt;Nexus Repository Console&lt;/a&gt; and search for your package name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/nexusrepo.jpeg&#34; alt=&#34;nexusrepo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtomaven/close.jpeg&#34; alt=&#34;close&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Close the staged artifact.[wait]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Release the closed artifact (keep drop artifact selected).[wait]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Wait for some hours before everything gets synced with MavenCentral.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;using-your-android-awesome-library-in-other-projects&#34;&gt;Using your Android &amp;ldquo;Awesome&amp;rdquo; Library in other projects&lt;/h5&gt;

&lt;p&gt;Your code is available through MavenCentral if you have received the mail with confirmation&lt;/p&gt;

&lt;p&gt;You can use the lib now as follows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
    compile &#39;&amp;lt;group_name&amp;gt;:&amp;lt;artifact_name&amp;gt;:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;i.e for the sample lib in this repo , &lt;code&gt;awesomelib&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
      compile &#39;com.github.nisrulz:awesomelib:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Let the world know of your &lt;strong&gt;AwesomeLib&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Add a readme that explains how to integrate and use your Awesome library&lt;/li&gt;
&lt;li&gt;Add a license block as in this repo&lt;/li&gt;
&lt;li&gt;Also include a badge of MavenCentral in your readme&lt;/li&gt;
&lt;li&gt;Promote your lib on social media so that others can know about it.&lt;/li&gt;
&lt;li&gt;Always add a working sample app in your project that demonstrates your library in use.&lt;/li&gt;
&lt;li&gt;Add screenshots if possible in your readme.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The code for the AwesomeLibrary and this guide itself is open sourced and available on &lt;a href=&#34;https://github.com/nisrulz/UploadToMavenCentral&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Star it or just fork it to use it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guide to publishing your Android Library via Jcenter/Bintray</title>
      <link>http://crushingcode.github.io/publish-your-android-library-via-jcenter/</link>
      <pubDate>Tue, 12 Jul 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/publish-your-android-library-via-jcenter/</guid>
      <description>

&lt;p&gt;Developers are a different kind of people altogether. &lt;strong&gt;They tend to be lazy but strive to be super efficient at the same time&lt;/strong&gt;.
A lot of this can be seen in the Android world where a certain library pops up everyday to solve a specific problem or  to make the complex processes simpler.&lt;/p&gt;

&lt;p&gt;I have a certain knack for re-using code blocks just to avoid repeative tasks and to facilitate this I usually end up converting those codeblocks into an android library.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But what if I wanted to share my android library with the world?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well in a nutshell the steps to follow would be as below :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all I need to open source the andorid library, which should be easy as you can push it to &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; or any other public git repository.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next I need to push the android library as a maven artifact (aar/jar with a POM) to all of the or one of the below central repositories&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bintray.com/&#34;&gt;JCenter/Bintray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://search.maven.org/&#34;&gt;Maven Central&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jitpack.io/&#34;&gt;Jitpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will walkthrough the process of publishing to each if these central repositories in the upcoming posts of this series.&lt;/p&gt;

&lt;p&gt;For now lets lookup the steps to publish your android library to JCenter/Bintray.&lt;/p&gt;

&lt;h5 id=&#34;creating-your-android-awesome-library&#34;&gt;Creating your Android &amp;ldquo;Awesome&amp;rdquo; Library&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;You can skip to the next part if you already have this built&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Create an Android project or open an existing one in &lt;a href=&#34;https://en.wikipedia.org/wiki/Android_Studio&#34;&gt;Android Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Init the project with git and also create a repo on Github for the same. Each step here onwards represent a commit and should be pushed to github.&lt;/li&gt;
&lt;li&gt;Create and add a new module and choose &lt;code&gt;Android Library&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Goto &lt;code&gt;File&amp;gt;New&amp;gt;New Module..&lt;/code&gt; and select &lt;code&gt;Android Library&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/newmodule.jpeg&#34; alt=&#34;newmodule&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/newlib.jpeg&#34; alt=&#34;newlib&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/newlibinfo.jpeg&#34; alt=&#34;newlibinfo&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement your library code inside the library module you created in the last step.&lt;/li&gt;
&lt;li&gt;Next add the library module as a dependency to the app module.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Goto &lt;code&gt;File&amp;gt;Project Structure..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;app&lt;/code&gt; module in the sidebar&lt;/li&gt;
&lt;li&gt;Select the &lt;code&gt;Dependencies&lt;/code&gt; tab&lt;/li&gt;
&lt;li&gt;At the bottom is a &lt;code&gt;+&lt;/code&gt; icon, click that and select &lt;code&gt;Module dependency&lt;/code&gt; and select your &lt;code&gt;library&lt;/code&gt; module.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;ok&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/project.jpeg&#34; alt=&#34;project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/prjstruct.jpeg&#34; alt=&#34;prjstruct&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/addmodule.jpeg&#34; alt=&#34;addmodule&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;publishing-your-android-awesome-library&#34;&gt;Publishing your Android &amp;ldquo;Awesome&amp;rdquo; Library&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Once project is synced, add the required plugins to classpath in &lt;code&gt;build.gradle&lt;/code&gt; file at root project level, as shown below&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt; dependencies {
    classpath &#39;com.android.tools.build:gradle:2.1.3&#39;
    ..
    ..
    // Required plugins added to classpath to facilitate pushing to Jcenter/Bintray
    classpath &#39;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7&#39;
    classpath &#39;com.github.dcendents:android-maven-gradle-plugin:1.4.1&#39;
    ..
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Next, apply the &lt;code&gt;bintray&lt;/code&gt; and &lt;code&gt;install&lt;/code&gt; plugins at the bottom of build.gradle file at library module level. Also add the ext variable with required information as shown below&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt; apply plugin: &#39;com.android.library&#39;

 ext {
   bintrayRepo = &#39;maven&#39;
   bintrayName = &#39;awesomelib&#39;   // Has to be same as your library module name

   publishedGroupId = &#39;com.github.nisrulz&#39;
   libraryName = &#39;AwesomeLib&#39;
   artifact = &#39;awesomelib&#39;     // Has to be same as your library module name

   libraryDescription = &#39;Android Library to make any text into Toast with Awesome prepended to the text&#39;

   // Your github repo link
   siteUrl = &#39;https://github.com/nisrulz/UploadToBintray&#39;
   gitUrl = &#39;https://github.com/nisrulz/UploadToBintray.git&#39;
   githubRepository= &#39;nisrulz/UploadToBintray&#39;

   libraryVersion = &#39;1.0&#39;

   developerId = &#39;nisrulz&#39;
   developerName = &#39;Nishant Srivastava&#39;
   developerEmail = &#39;nisrulz@gmail.com&#39;

   licenseName = &#39;The Apache Software License, Version 2.0&#39;
   licenseUrl = &#39;http://www.apache.org/licenses/LICENSE-2.0.txt&#39;
   allLicenses = [&amp;quot;Apache-2.0&amp;quot;]
 }

 ..
 ..

 // Place it at the end of the file
 apply from: &#39;https://raw.githubusercontent.com/nisrulz/JCenter/master/installv1.gradle&#39;
 apply from: &#39;https://raw.githubusercontent.com/nisrulz/JCenter/master/bintrayv1.gradle&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Edit your &lt;code&gt;local.properties&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;bintray.user=&amp;lt;your_bintray_username&amp;gt;
bintray.apikey=&amp;lt;your_bintray_apikey&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE : &lt;code&gt;bintray.user&lt;/code&gt; and &lt;code&gt;bintray.apikey&lt;/code&gt; have to be in &lt;code&gt;local.properties&lt;/code&gt; specifically or else you will get error later regarding the user and apikey values not available to the bintrayUpload gradle task as below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;No value has been specified for property &#39;apiKey&#39;.
No value has been specified for property &#39;user&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now lets setup Bintray before we can push our artifact to it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Register for an account on &lt;a href=&#34;https://bintray.com/&#34;&gt;bintray.com&lt;/a&gt; and click the activation email they send you.&lt;/li&gt;
&lt;li&gt;Add a new Maven repository and click &lt;strong&gt;Create New Package&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;You should now have a maven repository. For instance:
&lt;code&gt;https://bintray.com/nisrulz/maven&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now once you have your maven repo setup , click on &lt;strong&gt;Edit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/edit.jpeg&#34; alt=&#34;edit&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and see that you have selected the option &lt;code&gt;GPG sign uploaded files using Bintray&#39;s public/private key pair.&lt;/code&gt; and then click &lt;strong&gt;Update&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/gpg.jpeg&#34; alt=&#34;gpg&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once everything is configured, run the below in your terminal in your root of the project&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;./gradlew clean build install bintrayUpload
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Now once your project is up on bintray, simply hit &lt;strong&gt;Add to Jcenter&lt;/strong&gt; button to sync with JCenter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/addtojcenter.jpeg&#34; alt=&#34;addtojcenter&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;using-your-android-awesome-library-in-other-projects&#34;&gt;Using your Android &amp;ldquo;Awesome&amp;rdquo; Library in other projects&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Your code is available through the private repo at bintray&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;repositories {
   jcenter()
   maven { url &#39;https://dl.bintray.com/&amp;lt;bintray_username&amp;gt;/maven&#39; }
}
dependencies {
  compile &#39;com.github.&amp;lt;bintray_username&amp;gt;:&amp;lt;library_module&amp;gt;:1.0&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;i.e for the sample lib in this repo , &lt;code&gt;awesomelib&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;repositories {
   jcenter()
   maven { url &#39;https://dl.bintray.com/nisrulz/maven&#39; }
}
dependencies {
  compile &#39;com.github.nisrulz:awesomelib:1.0&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Your code is available through JCenter if you have received the mail with confirmation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/finalmail.jpeg&#34; alt=&#34;finalmail&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Few things to note when you received the final email.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Goto your maven repo at bintray and verify that you have Jcenter under the &lt;strong&gt;Linked to&lt;/strong&gt; section&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/linked.jpeg&#34; alt=&#34;linked&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now you would also want to sync the artifact to &lt;a href=&#34;https://search.maven.org/&#34;&gt;MavenCentral&lt;/a&gt;, for that you need to hit the &lt;strong&gt;Maven Central&lt;/strong&gt; tab and sync&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/synctomaven.jpeg&#34; alt=&#34;synctomaven&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you hit sync you would see as below. Wait for few hours for the sync to occur.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/syncstatus.jpeg&#34; alt=&#34;syncstatus&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can use the lib now as follows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
    compile &#39;com.github.&amp;lt;bintray_username&amp;gt;:&amp;lt;library_module&amp;gt;:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;i.e for the sample lib in this repo , &lt;code&gt;awesomelib&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
      compile &#39;com.github.nisrulz:awesomelib:1.0&#39;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Let the world know of your &lt;strong&gt;AwesomeLib&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Add a readme that explains how to integrate and use your Awesome library&lt;/li&gt;
&lt;li&gt;Add a license block as in this repo&lt;/li&gt;
&lt;li&gt;Also include the Bintray badge provided by Bintray in your readme
&lt;img src=&#34;http://crushingcode.github.io/images/posts/uploadtojcenter/badge.jpeg&#34; alt=&#34;badge&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Promote your lib on social media so that others can know about it.&lt;/li&gt;
&lt;li&gt;Always add a working sample app in your project that demonstrates your library in use.&lt;/li&gt;
&lt;li&gt;Add screenshots if possible in your readme.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The code for the AwesomeLibrary and this guide itself is open sourced and available on &lt;a href=&#34;https://github.com/nisrulz/UploadToBintray&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;bintray&lt;/code&gt; and &lt;code&gt;install&lt;/code&gt; plugins are also available on &lt;a href=&#34;https://github.com/nisrulz/JCenter&#34;&gt;github&lt;/a&gt;. You may fork it and use it in your namespace.&lt;/p&gt;

&lt;p&gt;Star it or just fork it to use it.&lt;/p&gt;

&lt;p&gt;This post is first in parts of a series&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;Guide to publishing your Android Library via Jcenter/Bintray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Guide to publishing your Android Library via MavenCentral (..todo)&lt;/li&gt;
&lt;li&gt;Guide to publishing your Android Library via JitPack (..todo)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Own a maven repository, like a boss! – Part 2</title>
      <link>http://crushingcode.github.io/own-a-maven-repository-like-a-bosspart-2/</link>
      <pubDate>Tue, 16 Feb 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/own-a-maven-repository-like-a-bosspart-2/</guid>
      <description>

&lt;p&gt;The world of artifacts and the way they make the life of a developer simpler, fascinates me to a great extent.&lt;/p&gt;

&lt;p&gt;For the same reason I have gone through a lot of good articles online, which explain how the whole process works. However most of the documentation is either not up to date or lacks proper explanation. Personally all I care about is how does it work and how can I make it simpler. Hence I set out to try and implement the whole process on my own.&lt;/p&gt;

&lt;p&gt;We have already covered in &lt;a href=&#34;http://crushingcode.github.io/own-a-maven-repository-like-a-boss–part-1&#34;&gt;Part-1&lt;/a&gt; of this series the process of how to create a maven repository hosted on github and this part builds upon that.&lt;/p&gt;

&lt;p&gt;The next part is actually the simpler step - To consume these artifacts which are hosted on a maven repository in your android project.&lt;/p&gt;

&lt;p&gt;The basic steps required are as follows :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&#34;step-1&#34;&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Goto your maven repository on github and open up your releases folder via the browser.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;step-2&#34;&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Copy the URL in the address bar. It should look like below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/&amp;lt;username&amp;gt;/&amp;lt;mavenrepo&amp;gt;/tree/master/releases
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;step-3&#34;&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Now replace the &lt;code&gt;tree&lt;/code&gt; word in the url with &lt;code&gt;raw&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# From
https://github.com/&amp;lt;username&amp;gt;/&amp;lt;mavenrepo&amp;gt;/tree/master/releases

# to
https://github.com/&amp;lt;username&amp;gt;/&amp;lt;mavenrepo&amp;gt;/raw/master/releases

# and copy this new url.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;step-4&#34;&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Now goto your Android Project and open up your &lt;code&gt;build.gradle&lt;/code&gt; file for the module where you want to include the artifact (i.e app/library).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;step-5&#34;&gt;&lt;strong&gt;Step 5&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Now copy the below to the &lt;code&gt;build.gradle&lt;/code&gt; file with the appropriate url for the maven repository as obtained in &lt;em&gt;Step-3&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;repositories {
maven {
    url &amp;quot;https://github.com/&amp;lt;username&amp;gt;/&amp;lt;mavenrepo&amp;gt;/raw/master/releases&amp;quot;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;h3 id=&#34;step-6&#34;&gt;&lt;strong&gt;Step 6&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Next , add the dependency as you would normally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dependencies {
compile &#39;com.github.&amp;lt;username&amp;gt;:&amp;lt;artifact_name&amp;gt;:&amp;lt;version&amp;gt;&#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;where &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; has to be of the form  &lt;code&gt;&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.&amp;lt;patch&amp;gt;&lt;/code&gt; i.e 1.0.0&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;in-summary&#34;&gt;In Summary&lt;/h2&gt;

&lt;p&gt;You just learned how to use artifacts from your own github account as a maven repository and in essence bypassed the complexity of getting artifacts into the Maven Central/Jcenter.&lt;/p&gt;

&lt;p&gt;For reference you can have a look at my own &lt;a href=&#34;http://crushingcode.co/mavenrepo/&#34;&gt;maven repository&lt;/a&gt; on &lt;a href=&#34;https://github.com/nisrulz/mavenrepo&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However as you would see this is a very limiting way of accessing artifacts.
The developer is supposed to include your &lt;code&gt;maven url&lt;/code&gt; under &lt;code&gt;repository&lt;/code&gt; section which is &amp;hellip;a bit of extra work , right ?&lt;/p&gt;

&lt;p&gt;As a developer we are all very lazy. We want to cut this extra work down to only compiling our artifact as a dependency with a single line of code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compile &#39;com.github.&amp;lt;username&amp;gt;:&amp;lt;artifact_name&amp;gt;:&amp;lt;version&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well this is where Maven Central/Jcenter step in.
A lot of information on them in the next part of this series.&lt;/p&gt;

&lt;p&gt;Till then keep calm and crush c.o.d.e !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Own a maven repository, like a boss! – Part 1</title>
      <link>http://crushingcode.github.io/own-a-maven-repository-like-a-bosspart-1/</link>
      <pubDate>Mon, 03 Aug 2015 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/own-a-maven-repository-like-a-bosspart-1/</guid>
      <description>

&lt;p&gt;Have you ever thought how the central repository works like Maven Central or JCenter?
Is it possible to own one for yourself?
Do you want to host your artifacts in your own private repository?&lt;/p&gt;

&lt;p&gt;If your answer is &lt;strong&gt;YES&lt;/strong&gt;, well you are in the right place. I am going to walk you through basic steps involved in setting up your own maven repository where you can publish your artifacts, using all but your terminal, git and a public remote repository hosting service of your choice ( i.e Github or Bitbucket ).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For those of you who want to jump into the code right away , here is the gist&lt;/strong&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/nisrulz/efb1654eaeb8930591c6.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;For the rest of you who want a complete explanation, lets dive in&lt;/strong&gt;..&lt;/p&gt;

&lt;h2 id=&#34;terms&#34;&gt;Terms&lt;/h2&gt;

&lt;p&gt;Before we start, I want you to get acquainted with some of the terms:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Artifacts&lt;/strong&gt; : An artifact is a file, usually a JAR, that gets deployed to a Maven repository. A Maven build produces one or more artifacts, such as a compiled JAR and a “sources” JAR. Each artifact has a group ID (usually a reversed domain name, like com.example.foo), an artifact ID (just a name), and a version string. The three together uniquely identify the artifact. A project’s dependencies are specified as artifacts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Maven&lt;/strong&gt; : A tool that can be used for building and managing any Java-based project.(&lt;a href=&#34;https://maven.apache.org/what-is-maven.html&#34;&gt;more info&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I would like to mention that having your artifacts in the Maven Central and JCenter has a plethora of advantages which you will never be able to get when using the below method.
Lets just say its just another method to host and publish your artifacts without having to go through the process of publishing it to central repository.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Prerequisites&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;git (&lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;Install guide&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;maven (&lt;a href=&#34;https://maven.apache.org/install.html&#34;&gt;Install guide&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/&#34;&gt;Bitbucket&lt;/a&gt; or &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; account&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JAR/AAR/WAR file to be published to your maven repository&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;….Okay…if you made it till this point, everything is going to be a piece of cake from here onwards :P promise :)&lt;/p&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; : Fire up your terminal/command prompt
&lt;strong&gt;Step 2&lt;/strong&gt; : Create a directory where you will sync your maven artifacts to, lets say its called mavenrepo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir mavenrepo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and change into the mavenrepo directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd mavenrepo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt; : Once inside the directory, initialize it with git&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt; : Create a repository named &lt;strong&gt;mavenrepo (git remote)&lt;/strong&gt; at Github/Bitbucket and add it to your &lt;strong&gt;mavenrepo (git local)&lt;/strong&gt; directory as a remote repository named &lt;strong&gt;origin&lt;/strong&gt; ( here i am adding a github repo)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add origin https://github.com/&amp;lt;username&amp;gt;/mavenrepo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note : you can get the url from Github under the settings tab when at your repository page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/copygithuburl.png&#34; alt=&#34;copygithuburl&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt; :  Create 2 directories under mavenrepo, namely releases and snapshots&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir releases snapshots
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt; : Create README.md under each sub directory, releases and snapshots
Note: This step is required since git will not push empty directories, so we add empty README.md files :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;touch releases/README.md
touch snapshots/README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 7&lt;/strong&gt; : Stage all the changed files under git, using the below command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 8&lt;/strong&gt; : Commit with a message&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -m &amp;quot;Initial Setup&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 9&lt;/strong&gt; : Push to origin&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thats It!
You have a working maven repository :D&lt;/p&gt;

&lt;p&gt;Okay, this is cool …I have a working maven repository ..hmm..but something is missing ….wait a second, where is the artifact that i would be pushing to this maven repository ??
To be specific, how do i generate the maven artifact ?
Simple,&lt;/p&gt;

&lt;h2 id=&#34;generating-a-maven-artifact&#34;&gt;Generating a maven artifact&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 10&lt;/strong&gt; : Generate a maven artifact using the below command in terminal/command prompt (provided you already have the maven installed)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn clean org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file -DgroupId=com.company.id -DartifactId=artificatid -Dversion=1.0.0 -Dpackaging=aar -Dfile=artifact.aar -DlocalRepositoryPath=./mavenrepo/releases/aar -DgeneratePom=true -DcreateChecksum=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;thats a lot to take in but thats just one single command that does it all.&lt;/p&gt;

&lt;p&gt;Lets break it down into parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mvn&lt;/strong&gt; Maven build tool command&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;clean&lt;/strong&gt; Command that attempts to clean a project’s working directory of the files that were generated at build-time&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file&lt;/strong&gt; Command to install the artifact into the maven repository via using a specific maven plugin, here being v2.5.2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-DgroupId&lt;/strong&gt; Specify your package name here i.e.com.company.id&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-DartifactId&lt;/strong&gt; Specify the name of the artifact&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-Dversion&lt;/strong&gt; Specify the version of the artifact&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-Dpackaging&lt;/strong&gt; Specify the packaging type of the artifact i.e jar/aar/war&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-Dfile&lt;/strong&gt; Specify here the specific name of the jar/aar/war you are pushing as a maven artifact&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-DlocalRepositoryPath&lt;/strong&gt; Specify the path to your mavenrepo (git local) i.e.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;./mavenrepo/releases/aar
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-DgeneratePom&lt;/strong&gt; Set it to true to generate a POM file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-DcreateChecksum&lt;/strong&gt; Set it to true to generate the checksum files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 11&lt;/strong&gt; : Once you are done generating the maven artifacts and they are deployed under the specific folder ( releases/snapshots), just stage them, commit and push it to your remote repo…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;&amp;lt;artifact&amp;gt; v1.0.0 added&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Repeat &lt;strong&gt;&lt;em&gt;Steps 10-11&lt;/em&gt;&lt;/strong&gt; every time you want to publish a maven artifact to your own maven repository.&lt;/p&gt;

&lt;h2 id=&#34;in-summary&#34;&gt;In Summary&lt;/h2&gt;

&lt;p&gt;Thats it for Part 1. In the next part we will see how to use this maven repository in our android application to reference libraries into our project with the help of gradle.&lt;/p&gt;

&lt;p&gt;Till then have fun crushing code :D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Meet JACK &amp; JILL , Android’s experimental toolchain</title>
      <link>http://crushingcode.github.io/meet-jack-and-jill-androids-experimental-toolchain/</link>
      <pubDate>Tue, 21 Jul 2015 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/meet-jack-and-jill-androids-experimental-toolchain/</guid>
      <description>&lt;p&gt;JACK &amp;amp; JILL are part of the new tool chain for android and in the words of &lt;a href=&#34;http://android-developers.blogspot.co.uk/2014/12/hello-world-meet-our-new-experimental.html&#34;&gt;Android Developer Blog&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;they are designed to improve build times and simplify development by reducing dependencies on other tools&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In case you are curious, &lt;strong&gt;JACK&lt;/strong&gt; stands for &lt;strong&gt;Java Android Compiler Kit&lt;/strong&gt; and &lt;strong&gt;JILL&lt;/strong&gt; stands for  &lt;strong&gt;Jack Intermediate Library Linker&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Woa ..woa..wooaaaa ..thats sounds too technical ..lets slow this down, right.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JACK&lt;/strong&gt; &amp;amp; &lt;strong&gt;JILL&lt;/strong&gt; were released as an experimental tool chain in the Android SDK  21.1.1 and recently got minor bug fixes in the recent release of Android SDK 21.1.2&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what exactly are they for  ?&lt;/strong&gt;
&lt;strong&gt;JACK&lt;/strong&gt; basically compiles your Java code directly to a .dex Dalvik Executable.
&lt;strong&gt;JILL&lt;/strong&gt; on the other hand translates any libraries you are referencing to a new Jack library file (.jack).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Whats the difference ?&lt;/strong&gt;
Glad you asked :)
The usual process of android compilation process is
1. Use the standard javac compiler to convert the source code to Java bytecode
2. Feed this bytecode to dex compiler to get the Dalvik bytecode&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JACK&lt;/strong&gt; eliminates the conversion to Java bytecode step and directly converts source code to Dalvik bytecode. During the same time it also handles any requested code minification (shrinking and/or obfuscation), previously handled by Proguard and then perform repackaging too.&lt;/p&gt;

&lt;p&gt;Now all this time, &lt;strong&gt;JACK&lt;/strong&gt; was working on you source code, right!
What if you have a library being referenced in the form of say a JAR?
&lt;strong&gt;JILL&lt;/strong&gt; takes care of that, by converting all libraries to Jack Library File (.jack) which can easily be merged by JACK during compilation into object code.
Basically the Android Gradle plugin and JACK collect any .jack library files, along with your source code, and compiles them into a set of dex files and further assembles them into an APK.&lt;/p&gt;

&lt;p&gt;The complete process explained in a diagram&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/jacksitesdiagram.png&#34; alt=&#34;jacksitesdiagram&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why all the hassle for compiler ?&lt;/strong&gt;
Google believes in optimizing the whole process of  compilation of android apps. The faster that happens the better, maybe involve incremental compilation for the same(still under development)! :D
Also due to the Oracle-Google dispute over using java , Google probably wants to move away from using javac and have its own compiler in place to convert source code to dalvik bytecode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you use the tool chain in your apps ?&lt;/strong&gt;
Good question! At the moment JACK &amp;amp; JILL are both in experimental phase.
So you specifically need to enable them in your build.gradle i.e. you need to set &lt;code&gt;useJack = true&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;android {
    ...
     buildToolsRevision &#39;24.0.1&#39;
     defaultConfig {
         // Enable the experimental Jack build tools.
         useJack = true
         }
    ...
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tools.android.com/tech-docs/jackandjill&#34;&gt;More Info at Android Tools Project Site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Downside ?&lt;/strong&gt;
As of now these support only Java 7 i.e no support for Java 8 :(
No Annotation processing :(&lt;/p&gt;

&lt;p&gt;Thats it for now.
Any questions are always welcome :D&lt;/p&gt;

&lt;p&gt;References&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://android-developers.blogspot.co.uk/2014/12/hello-world-meet-our-new-experimental.html&#34;&gt;Android Developer Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tools.android.com/tech-docs/jackandjill&#34;&gt;Android Tools Project Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Life without wires : ADB over WiFi</title>
      <link>http://crushingcode.github.io/life-without-wires-adb-over-wifi/</link>
      <pubDate>Thu, 09 Jul 2015 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/life-without-wires-adb-over-wifi/</guid>
      <description>

&lt;p&gt;Tired of being tied to your laptop/desktop while debugging your android apps ?
Well let me break it to you – You are NOT the FIRST person to do it.
Its a common practice to tether your device via a USB cable to the host machine and debug android apps.Well here is something for you that is going to set you free. Yes literally. You can run adb over WiFi (period)&lt;/p&gt;

&lt;p&gt;Yes , you read that right! Thats the secret solution(…ok not secret.. :p ) and setting it up is a piece of cake :P
Most people ask me why another post on this, well if you googled it you would come across a lot of information regarding the same but most of it is outdated or you would be using hit-and-trial method to get it working. I did some research on my own and found a way to get it working in the below steps.
I will walk you through the process of doing so in the most easiest way.
All you need is a USB cable (for the initial setup) and have your laptop/desktop and the devices connected to the same network (work on 99% cases)&lt;/p&gt;

&lt;h2 id=&#34;step-1&#34;&gt;Step 1&lt;/h2&gt;

&lt;p&gt;Connect your mobile device via USB and make sure usb debugging is on (you can do that via the developer options in your device).
Also connect to your Wifi.&lt;/p&gt;

&lt;h2 id=&#34;step-2&#34;&gt;Step 2&lt;/h2&gt;

&lt;p&gt;Open up the Terminal , provided you have the adb set in your PATH, type the following&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb devices
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this would list your device as connected over the USB&lt;/p&gt;

&lt;h2 id=&#34;step-3&#34;&gt;Step 3&lt;/h2&gt;

&lt;p&gt;To enable the wifi-debug-mode&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb tcpip 5555
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-4&#34;&gt;Step 4&lt;/h2&gt;

&lt;p&gt;Get your DEVICE-IP-ADDRESS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb shell netcfg | grep &#39;wlan0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will get something like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wlan0 UP 192.168.2.23/24 0x00001043 cc:c3:ea:ef:12:11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where 192.168.2.23 is your DEVICE-IP-ADDRESS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;you can simply on your device , go to&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Settings &amp;gt; About phone &amp;gt; Status&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;to view the IP address of your phone&lt;/p&gt;

&lt;h2 id=&#34;step-5&#34;&gt;Step 5&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT : Remove USB cable&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-6&#34;&gt;Step 6&lt;/h2&gt;

&lt;p&gt;Connect your device by typing in the below in the terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb connect DEVICE-IP-ADDRESS:5555
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-7&#34;&gt;Step 7&lt;/h2&gt;

&lt;p&gt;To confirm the connection just made, type in the terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb devices
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this should list your device as connected over the particular DEVICE-IP-ADDRESS
And you are done. Run/Debug your apps from your IDE in wireless mode.
Let the magic of wire-free-life begin.&lt;/p&gt;

&lt;h2 id=&#34;step-8&#34;&gt;Step 8&lt;/h2&gt;

&lt;p&gt;Did I mention that to switch back to USB mode you simply type in the below command in terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb usb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Things to Note:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you move into a different workspace and change WiFi networks, you simply repeat steps 5 and 6 . The steps 1 to 5 are used to set your device into wifi-debug mode.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The device will exit the wifi-debug mode when it restarts. So if your device restarts unfortunately, you will have to start over (from steps 1 to 6). So if you keep an eye on your battery and do not restart your device, you can live without cables for weeks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;
&lt;a href=&#34;http://developer.android.com/tools/help/adb.html&#34;&gt;Info about ADB&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>