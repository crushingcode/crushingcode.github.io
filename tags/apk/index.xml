<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apk on Crushing C.O.D.E</title>
    <link>http://crushingcode.github.io/tags/apk/index.xml</link>
    <description>Recent content in Apk on Crushing C.O.D.E</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2015</copyright>
    <atom:link href="http://crushingcode.github.io/tags/apk/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Do you like to ADB?</title>
      <link>http://crushingcode.github.io/do-you-like-to-adb/</link>
      <pubDate>Fri, 14 Oct 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/do-you-like-to-adb/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/doyouliketoadb/header.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Lets face it we all have been there , trying to fiddle with managing our emulators and dev devices. And at max we would do is try to manually manage it. Let me make this clear I am not talking about tests here as that&amp;rsquo;s all related to the code. My focus here is on managing the device/emulator that&amp;rsquo;s paired with your dev environment/system (..and to your IDE - Android Studio , if you still use Eclipse you are simply oblivious to the joys of coding in Android &lt;em&gt;[here is a long blank stare from me to you]&lt;/em&gt; ).&lt;/p&gt;

&lt;p&gt;Technically there is a tool called ADB (Android Debug Bridge) which maintains your connection with your device/emulator and the dev environment/system.&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&#34;https://en.wikipedia.org/wiki/Android_software_development#ADB&#34;&gt;wikipedia&lt;/a&gt;, it&amp;rsquo;s described as&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;adb&lt;/strong&gt; is the command line tool provided in the Android SDK package. &lt;strong&gt;adb&lt;/strong&gt; stands for Android Debug Bridge which allows you to communicate with an emulator instance or connected Android-powered device to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manage the state of an emulator or device.&lt;/li&gt;
&lt;li&gt;Run shell commands on a device.&lt;/li&gt;
&lt;li&gt;Manage port forwarding on an emulator or device.&lt;/li&gt;
&lt;li&gt;Copy files to/from an emulator or device.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ohhk&amp;hellip; that sounds something of use but not convincing enough for you to try and play with it yet. Let me try and put forward some of the problem as a dev you are facing everyday (..and yet no one admits to them whenever it comes up in a conversation üôÑ..) and how can we solve this.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;uninstalling-an-app&#34;&gt;Uninstalling an app&lt;/h3&gt;

&lt;p&gt;Oh yeah ..you are used to hitting &lt;strong&gt;Run&lt;/strong&gt; in the IDE (or the keyboard shortcut for the same) and BOOM the apk installs in the device. But what do you do to uninstall the apk ? &lt;strong&gt;[Rolling eyes]&lt;/strong&gt; ohh yeah I know ..you will open up your device/emulator and manually uninstall the app by dragging it to the trash bin in the home screen and hit yes when prompted to uninstall it. Hard ain&amp;rsquo;t it ? Yeah it is.&lt;/p&gt;

&lt;p&gt;ADB can make it as simple as executing just a command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb uninstall &amp;lt;package_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if you wish to keep the data and cache directory intact but uninstall the app just add &lt;code&gt;-k&lt;/code&gt; as an option to the command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb uninstall [-k] &amp;lt;package_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;[ ]&lt;/code&gt; means its an optional parameter&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of Course you can install an app too via&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb install [-r] [-s] &amp;lt;package_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the options available to the command are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt; : reinstall the app, keeping its data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt; : install on SD card instead of internal storage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That looks neat.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;direct-adb-commands-to-specific-devices-when-you-have-multiple-of-those-connected&#34;&gt;Direct ADB commands to specific devices when you have multiple of those connected&lt;/h3&gt;

&lt;p&gt;Ok this one is my favorite üôÉ&lt;/p&gt;

&lt;p&gt;So here is the thing. You have like 5-6 devices connected to your dev environment and now you want to do some work with a specific device at a time. Piece of üç∞&lt;/p&gt;

&lt;p&gt;Easy you say, right ? Like you can just fire up your Android Studio and execute the app in some specific device.&lt;/p&gt;

&lt;p&gt;Not so early üòÖ. Let me complete. You want to execute commands in a certain order üôÑ ..yeah it isn&amp;rsquo;t easy ar you thought before , eh ü§î&lt;/p&gt;

&lt;p&gt;For our example here let&amp;rsquo;s assume we have like 3 devices and 2 emulators running, named as &lt;code&gt;device_1&lt;/code&gt;, &lt;code&gt;device_2&lt;/code&gt;, &lt;code&gt;device_3&lt;/code&gt;, &lt;code&gt;emu_1&lt;/code&gt;, &lt;code&gt;emu_2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our end goal is to be able to execute some adb command on the these devices/emulator in order such as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;emu_1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;device_3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;device_1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;device_2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emu_2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cool ? Now first of all let me give you the magic commands to handle this situation. Lets look at what&amp;rsquo;s available to us&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb -d &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this will do is it will directs command to the only connected USB device. Naice üôÇ&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can also use &lt;code&gt;adb -e &amp;lt;command&amp;gt;&lt;/code&gt; to directs command to the only connected Emulator&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But we wanna go a step ahead and orchestrate commands in a pattern (..by writing a bash script, obviously). But to do that I need to specifically direct commands to the device I want to control.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb -s &amp;lt;device_id&amp;gt; &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Get the device id by using &lt;code&gt;adb devices&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we are talking üòé. Now the only thing I gotta do is create a bash script something like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

adb -s &amp;lt;emu_1_id&amp;gt; &amp;lt;some_command&amp;gt;
adb -s &amp;lt;device_3_id&amp;gt; &amp;lt;some_command&amp;gt;
adb -s &amp;lt;device_1_id&amp;gt; &amp;lt;some_command&amp;gt;
adb -s &amp;lt;device_2_id&amp;gt; &amp;lt;some_command&amp;gt;
adb -s &amp;lt;emu_2_id&amp;gt; &amp;lt;some_command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;where &lt;code&gt;&amp;lt;some_command&amp;gt;&lt;/code&gt; does not have to be the same.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;..and&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;save it as &lt;code&gt;execute_cmds_as_symphony.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;make it executable by running &lt;code&gt;chmod +x execute_cmds_as_symphony.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;execute it by running &lt;code&gt;./execute_cmds_as_symphony.sh&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s all there is. Everytime you wanna run it like this just run the bash script ü§ì üòé&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s like creating a symphony with your devices , except for the fact it&amp;rsquo;s not ..gonna be a symphony in the first place. And its just code executingü§î But you get my point , rightüòÖ&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;connect-wirelessly-with-your-device&#34;&gt;Connect wirelessly with your device&lt;/h3&gt;

&lt;p&gt;Read my post &lt;a href=&#34;http://crushingcode.co/life-without-wires-adb-over-wifi/&#34;&gt;&amp;ldquo;Life without wires : ADB over WiFi&amp;rdquo;&lt;/a&gt; to learn how to set it up.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;device-does-not-show-up-in-the-android-studio-deploy-list&#34;&gt;Device does not show up in the Android Studio deploy list&lt;/h3&gt;

&lt;p&gt;There are times when the device would not show up in your IDE. Possible issue could be that adb is not responding.&lt;/p&gt;

&lt;p&gt;To fix that simply kill the server and start it again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Kill the server if it is running
adb kill-server 

# Start the server
adb start-server
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;I have seen that you also need to uncheck and then check &lt;strong&gt;ADB Integration&lt;/strong&gt; inside Android Studio as an extra step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/doyouliketoadb/adbintegration.jpg&#34; alt=&#34;adbintegration&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;to-get-device-information&#34;&gt;To get Device Information&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Prints about the current state of the device : offline | bootloader | device
adb get-state

# Prints the serial number of the device
adb get-serialno

# Prints the device path
adb get-devpath 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;copy-file-to-from-device-emulator&#34;&gt;Copy file to/from device/emulator&lt;/h3&gt;

&lt;p&gt;You can advocate about trying to copy files from your device by opening up some software and then dragging and dropping things onto your desktop. But I am fan of automating things and the above mentioned method is completely fine if you are doing that for one file and only once or twice.&lt;/p&gt;

&lt;p&gt;It changes when you wanted to do the same task again and again. When you want to automate things &lt;code&gt;adb&lt;/code&gt; commands come in handy. You can even add them to a script and run it every time one of the task completes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To push a file/dir to device&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb push &amp;lt;local&amp;gt; &amp;lt;remote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;&amp;lt;local&amp;gt;&lt;/code&gt; is file in your local system i.e &lt;code&gt;my_image.png&lt;/code&gt; and &lt;code&gt;&amp;lt;remote&amp;gt;&lt;/code&gt; is file location in device/emulator i.e &lt;code&gt;/sdcard/Downloads/my_image.png&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb push ~/Downloads/my_image.png /sdcard/Downloads/my_image.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;To pull a file/dir from device&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb pull &amp;lt;remote&amp;gt; [&amp;lt;local&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;&amp;lt;local&amp;gt;&lt;/code&gt; is file in your local system i.e &lt;code&gt;my_image.png&lt;/code&gt; and &lt;code&gt;&amp;lt;remote&amp;gt;&lt;/code&gt; is file location in device/emulator i.e &lt;code&gt;/sdcard/Downloads/my_image.png&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb pull /sdcard/Downloads/my_image.png my_image.png
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;acting-as-a-developer-utility-belt&#34;&gt;Acting as a Developer utility-belt&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Generate Public/Private Key&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb keygen &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The private key is stored in &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;, and the public key is stored in &lt;file&gt;.pub.
Any existing files are overwritten.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Get a bug report&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Prints to the standard output
adb bugreport

# Writes to a file named bugreport.txt
adb bugreport &amp;gt; bugreport.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Get list of all connected devices&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb devices
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;logging&#34;&gt;Logging&lt;/h3&gt;

&lt;p&gt;Of Course this is inbuilt into the IDE , but its worth knowing that it&amp;rsquo;s not just a window which you use in Android Studio, but so much more.&lt;/p&gt;

&lt;p&gt;Lets check out its power when used from terminal&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Dumps log entries from 3 log buffers: main, events and radio
adb logcat

# Dumps log entries in long format
adb logcat -v long

# Dumps log entries into rotated log files on the device
adb logcat -f /sdcard/Download/Android.log -r 1024 -n 8

# Dumps only error log entries generated from the &amp;quot;AndroidRuntime&amp;quot; process, including Java exceptions
adb logcat AndroidRuntime:E *:S

# Clears (flushes) the entire log and exits
adb logcat -c

# Dumps the log to the screen and exits
adb logcat -d

# Writes log message output to a file. The default is the &amp;quot;stdout - Standard Output&amp;quot;
adb logcat -f &amp;lt;filename&amp;gt;

# Prints the size of the specified log buffer and exits
adb logcat -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Logcat Format&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To define the format of each log entry that is dumped , you need to set the output format for log messages&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# The default is brief format
adb logcat -v &amp;lt;format&amp;gt;

# Display priority/tag and the PID of process issuing the message (the default format)
adb logcat -v brief

# Display PID with the log info 
adb logcat -v process

# Display the raw log message, with no other metadata fields
adb logcat -v raw

# Display the date, invocation time, priority/tag, and PID of the process issuing the message
adb logcat -v time

# Display the priority, tag, and the PID and TID of the thread issuing the message
adb logcat -v thread

# Display the date, invocation time, priority, tag, and the PID and TID of the thread issuing the message
adb logcat -v threadtime

# Display all metadata fields and separate messages with a blank lines
adb logcat -v long
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Filter your log data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A few people would say that we can always use &lt;code&gt;| grep &amp;quot;filter_text&amp;quot;&lt;/code&gt; appended to the &lt;code&gt;adb logcat&lt;/code&gt;. Well you are right you can , but there are some neat tricks hidden in the actual implementation of logcat and you should look at them too.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb logcat &amp;lt;options&amp;gt; &amp;lt;process-tag&amp;gt;:&amp;lt;priority-code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;When filters are provided, the &amp;ldquo;logcat&amp;rdquo; command will dump log entries that are generated from specified processes with priorities higher than the specified code, plus all log entries that generated from unspecified processes.&lt;/p&gt;

&lt;p&gt;A wildcard character, &amp;ldquo;*&amp;ldquo;, can be used to represent all processes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;List of all priority codes that can be used in the &amp;ldquo;logcat&amp;rdquo; command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;V&lt;/code&gt; - Verbose (lowest priority)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;D&lt;/code&gt; - Debug&lt;/li&gt;
&lt;li&gt;&lt;code&gt;I&lt;/code&gt; - Info (default priority)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;W&lt;/code&gt; - Warning&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E&lt;/code&gt; - Error&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F&lt;/code&gt; - Fatal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt; - Silent (highest priority, on which nothing is ever printed)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;to-control-the-device&#34;&gt;To control the device&lt;/h3&gt;

&lt;p&gt;This is pretty well know to people who are into Modding their device. But for people who aren&amp;rsquo;t going to mess with their device, here is what you can do with &lt;strong&gt;ADB&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Remounts the /system partition on the device read-write
adb remount

# Reboots the device, optionally into the bootloader or recovery program
adb reboot [bootloader|recovery]

# Reboots the device into the bootloader
adb reboot-bootloader

# Restarts the adbd daemon with root permissions
adb root

# Restarts the adbd daemon listening on USB
adb usb

# Restarts the adbd daemon listening on TCP on the specified port
adb tcpip &amp;lt;port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;some-other-base-functionality&#34;&gt;Some other base functionality&lt;/h3&gt;

&lt;p&gt;I am just going to list some more commands , just because well they exist! üòã&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Show help about all commands for adb, check this to get info about more commands in adb
adb help

# Shows the version number for adb
adb version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comment/Suggestions always welcome.&lt;/p&gt;

&lt;p&gt;If you would like to get more of such android tips and tricks, just hop onto my &lt;strong&gt;&lt;a href=&#34;https://github.com/nisrulz/android-tips-tricks&#34;&gt;Android Tips &amp;amp; Tricks&lt;/a&gt;&lt;/strong&gt; github repository. I keep updating it constantly.&lt;/p&gt;

&lt;p&gt;Keep on crushing code!ü§ì üòÅ&lt;/p&gt;

&lt;p&gt;P.S. : This post is also published on &lt;a href=&#34;https://medium.com/@nisrulz/do-you-like-to-adb-fcae3655b9c8#.e4y1a7km5&#34;&gt;medium.&lt;/a&gt;
I would like to mention that &lt;a href=&#34;https://twitter.com/pbreault&#34;&gt;@pbreault&lt;/a&gt; wrote a plugin for Android Studio and Intellij IDEA called &lt;a href=&#34;https://plugins.jetbrains.com/plugin/7380&#34;&gt;ADB Idea&lt;/a&gt; &lt;a href=&#34;https://github.com/pbreault/adb-idea&#34;&gt;[Github]&lt;/a&gt;, which allows you to do some of the common and straightforward interactions with ADB inside IntelliJ platform i.e Android Studio. Do check it out too üôÇ&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Whats in the APK?</title>
      <link>http://crushingcode.github.io/whats-in-the-apk/</link>
      <pubDate>Sat, 24 Sep 2016 10:54:24 +0200</pubDate>
      
      <guid>http://crushingcode.github.io/whats-in-the-apk/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/header.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If I give you the code of an android app and ask you to provide me information regarding the android &lt;strong&gt;app&lt;/strong&gt; like  &lt;code&gt;minSdkVersion&lt;/code&gt;, &lt;code&gt;targetSdkVersion&lt;/code&gt;, permissions, configurations, almost anyone who knows how to code an android app would provide it to me in a few minutes. But what if I gave you an android &lt;strong&gt;apk&lt;/strong&gt; file and then ask you to answer for the same ü§î Its tricky if you try to think at the very first instance.&lt;/p&gt;

&lt;p&gt;I actually ran into such a situation and even though I had known &lt;code&gt;aapt&lt;/code&gt; tool for a long time, it didnot hit my head the very first instance when I had to get the permissions declared inside the &lt;code&gt;apk&lt;/code&gt;. It was clear I needed to brush up the concepts and follow an efficient approach. This blog post will explain how to do so. Also helpful when you are trying to reverse lookup contents of any other app ü§ì&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Ok, the most common way to approach this problem has to be this one&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Going with the definition of an &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Android_application_package&#34;&gt;APK&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Android application package (APK)&lt;/strong&gt; is the package file format used by the Android operating system for distribution and installation of mobile apps and middleware.&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;strong&gt;APK&lt;/strong&gt; files are a type of archive file, specifically in &lt;strong&gt;zip&lt;/strong&gt; format packages based on the JAR file format, with .apk as the filename extension.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/apk.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;..hmm so its basically a &lt;em&gt;&lt;strong&gt;ZIP&lt;/strong&gt;&lt;/em&gt; format, so what I can do is rename the extension from &lt;strong&gt;.apk&lt;/strong&gt; to &lt;strong&gt;.zip&lt;/strong&gt; and I should be able extract the contents.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/rename.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/zip.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cool, so we now see what the zip file contain and they are all available for inspection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/contents.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Well at this point you would think that you have got access to all files so you can give me all the information right away. Well not so quick Mr.AndroidDev üò¨&lt;/p&gt;

&lt;p&gt;Go ahead try and open up the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; in some text editor to check out its content. This is what you would get&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://crushingcode.github.io/images/posts/whatsintheapk/androidmanifest.jpg&#34; alt=&#34;header&#34; /&gt;&lt;/p&gt;

&lt;p&gt;..what it basically means is that the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; isn&amp;rsquo;t in human readable format anymore. So your chances of reading basic information regarding the apk from the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; goes down the drain üòû&lt;/p&gt;

&lt;p&gt;&amp;hellip;.&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;..&lt;/p&gt;

&lt;p&gt;..Not really üòã There are tools to analyze the Android APK and there is one which has been there since the very beginning.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think its known to all the experinced devs but I am pretty sure a lot of budding as well as seasoned Android Devs have not even heard about it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The tool thats available as part of the Android Build Tool is&lt;/p&gt;

&lt;h4 id=&#34;aapt-android-asset-packaging-tool&#34;&gt;&lt;strong&gt;&lt;code&gt;aapt&lt;/code&gt;&lt;/strong&gt; -  Android Asset Packaging Tool&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;This tool can be used to list, add and remove files in an APK file, package resources, crunching PNG files, etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First of all, where exactly is this located ü§î&lt;/p&gt;

&lt;p&gt;Good question, its available as part of build tools in your android sdk.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;path_to_android_sdk&amp;gt;/build-tools/&amp;lt;build_tool_version_such_as_24.0.2&amp;gt;/aapt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..ok so what can it actually do ? From the &lt;code&gt;man&lt;/code&gt; pages of the tool itself&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aapt list&lt;/code&gt; - Listing contents of a ZIP, JAR or APK file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aapt dump&lt;/code&gt; - Dumping specific information from an APK file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aapt package&lt;/code&gt; - Packaging Android resources.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aapt remove&lt;/code&gt; - Removing files from a ZIP, JAR or APK file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aapt add&lt;/code&gt; - Adding files to a ZIP, JAR or APK file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aapt crunch&lt;/code&gt; - Crunching PNG files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are interested in &lt;code&gt;aapt list&lt;/code&gt; and &lt;code&gt;aapt dump&lt;/code&gt; specifically as these are what will help us provide &lt;code&gt;apk&lt;/code&gt; information.&lt;/p&gt;

&lt;p&gt;Lets find information that we are looking for directly from the &lt;code&gt;apk&lt;/code&gt; by running the &lt;code&gt;aapt&lt;/code&gt; tool on it.&lt;/p&gt;

&lt;hr&gt;

&lt;h5 id=&#34;get-base-information-of-the-apk&#34;&gt;Get base information of the apk&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aapt dump badging app-debug.apk 
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result&#34;&gt;&amp;gt; Result&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;package: name=&#39;com.example.application&#39; versionCode=&#39;1&#39; versionName=&#39;1.0&#39; platformBuildVersionName=&#39;&#39;
sdkVersion:&#39;16&#39;
targetSdkVersion:&#39;24&#39;
uses-permission: name=&#39;android.permission.WRITE_EXTERNAL_STORAGE&#39;
uses-permission: name=&#39;android.permission.CAMERA&#39;
uses-permission: name=&#39;android.permission.VIBRATE&#39;
uses-permission: name=&#39;android.permission.INTERNET&#39;
uses-permission: name=&#39;android.permission.RECORD_AUDIO&#39;
uses-permission: name=&#39;android.permission.READ_EXTERNAL_STORAGE&#39;
application-label-af:&#39;Example&#39;
application-label-am:&#39;Example&#39;
application-label-ar:&#39;Example&#39;
..
application-label-zu:&#39;Example&#39;
application-icon-160:&#39;res/mipmap-mdpi-v4/ic_launcher.png&#39;
application-icon-240:&#39;res/mipmap-hdpi-v4/ic_launcher.png&#39;
application-icon-320:&#39;res/mipmap-xhdpi-v4/ic_launcher.png&#39;
application-icon-480:&#39;res/mipmap-xxhdpi-v4/ic_launcher.png&#39;
application-icon-640:&#39;res/mipmap-xxxhdpi-v4/ic_launcher.png&#39;
application: label=&#39;Example&#39; icon=&#39;res/mipmap-mdpi-v4/ic_launcher.png&#39;
application-debuggable
launchable-activity: name=&#39;com.example.application.MainActivity&#39;  label=&#39;&#39; icon=&#39;&#39;
feature-group: label=&#39;&#39;
  uses-feature: name=&#39;android.hardware.camera&#39;
  uses-feature-not-required: name=&#39;android.hardware.camera.autofocus&#39;
  uses-feature-not-required: name=&#39;android.hardware.camera.front&#39;
  uses-feature-not-required: name=&#39;android.hardware.microphone&#39;
  uses-feature: name=&#39;android.hardware.faketouch&#39;
  uses-implied-feature: name=&#39;android.hardware.faketouch&#39; reason=&#39;default feature for all apps&#39;
main
other-activities
supports-screens: &#39;small&#39; &#39;normal&#39; &#39;large&#39; &#39;xlarge&#39;
supports-any-density: &#39;true&#39;
locales: &#39;af&#39; &#39;am&#39; &#39;ar&#39; &#39;az-AZ&#39; &#39;be-BY&#39; &#39;bg&#39; &#39;bn-BD&#39; &#39;bs-BA&#39; &#39;ca&#39; &#39;cs&#39; &#39;da&#39; &#39;de&#39; &#39;el&#39; &#39;en-AU&#39; &#39;en-GB&#39; &#39;en-IN&#39; &#39;es&#39; &#39;es-US&#39; &#39;et-EE&#39; &#39;eu-ES&#39; &#39;fa&#39; &#39;fi&#39; &#39;fr&#39; &#39;fr-CA&#39; &#39;gl-ES&#39; &#39;gu-IN&#39; &#39;hi&#39; &#39;hr&#39; &#39;hu&#39; &#39;hy-AM&#39; &#39;in&#39; &#39;is-IS&#39; &#39;it&#39; &#39;iw&#39; &#39;ja&#39; &#39;ka-GE&#39; &#39;kk-KZ&#39; &#39;km-KH&#39; &#39;kn-IN&#39; &#39;ko&#39; &#39;ky-KG&#39; &#39;lo-LA&#39; &#39;lt&#39; &#39;lv&#39; &#39;mk-MK&#39; &#39;ml-IN&#39; &#39;mn-MN&#39; &#39;mr-IN&#39; &#39;ms-MY&#39; &#39;my-MM&#39; &#39;nb&#39; &#39;ne-NP&#39; &#39;nl&#39; &#39;pa-IN&#39; &#39;pl&#39; &#39;pt&#39; &#39;pt-BR&#39; &#39;pt-PT&#39; &#39;ro&#39; &#39;ru&#39; &#39;si-LK&#39; &#39;sk&#39; &#39;sl&#39; &#39;sq-AL&#39; &#39;sr&#39; &#39;sr-Latn&#39; &#39;sv&#39; &#39;sw&#39; &#39;ta-IN&#39; &#39;te-IN&#39; &#39;th&#39; &#39;tl&#39; &#39;tr&#39; &#39;uk&#39; &#39;ur-PK&#39; &#39;uz-UZ&#39; &#39;vi&#39; &#39;zh-CN&#39; &#39;zh-HK&#39; &#39;zh-TW&#39; &#39;zu&#39;
densities: &#39;160&#39; &#39;240&#39; &#39;320&#39; &#39;480&#39; &#39;640&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h5 id=&#34;get-list-of-permissions-declared-in-the-androidmanifest-of-the-apk&#34;&gt;Get list of permissions declared in the AndroidManifest of the apk&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aapt dump permissions app-debug.apk
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result-1&#34;&gt;&amp;gt; Result&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;package: com.example.application
uses-permission: name=&#39;android.permission.WRITE_EXTERNAL_STORAGE&#39;
uses-permission: name=&#39;android.permission.CAMERA&#39;
uses-permission: name=&#39;android.permission.VIBRATE&#39;
uses-permission: name=&#39;android.permission.INTERNET&#39;
uses-permission: name=&#39;android.permission.RECORD_AUDIO&#39;
uses-permission: name=&#39;android.permission.READ_EXTERNAL_STORAGE&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h5 id=&#34;get-list-of-configurations-for-the-apk&#34;&gt;Get list of configurations for the apk&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aapt dump configurations app-debug.apk
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result-2&#34;&gt;&amp;gt; Result&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;large-v4
xlarge-v4
night-v8
v11
v12
v13
w820dp-v13
h720dp-v13
sw600dp-v13
v14
v17
v18
v21
ldltr-v21
v22
v23
port
land
mdpi-v4
ldrtl-mdpi-v17
hdpi-v4
ldrtl-hdpi-v17
xhdpi-v4
ldrtl-xhdpi-v17
xxhdpi-v4
ldrtl-xxhdpi-v17
xxxhdpi-v4
ldrtl-xxxhdpi-v17
ca
af
..
sr
b+sr+Latn
...
sv
iw
sw
bs-rBA
fr-rCA
lo-rLA
...
kk-rKZ
uz-rUZ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..also try out these&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Print the resource table from the APK.
aapt dump resources app-debug.apk

# Print the compiled xmls in the given assets.
aapt dump xmltree app-debug.apk

# Print the strings of the given compiled xml assets.
aapt dump xmlstrings app-debug.apk

# List contents of Zip-compatible archive.
aapt list -v -a  app-debug.apk    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. as you can see you can easily get the information without even going through the process of unzipping the &lt;code&gt;apk&lt;/code&gt;, but by using the &lt;code&gt;aapt&lt;/code&gt; tool directly on the &lt;code&gt;apk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is more that you can do , taking more info from the &lt;code&gt;man&lt;/code&gt; pages of the &lt;code&gt;aapt&lt;/code&gt; tool&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aapt r[emove] [-v] file.{zip,jar,apk} file1 [file2 ...]
  Delete specified files from Zip-compatible archive.
  
aapt a[dd] [-v] file.{zip,jar,apk} file1 [file2 ...]
  Add specified files to Zip-compatible archive.

aapt c[runch] [-v] -S resource-sources ... -C output-folder ...
  Do PNG preprocessing and store the results in output folder.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;..I will let you explore these on your own üôÇ&lt;/p&gt;

&lt;p&gt;Comment/Suggestions always welcome.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://elinux.org/Android_aapt&#34;&gt;Reference Link&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Got featured in &lt;a href=&#34;http://androidweekly.net/issues/issue-224&#34;&gt;AndroidWeekly Issue 224&lt;/a&gt;, thank you for the love&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you would like to get more of such android tips and tricks, just hop onto my &lt;strong&gt;&lt;a href=&#34;https://github.com/nisrulz/android-tips-tricks&#34;&gt;Android Tips &amp;amp; Tricks&lt;/a&gt;&lt;/strong&gt; github repository. I keep updating it constantly.&lt;/p&gt;

&lt;p&gt;Keep on crushing code!ü§ì üòÅ&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>